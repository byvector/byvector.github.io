<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[supce's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.supce.com/"/>
  <updated>2016-11-13T11:34:41.849Z</updated>
  <id>http://blog.supce.com/</id>
  
  <author>
    <name><![CDATA[supce]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[IFE Task 10]]></title>
    <link href="http://blog.supce.com/2016/11/13/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8017/"/>
    <id>http://blog.supce.com/2016/11/13/JavaScript之基础17/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-13T11:34:41.849Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将二叉树变成了多叉树，并且每一个节点中带有内容</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点</li>
<li>增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>这里首先也采用面向过程的思路，实现对多叉树的遍历，这里利用深度优先模拟了前中后序遍历，同时也实现了广度优先遍历，也可以利用这四种方式进行查询。</p>
<p>首先是利用div模拟多叉树，同时添加四个按钮和一个文本框用来进行不同的遍历和查询。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tree_wrap"</span>&gt;</span>
    Super
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        Cat
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Apple
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Pear<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Pig<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Cola<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Soccer<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Phone
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Book<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>School<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        Note
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Human
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Code<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Operate<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Man<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Program
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>
                Bement  
                <span class="tag">&lt;<span class="title">div</span>&gt;</span>Cat<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Glass<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        Fish
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"searchValue"</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"dlr"</span>&gt;</span>深度优先模拟前序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"ldr"</span>&gt;</span>深度优先模拟中序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"lrd"</span>&gt;</span>深度优先模拟后序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"bfs"</span>&gt;</span>广度优先遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>文本框为空时只进行遍历。如果需要搜索，请在文本框中输入要查询的内容<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
</code></pre><p>把上面提到的四种遍历算法写出来，在进行广度遍历时，添加一个临时数组，模拟队列进行广度遍历。</p>
<pre><code><span class="comment">//深度优先模拟前序</span>
<span class="function"><span class="keyword">function</span> <span class="title">dlr</span><span class="params">(node)</span>{</span>
    <span class="comment">// console.log(node.children[0]);</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        nodeArray.push<span class="params">(node)</span>;
        <span class="keyword">if</span><span class="params">(node.children)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;node.children.length;i++)</span>{
                dlr<span class="params">(node.children[i])</span>;
            }
        }
    }
}
<span class="comment">//深度优先模拟中序</span>
<span class="function"><span class="keyword">function</span> <span class="title">ldr</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        ldr<span class="params">(node.firstElementChild)</span>;
        nodeArray.push<span class="params">(node)</span>;
        <span class="keyword">for</span><span class="params">(var i=<span class="number">1</span>;i&lt;node.children.length;i++)</span>{
            ldr<span class="params">(node.children[i])</span>;
        }
    }
}
<span class="comment">//深度优先模拟后序</span>
<span class="function"><span class="keyword">function</span> <span class="title">lrd</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node.children)</span>{
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;node.children.length;i++)</span>{
            lrd<span class="params">(node.children[i])</span>;
        }
    }
    nodeArray.push<span class="params">(node)</span>;
}
<span class="comment">//广度优先</span>
<span class="function"><span class="keyword">function</span> <span class="title">bfs</span><span class="params">(node)</span>{</span>
    var temp = [];
    <span class="keyword">if</span><span class="params">(node)</span>{
        temp.push<span class="params">(node)</span>;
    }
    while<span class="params">(temp.length)</span>{
        node = temp.shift<span class="params">()</span>;
        nodeArray.push<span class="params">(node)</span>;
        <span class="keyword">if</span><span class="params">(node.children)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;node.children.length;i++)</span>{
                temp.push<span class="params">(node.children[i])</span>;
            }
        }
    }
}
</code></pre><p>然后把按钮与不同的算法相关联</p>
<pre><code><span class="comment">//按钮handler</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandler</span>(<span class="params"></span>)</span>{
    <span class="keyword">if</span>(isRun){
        alert(<span class="string">"等会儿"</span>);
    }<span class="keyword">else</span>{
        <span class="keyword">var</span> tree = $(<span class="string">"#tree_wrap"</span>);
        <span class="keyword">var</span> id = event.target.id;
        <span class="keyword">switch</span>(id){
            <span class="keyword">case</span> <span class="string">'dlr'</span>:
                dlr(tree);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'ldr'</span>:
                ldr(tree);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'lrd'</span>:
                lrd(tree);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'bfs'</span>:
                bfs(tree);
                <span class="keyword">break</span>;
        }
        renderData();
    }

}
<span class="comment">//初始化函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        addHandler(btns[i],<span class="string">"click"</span>,btnHandler);
    }
    <span class="keyword">var</span> searchInput = $(<span class="string">"#searchValue"</span>);
    searchInput.addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });

}
</code></pre><p>在最后的渲染函数中，在原来的基础上，根据input中是否为空来判断是否需要查询。</p>
<pre><code>var isRun = <span class="literal">false</span>;
<span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span>{</span>
    var value = $<span class="params">(<span class="string">"#searchValue"</span>)</span>.value.trim<span class="params">()</span>;
    <span class="comment">//清除查询标记的颜色</span>
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;nodeArray.length;i++)</span>{
        <span class="comment">// nodeArray[i].style.color = "#000";</span>
        nodeArray[i].classList.remove<span class="params">(<span class="string">"searched"</span>)</span>;
    }
    var timer = null,i=<span class="number">0</span>,isSeached = <span class="literal">false</span>;
    timer = setInterval<span class="params">(run,<span class="number">500</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        isRun = <span class="literal">true</span>;
        <span class="keyword">if</span><span class="params">(i&lt;nodeArray.length)</span>{
            <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                <span class="comment">// nodeArray[i-1].className = "";</span>
                nodeArray[i-<span class="number">1</span>].classList.remove<span class="params">(<span class="string">"selected"</span>)</span>;
            }
            <span class="comment">// nodeArray[i].className = "selected";</span>
            nodeArray[i].classList.add<span class="params">(<span class="string">"selected"</span>)</span>;
            <span class="comment">//判断是否在进行查询</span>
            <span class="keyword">if</span><span class="params">(value)</span>{
                var nodeValue = nodeArray[i].firstChild.nodeValue.trim<span class="params">()</span>;
                <span class="keyword">if</span><span class="params">(value == nodeValue)</span>{
                    <span class="comment">// nodeArray[i].style.color = "red";</span>
                    nodeArray[i].classList.add<span class="params">(<span class="string">"searched"</span>)</span>;
                    isSeached = <span class="literal">true</span>;
                }
            }
            i++;
        }<span class="keyword">else</span>{
            <span class="comment">//清除最一个节点的背景色</span>
            <span class="comment">// nodeArray[i-1].className = "";</span>
            nodeArray[i-<span class="number">1</span>].classList.remove<span class="params">(<span class="string">"selected"</span>)</span>;
            <span class="comment">//判断是否被找到</span>
            <span class="keyword">if</span><span class="params">(value &amp;&amp; !isSeached)</span>{
                alert<span class="params">(<span class="string">"没有找到"</span>)</span>;
            }
            nodeArray = [];
            isRun = <span class="literal">false</span>;
            clearInterval<span class="params">(timer)</span>;
            return;
        }
    }
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task23.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task23.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将二叉树变成了多叉树，并且每一个节点中带有内容</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点</li>
<li>增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 09 (二)]]></title>
    <link href="http://blog.supce.com/2016/11/11/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8016/"/>
    <id>http://blog.supce.com/2016/11/11/JavaScript之基础16/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-11T10:57:51.204Z</updated>
    <content type="html"><![CDATA[<hr>
<p>在上一文章中，用面向过程的思想实现了对二叉树的三种遍历。这篇采用面向对象实现了一下。<br>定义一个Node类，把遍历好的node节点保存在对象的属性中，把三种遍历方法和渲染方法作为对象的方法。<br>Node类代码如下：<br><a id="more"></a></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Node</span><span class="params">()</span>{</span>
    this.nodeArray = [];
}
Node.prototype = {
    <span class="comment">//前序</span>
    dlr : <span class="function"><span class="keyword">function</span><span class="params">(root)</span>{</span>
        <span class="keyword">if</span><span class="params">(root)</span>{
            this.nodeArray.push<span class="params">(root)</span>;
            this.dlr<span class="params">(root.firstElementChild)</span>;
            this.dlr<span class="params">(root.lastElementChild)</span>;
        }
    },
    <span class="comment">//中序</span>
    ldr : <span class="function"><span class="keyword">function</span><span class="params">(root)</span>{</span>
        <span class="keyword">if</span><span class="params">(root)</span>{
            this.ldr<span class="params">(root.firstElementChild)</span>;
            this.nodeArray.push<span class="params">(root)</span>;
            this.ldr<span class="params">(root.lastElementChild)</span>;
        }
    },
    <span class="comment">//后序</span>
    lrd : <span class="function"><span class="keyword">function</span><span class="params">(root)</span>{</span>
        <span class="keyword">if</span><span class="params">(root)</span>{
            this.lrd<span class="params">(root.firstElementChild)</span>;
            this.lrd<span class="params">(root.lastElementChild)</span>;
            this.nodeArray.push<span class="params">(root)</span>;
        }
    },
    <span class="comment">//可视化遍历</span>
    <span class="built_in">render</span> : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        var timer = null,len = this.nodeArray.length,i = <span class="number">0</span>;
        var nodeArray = this.nodeArray;
        timer = setInterval<span class="params">(run,<span class="number">500</span>)</span>;
        <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
            <span class="keyword">if</span><span class="params">(i &lt; len)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                    nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
                }
                nodeArray[i].className = <span class="string">"selected"</span>;
                i++;
            }<span class="keyword">else</span>{
                <span class="comment">//清除最一个节点的背景色</span>
                nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
                clearInterval<span class="params">(timer)</span>;
            }
        }
        this.nodeArray = [];
    }
}
</code></pre><p>然后我们只需要给button添加下点击事件就可以了</p>
<pre><code><span class="comment">//根据不同的按钮调用不同的排序算法</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandle</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> id = event.target.id;
    <span class="keyword">var</span> root = $(<span class="string">'tree_wrap'</span>);
    <span class="keyword">var</span> tree = <span class="keyword">new</span> Node();
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'dlr'</span>:
            tree.dlr(root);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'ldr'</span>:
            tree.ldr(root);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'lrd'</span>:
            tree.lrd(root);
            <span class="keyword">break</span>;
    }
    tree.render();
}
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        addHandler(btns[i],<span class="string">"click"</span>,btnHandle);
    }
}
init();
</code></pre><hr>
<p><a href="https://github.com/byvector/code-monkey/blob/master/task22_2.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task22_2.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>在上一文章中，用面向过程的思想实现了对二叉树的三种遍历。这篇采用面向对象实现了一下。<br>定义一个Node类，把遍历好的node节点保存在对象的属性中，把三种遍历方法和渲染方法作为对象的方法。<br>Node类代码如下：<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 09]]></title>
    <link href="http://blog.supce.com/2016/11/10/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8015/"/>
    <id>http://blog.supce.com/2016/11/10/JavaScript之基础15/</id>
    <published>2016-11-09T16:00:00.000Z</published>
    <updated>2016-11-10T11:57:29.931Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中展现一颗二叉树的结构</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示</li>
<li>增加多个按钮，每个按钮对应不同的算法）</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点<a id="more"></a>
</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>二叉树还是容易的，直接利用div在页面展现一个二叉树结构，然后放上三个变量按钮</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tree_wrap"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"dlr"</span>&gt;</span>前序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"ldr"</span>&gt;</span>中序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"lrd"</span>&gt;</span>后序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
</code></pre><p>由于题目要求能够对遍历可视化，这里就把遍历后的节点保存在一个数组中，这样既记录了节点，又保存了节点的变量顺序，最后对数组进行可视化遍历即可。</p>
<p>首先给button添加点击事件</p>
<pre><code><span class="comment">//根据不同的按钮调用不同的排序算法</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandle</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> id = event.target.id;
    <span class="keyword">var</span> tree = $(<span class="string">"tree_wrap"</span>);
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'dlr'</span>:
            dlr(tree);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'ldr'</span>:
            ldr(tree);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'lrd'</span>:
            lrd(tree);
            <span class="keyword">break</span>;
    }
    renderData();
}
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        addHandler(btns[i],<span class="string">"click"</span>,btnHandle);
    }
}
init();
</code></pre><p>用递归把三种遍历函数写出来</p>
<pre><code><span class="comment">//前序遍历</span>
<span class="function"><span class="keyword">function</span> <span class="title">dlr</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        nodeArray.push<span class="params">(node)</span>;
        dlr<span class="params">(node.firstElementChild)</span>;
        dlr<span class="params">(node.lastElementChild)</span>;
    }
}
<span class="comment">//中序遍历</span>
<span class="function"><span class="keyword">function</span> <span class="title">ldr</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        ldr<span class="params">(node.firstElementChild)</span>;
        nodeArray.push<span class="params">(node)</span>;
        ldr<span class="params">(node.lastElementChild)</span>;
    }
}
<span class="comment">//后序遍历</span>
<span class="function"><span class="keyword">function</span> <span class="title">lrd</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        lrd<span class="params">(node.firstElementChild)</span>;
        lrd<span class="params">(node.lastElementChild)</span>;
        nodeArray.push<span class="params">(node)</span>;
    }
}
</code></pre><p>最后利用 <code>setInterval</code> 函数把遍历过程渲染出来，这里可以写一个renderData函数</p>
<pre><code><span class="comment">//存储遍历后的节点</span>
var nodeArray = [];
<span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span>{</span>
    var timer = null,i=<span class="number">0</span>;
    timer =setInterval<span class="params">(run,<span class="number">500</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        <span class="keyword">if</span><span class="params">(i&lt;nodeArray.length)</span>{
            <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
            }
            nodeArray[i].className = <span class="string">"selected"</span>;
            i++;
        }<span class="keyword">else</span>{
            <span class="comment">//清除最一个节点的背景色</span>
            nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
            clearInterval<span class="params">(timer)</span>;
            nodeArray = [];
            return;
        }
    }
    console.<span class="built_in">log</span><span class="params">(nodeArray)</span>;
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task22.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task22.html" target="_blank" rel="external">演示效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中展现一颗二叉树的结构</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示</li>
<li>增加多个按钮，每个按钮对应不同的算法）</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 08]]></title>
    <link href="http://blog.supce.com/2016/11/08/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8014/"/>
    <id>http://blog.supce.com/2016/11/08/JavaScript之基础14/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-08T11:41:09.642Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践JavaScript的基本语法、语言特性</li>
<li>练习使用JavaScript实现拖拽功能</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将任务的代码进行抽象、封装，然后在此基础上实现如图中的两个需求：Tag输入和兴趣爱好输入</li>
<li>实现一个tag输入框</li>
<li>要求遇到用户输入空格，逗号，回车时，都自动把当前输入的内容作为一个tag放在输入框下面。</li>
<li>Tag不能有重复的，遇到重复输入的Tag，自动忽视。</li>
<li>每个Tag请做trim处理</li>
<li>最多允许10个Tag，多于10个时，按照录入的先后顺序，把最前面的删掉</li>
<li>当鼠标悬停在tag上时，tag前增加删除二字，点击tag可删除<a id="more"></a></li>
<li>实现一个兴趣爱好输入的功能</li>
<li>通过一个Textarea进行兴趣爱好的输入，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为间隔。</li>
<li>当点击“确认兴趣爱好”的按钮时，将textarea中的输入按照你设定的间隔符，拆解成一个个的爱好，显示在textarea下方</li>
<li>爱好不能重复，所以在下方呈现前，需要做一个去重</li>
<li>每个爱好内容需要做trim处理</li>
<li>最多允许10个兴趣爱好，多于10个时，按照录入的先后顺序，把最前面的删掉</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>依然是按照要求首先写出HTML代码</p>
<pre><code><span class="tag">&lt;<span class="title">label</span>&gt;</span>Tag: <span class="tag">&lt;/<span class="title">label</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"user_tag"</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tags_wrap"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"hobby_input"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"hobby_btn"</span>&gt;</span>确认兴趣爱好<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hobby_wrap"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后给相应的元素绑定事件</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span><span class="params">(element,type,handler)</span>{</span>
    <span class="keyword">if</span><span class="params">(element.addEventListener)</span>{
        element.addEventListener<span class="params">(type,handler,<span class="literal">false</span>)</span>;
    }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(element.attachEvent)</span>{
        element.attachEvent<span class="params">(<span class="string">"on"</span> + type,handler)</span>;
    }<span class="keyword">else</span>{
        element[<span class="string">"on"</span> + type] = handler;
    }
}
<span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span>{</span>
    var tag = $<span class="params">(<span class="string">"#user_tag"</span>)</span>;
    var hobby_btn = $<span class="params">(<span class="string">"#hobby_btn"</span>)</span>;
    var tags_wrap = $<span class="params">(<span class="string">"#tags_wrap"</span>)</span>;
    var hobby_wrap = $<span class="params">(<span class="string">"#hobby_wrap"</span>)</span>;
    addHandler<span class="params">(tag,<span class="string">"keyup"</span>,addTag)</span>;
    addHandler<span class="params">(hobby_btn,<span class="string">"click"</span>,addHobby)</span>;
}
init<span class="params">()</span>;
</code></pre><p>这里，我们用两个数组，分别用来保存Tag和Hobby。为了能够在添加Tag和Hobby时共用渲染数据函数，可以设置一个标志参数，用来标志是否需要添加点击删除事件</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">(element,data,isDel)</span>{</span>
    var <span class="built_in">text</span> = <span class="string">""</span>;
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;data.length;i++)</span>{
        <span class="built_in">text</span> += '&lt;div&gt;' + data[i] + '&lt;/div&gt;';
    }
    element.innerHTML = <span class="built_in">text</span>;
    <span class="keyword">if</span><span class="params">(isDel)</span>{
        tagsEvent<span class="params">()</span>;
    }
}
</code></pre><p>然后根据题目要求，将添加Tag和Bobby函数写出来，其实就是对用户输入的数据进行检测和处理</p>
<pre><code><span class="comment">//添加tag</span>
<span class="function"><span class="keyword">function</span> <span class="title">addTag</span><span class="params">()</span>{</span>
    var value = $<span class="params">(<span class="string">"#user_tag"</span>)</span>.value;
    <span class="keyword">if</span><span class="params">(textCheck<span class="params">(value)</span> || event.keyCode == <span class="number">13</span>)</span>{
        value = value.trim<span class="params">()</span>.replace<span class="params">(/[，, ]/, '')</span>;
        <span class="keyword">if</span><span class="params">(value)</span>{
            <span class="keyword">if</span><span class="params">(!contains<span class="params">(tags,value)</span>)</span>{
                <span class="keyword">if</span><span class="params">(tags.length&lt;<span class="number">10</span>)</span>{
                    tags.push<span class="params">(value)</span>;
                }<span class="keyword">else</span>{
                    tags.shift<span class="params">()</span>;
                    tags.push<span class="params">(value)</span>;
                }
            }
            $<span class="params">(<span class="string">"#user_tag"</span>)</span>.value = <span class="string">""</span>;
        }
    }
    renderData<span class="params">(tags_wrap,tags,<span class="literal">true</span>)</span>;
}
<span class="comment">//添加兴趣</span>
<span class="function"><span class="keyword">function</span> <span class="title">addHobby</span><span class="params">()</span>{</span>
    var str_hobby = $<span class="params">(<span class="string">"#hobby_input"</span>)</span>.value.trim<span class="params">()</span>;
    <span class="keyword">if</span><span class="params">(str_hobby)</span>{
        var hobbyWord = str_hobby.split<span class="params">(/[^<span class="number">0</span>-<span class="number">9</span>a-zA-Z\u4e00-\u9fa5]+/)</span>;
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;hobbyWord.length;i++)</span>{
            <span class="keyword">if</span><span class="params">(!contains<span class="params">(hobby,hobbyWord[i])</span>)</span>{
                <span class="keyword">if</span><span class="params">(hobby.length&lt;<span class="number">10</span>)</span>{
                    hobby.push<span class="params">(hobbyWord[i])</span>;
                }<span class="keyword">else</span>{
                    hobby.shift<span class="params">()</span>;
                    hobby.push<span class="params">(hobbyWord[i])</span>;
                }
            }
        }
    renderData<span class="params">(hobby_wrap,hobby,<span class="literal">false</span>)</span>;
    $<span class="params">(<span class="string">"#hobby_input"</span>)</span>.value = <span class="string">""</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"请输入兴趣"</span>)</span>;
    }
}
</code></pre><p>最后只需把点击删除函数补充完整即可</p>
<pre><code><span class="comment">//给每个tag添加mouse和click事件</span>
<span class="function"><span class="keyword">function</span> <span class="title">tagsEvent</span><span class="params">()</span></span>{
    <span class="keyword">var</span> eles = tags_wrap.children;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;eles.length;i++){
        eles[i].addEventListener(<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            e.target.firstChild.insertData(<span class="number">0</span>,<span class="string">'点击删除 '</span>);
        });
        eles[i].addEventListener(<span class="string">"mouseout"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            e.target.firstChild.deleteData(<span class="number">0</span>,<span class="number">4</span>);
        });
        eles[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            <span class="keyword">var</span> node = e.target;
            <span class="comment">//获取当前div在数组中的索引</span>
            <span class="keyword">var</span> index = [].indexOf.call(node.parentNode.children,node);
            tags.splice(index,<span class="number">1</span>);
            <span class="comment">//渲染数据</span>
            renderData(tags_wrap,tags,<span class="literal">true</span>);
        });
    }
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task21.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task21.html" target="_blank" rel="external">演示地址</a></p>
<blockquote>
<p>时间确实不够用，也没有对页面进行美美的修饰 有时间的话一定补上</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践JavaScript的基本语法、语言特性</li>
<li>练习使用JavaScript实现拖拽功能</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将任务的代码进行抽象、封装，然后在此基础上实现如图中的两个需求：Tag输入和兴趣爱好输入</li>
<li>实现一个tag输入框</li>
<li>要求遇到用户输入空格，逗号，回车时，都自动把当前输入的内容作为一个tag放在输入框下面。</li>
<li>Tag不能有重复的，遇到重复输入的Tag，自动忽视。</li>
<li>每个Tag请做trim处理</li>
<li>最多允许10个Tag，多于10个时，按照录入的先后顺序，把最前面的删掉</li>
<li>当鼠标悬停在tag上时，tag前增加删除二字，点击tag可删除]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 07]]></title>
    <link href="http://blog.supce.com/2016/11/07/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8013/"/>
    <id>http://blog.supce.com/2016/11/07/JavaScript之基础13/</id>
    <published>2016-11-06T16:00:00.000Z</published>
    <updated>2016-11-07T11:50:56.301Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>实践JavaScript数组、字符串相关操作</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于 Task05 进行升级</li>
<li>将新元素输入框从input改为textarea</li>
<li>允许一次批量输入多个内容，格式可以为数字、中文、英文等，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为不同内容的间隔</li>
<li>增加一个查询文本输入框，和一个查询按钮，当点击查询时，将查询词在各个元素内容中做模糊匹配，将匹配到的内容进行特殊标识，如文字颜色等。举例，内容中有abcd，查询词为ab或bc，则该内容需要标识<a id="more"></a>
</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>首先根据题目要求将HTML写出来，一个div用来存放textarea、input和button。一个div用以最终数据的显示。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"myForm"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"data-input"</span> <span class="attribute">class</span>=<span class="value">"form-control"</span> <span class="attribute">rows</span>=<span class="value">"3"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
    <span class="comment">&lt;!-- &lt;input type="text" id="data-input"&gt; --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"btn-container"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"left-in"</span> <span class="attribute">class</span>=<span class="value">"btn btn-success"</span>&gt;</span>左侧入<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"right-in"</span> <span class="attribute">class</span>=<span class="value">"btn btn-success"</span>&gt;</span>右侧入<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"left-out"</span> <span class="attribute">class</span>=<span class="value">"btn btn-danger"</span>&gt;</span>左侧出<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"right-out"</span> <span class="attribute">class</span>=<span class="value">"btn btn-danger"</span>&gt;</span>右侧出<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"search"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"search-input"</span> <span class="attribute">class</span>=<span class="value">"form-control"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"search"</span> <span class="attribute">class</span>=<span class="value">"btn btn-primary"</span>&gt;</span>查询<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"list-wrap"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后给页面的各个元素添加事件监听器</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        btns[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
            btnHandle(e.target);
        });
    }
    $(<span class="string">"data-input"</span>).addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });
    $(<span class="string">"search-input"</span>).addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });
}
init();
</code></pre><p>写一个btnhandler用以处理不同的事件，针对不同的元素事件调用对应的函数</p>
<pre><code><span class="comment">//点击按钮时的处理逻辑</span>
<span class="function">function <span class="title">btnHandle</span><span class="params">(<span class="keyword">target</span>)</span></span>{
    var id = <span class="keyword">target</span>.id;
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'left-in'</span>:
            dataIn(<span class="string">"left"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-in'</span>:
            dataIn(<span class="string">"right"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'left-out'</span>:
            leftOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-out'</span>:
            rightOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'search'</span>:
            search();
            <span class="keyword">break</span>;
    }
    renderData();
}
</code></pre><p>然后就是完成数据的输入和输出函数</p>
<pre><code><span class="comment">//输入数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">dataIn</span><span class="params">(tag)</span>{</span>
    var <span class="built_in">str</span> = $<span class="params">(<span class="string">"data-input"</span>)</span>.value.trim<span class="params">()</span>;
    var dataWord = <span class="built_in">str</span>.split<span class="params">(/[^<span class="number">0</span>-<span class="number">9</span>a-zA-Z\u4e00-\u9fa5]+/)</span>;
    <span class="keyword">if</span><span class="params">(tag == <span class="string">"left"</span>)</span>{
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;dataWord.length;i++)</span>{
            data.unshift<span class="params">(dataWord[i])</span>;
        }
    }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(tag == <span class="string">"right"</span>)</span>{
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;dataWord.length;i++)</span>{
            data.push<span class="params">(dataWord[i])</span>;
        }
    }<span class="keyword">else</span>{
        return;
    }

}
<span class="comment">//左出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">leftOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.shift<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
<span class="comment">//右出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">rightOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.pop<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
</code></pre><p>由于新增了查询功能，所以需要写一个函数用以标记哪些数据被查询，将被包含被查询数据的下标存储在一个数组里</p>
<pre><code><span class="comment">//模糊匹配函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length)</span>{
        indexs = [];
        var <span class="built_in">str</span> = $<span class="params">(<span class="string">"search-input"</span>)</span>.value.trim<span class="params">()</span>;
        <span class="keyword">if</span><span class="params">(str)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;data.length;i++)</span>{
                <span class="keyword">if</span><span class="params">(data[i].indexOf<span class="params">(str)</span> != -<span class="number">1</span>)</span>{
                    indexs.push<span class="params">(i)</span>;
                }
            }
            <span class="comment">// console.log(indexs);</span>
        }
    <span class="comment">// console.log(str);</span>
    renderData<span class="params">()</span>;
    }
}
</code></pre><p>最后是数据的渲染函数</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span></span>{
    <span class="keyword">var</span> text = <span class="string">''</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++){
        <span class="keyword">if</span>(isSearched(i)){
            text += <span class="string">'&lt;div class="selected"&gt;'</span> + data[i] + <span class="string">'&lt;/div&gt;'</span>;
        }<span class="keyword">else</span>{
            text += <span class="string">'&lt;div class="list"&gt;'</span> + data[i] + <span class="string">'&lt;/div&gt;'</span>;
        }
    }
    <span class="keyword">var</span> <span class="keyword">list</span> = $(<span class="string">"list-wrap"</span>);
    <span class="keyword">list</span>.innerHTML = text;
    <span class="comment">//给list-wrap中的div添加点击删除事件</span>
    <span class="comment">// var lists = document.getElementsByClassName("list");</span>
    <span class="keyword">var</span> lists = <span class="keyword">list</span>.children;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lists.length;i++){
        lists[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            <span class="keyword">var</span> node = e.target;
            <span class="comment">//获取当前div在数组中的索引</span>
            <span class="keyword">var</span> index = [].indexOf.call(node.parentNode.children,node);
            data.splice(index,<span class="number">1</span>);
            <span class="comment">//更新查询标记数组</span>
            search();
            <span class="comment">//渲染数据</span>
            renderData();
        })
    }
}
</code></pre><p>数据渲染函数在进行数据渲染时，使用了一个函数来检测该数据是否是被检测到的数据</p>
<pre><code><span class="comment">//是否被匹配函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">isSearched</span>(<span class="params">value</span>)</span>{
    <span class="keyword">var</span> flag = <span class="literal">false</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;indexs.length;i++){
        <span class="keyword">if</span>(value == <span class="built_in">parseInt</span>(indexs[i])){
            flag = <span class="literal">true</span>;
            <span class="keyword">return</span> flag;
        }
    }
    <span class="keyword">return</span> flag;
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task20.html" target="_blank" rel="external">代码</a><br><a href="http://ife.supce.com/task20.html" target="_blank" rel="external">演示地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>实践JavaScript数组、字符串相关操作</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于 Task05 进行升级</li>
<li>将新元素输入框从input改为textarea</li>
<li>允许一次批量输入多个内容，格式可以为数字、中文、英文等，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为不同内容的间隔</li>
<li>增加一个查询文本输入框，和一个查询按钮，当点击查询时，将查询词在各个元素内容中做模糊匹配，将匹配到的内容进行特殊标识，如文字颜色等。举例，内容中有abcd，查询词为ab或bc，则该内容需要标识]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 05&06]]></title>
    <link href="http://blog.supce.com/2016/11/05/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8012/"/>
    <id>http://blog.supce.com/2016/11/05/JavaScript之基础12/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2016-11-05T09:29:01.519Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>初步了解 JavaScript 的事件是什么</li>
<li>初步了解 JavaScript 中的DOM是什么</li>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>练习使用 JavaScript 实现简单的排序算法</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><h2 id="05">05</h2><ul>
<li>模拟一个队列,队列的每个元素是一个数字，初始队列为空</li>
<li>有一个input输入框，以及4个操作按钮</li>
<li>点击”左侧入”,将input中输入的数字从左侧插入队列中；</li>
<li>点击”右侧入”,将input中输入的数字从右侧插入队列中；</li>
<li>点击”左侧出”,读取并删除队列左侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击”右侧出”,读取并删除队列又侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击队列中任何一个元素,则该元素会被从队列中删除<a id="more"></a>
</li>
</ul>
<h2 id="06">06</h2><ul>
<li>基于上个任务</li>
<li>限制输入的数字在10-100</li>
<li>队列元素数量最多限制为60个，当超过60个时，添加元素时alert出提示</li>
<li>队列展现方式变化如图，直接用高度表示数字大小</li>
<li>实现一个简单的排序功能，如冒泡排序（不限制具体算法），用可视化的方法表达出来</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p><em>第二个任务基于第一个任务，就把两个和一起来写吧</em><br>首先根据任务的要求，将HTML写出来，只需要一个input和若干button用以用户触发不同的事件。</p>
<pre><code>&lt;<span class="tag">input</span> type=<span class="string">"text"</span> id=<span class="string">"data-input"</span>&gt;
&lt;<span class="tag">button</span> id=<span class="string">"left-in"</span>&gt;左侧入&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"right-in"</span>&gt;右侧入&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"left-out"</span>&gt;左侧出&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"right-out"</span>&gt;右侧出&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"sort"</span>&gt;冒泡排序&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"random"</span>&gt;随机生成一组数据&lt;/button&gt;

&lt;<span class="tag">div</span> id=<span class="string">"list-wrap"</span>&gt;&lt;/div&gt;
</code></pre><p>然后给相应的元素绑定点击事件</p>
<pre><code><span class="comment">//初始化 添加事件监听器</span>
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        btns[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
            btnHandle(e.target);
        });
    }
    $(<span class="string">"data-input"</span>).addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });
}
init();
</code></pre><p>添加事件监听器后，需要根据事件调用对应的数据处理函数，处理之后将数据渲染到页面上</p>
<pre><code><span class="comment">//点击按钮时的处理逻辑</span>
<span class="function">function <span class="title">btnHandle</span><span class="params">(<span class="keyword">target</span>)</span></span>{
    var id = <span class="keyword">target</span>.id;
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'left-in'</span>:
            leftIn();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-in'</span>:
            rightIn();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'left-out'</span>:
            leftOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-out'</span>:
            rightOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'random'</span>:
            randomData();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'sort'</span>:
            sortData();
            <span class="keyword">break</span>;
    }
    <span class="comment">//渲染数据</span>
    renderData()
}
</code></pre><p>对于数据，只需要一个数组来模拟队列，所以下面四个输入输出函数都是对数组的操作，当然也可以将他们整合一下，变成一个函数或者两个函数(一个输入一个输出，整合的代码在最终代码中查看)</p>
<pre><code><span class="comment">//左入数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">leftIn</span><span class="params">()</span>{</span>
    var num = parseInt<span class="params">($<span class="params">(<span class="string">"data-input"</span>)</span>.value)</span>;
    <span class="keyword">if</span><span class="params">(isNaN<span class="params">(num)</span> || num &lt;<span class="number">10</span> || num &gt; <span class="number">100</span>)</span>{
            alert<span class="params">(<span class="string">"请输入10-100之间的数字"</span>)</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">if</span><span class="params">(data.length&lt;<span class="number">60</span>)</span>{
                data.unshift<span class="params">(num)</span>;
            }<span class="keyword">else</span>{
                alert<span class="params">(<span class="string">"最多添加60个"</span>)</span>;
            }
    }   
}
<span class="comment">//右入数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">rightIn</span><span class="params">()</span>{</span>
    var num = parseInt<span class="params">($<span class="params">(<span class="string">"data-input"</span>)</span>.value)</span>;
    <span class="keyword">if</span><span class="params">(isNaN<span class="params">(num)</span> || num &lt;<span class="number">10</span> || num &gt; <span class="number">100</span>)</span>{
            alert<span class="params">(<span class="string">"请输入10-100之间的数字"</span>)</span>;
    }<span class="keyword">else</span>{
        <span class="keyword">if</span><span class="params">(data.length&lt;<span class="number">60</span>)</span>{
            data.push<span class="params">(num)</span>;
        }<span class="keyword">else</span>{
            alert<span class="params">(<span class="string">"最多添加60个"</span>)</span>;
        }
    }
}
<span class="comment">//左出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">leftOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.shift<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
<span class="comment">//右出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">rightOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.pop<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
</code></pre><p>最后需要将处理过的数据渲染到页面上，根据要求，我们将每个div的高度设置为对应的数字，单位为像素。然后对每个div添加点击删除事件，这里有个技巧，利用call函数来获取数组的索引值，调用splice函数，根据索引值将数组中的数据删除，最后再次渲染数据。</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span></span>{
    <span class="keyword">var</span> text = <span class="string">''</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++){
        text += <span class="string">'&lt;div class="list" style="height:'</span>+data[i]+<span class="string">'px;line-height:'</span>+data[i]+<span class="string">'px"&gt;'</span> + data[i] + <span class="string">'&lt;/div&gt;'</span>;
    }
    <span class="keyword">var</span> <span class="keyword">list</span> = $(<span class="string">"list-wrap"</span>);
    <span class="keyword">list</span>.innerHTML = text;
    <span class="comment">//给list-wrap中的div添加点击删除事件</span>
    <span class="comment">// var lists = document.getElementsByClassName("list");</span>
    <span class="keyword">var</span> lists = <span class="keyword">list</span>.children;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lists.length;i++){
        lists[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            <span class="keyword">var</span> node = e.target;
            <span class="comment">//获取当前div在数组中的索引</span>
            <span class="keyword">var</span> index = [].indexOf.call(node.parentNode.children,node);
            data.splice(index,<span class="number">1</span>);
            renderData();
        })
    }
}
</code></pre><p>最后题目要求能够可视化的将排序算法展示出来，这种情景，可以利用<code>setInterval</code>函数，指定每次周期的时间间隔，将排序算法写在run函数中。在执行过程中，每排一次序，就将数据渲染一次，最终实现了排序的可视化。</p>
<pre><code><span class="comment">//冒泡排序</span>
<span class="function"><span class="keyword">function</span> <span class="title">sortData</span><span class="params">()</span>{</span>
    var i=<span class="number">0</span>,j=<span class="number">1</span>,temp,len=data.length,timer=null;
    timer = setInterval<span class="params">(run,<span class="number">15</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        <span class="keyword">if</span><span class="params">(i&lt;len)</span>{
            <span class="keyword">if</span><span class="params">(j&lt;len)</span>{
                <span class="keyword">if</span><span class="params">(data[i]&gt;data[j])</span>{
                    temp = data[i];
                    data[i] = data[j];
                    data[j] = temp;
                    renderData<span class="params">()</span>;
                }
                j++;
            }<span class="keyword">else</span>{
                i++;
                j = i + <span class="number">1</span>;
            }
        }<span class="keyword">else</span>{
            clearInterval<span class="params">(timer)</span>;
            return;
        }
    }
}
</code></pre><p>最后的最后，给页面添加简单的样式就可以了。当然为了便于演示，也添加了一个随机生成数据的按钮。</p>
<hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task18.html" target="_blank" rel="external">代码</a><br><a href="http://ife.supce.com/task18.html" target="_blank" rel="external">演示效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>初步了解 JavaScript 的事件是什么</li>
<li>初步了解 JavaScript 中的DOM是什么</li>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>练习使用 JavaScript 实现简单的排序算法</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><h2 id="05">05</h2><ul>
<li>模拟一个队列,队列的每个元素是一个数字，初始队列为空</li>
<li>有一个input输入框，以及4个操作按钮</li>
<li>点击”左侧入”,将input中输入的数字从左侧插入队列中；</li>
<li>点击”右侧入”,将input中输入的数字从右侧插入队列中；</li>
<li>点击”左侧出”,读取并删除队列左侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击”右侧出”,读取并删除队列又侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击队列中任何一个元素,则该元素会被从队列中删除]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 04]]></title>
    <link href="http://blog.supce.com/2016/11/03/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%804/"/>
    <id>http://blog.supce.com/2016/11/03/JavaScript之基础4/</id>
    <published>2016-11-02T16:00:00.000Z</published>
    <updated>2016-11-03T12:02:03.392Z</updated>
    <content type="html"><![CDATA[<h1 id="任务目的">任务目的</h1><hr>
<ul>
<li>在上一任务基础上继续JavaScript的体验</li>
<li>接触更加复杂的表单对象</li>
<li>实现页面上的一个完整交互功能</li>
<li>用DOM实现一个柱状图图表</li>
</ul>
<a id="more"></a>
<h1 id="任务描述">任务描述</h1><ul>
<li>参考以下示例代码，原始数据包含几个城市的空气质量指数数据</li>
<li>用户可以选择查看不同的时间粒度，以选择要查看的空气质量指数是以天为粒度还是以周或月为粒度</li>
<li>天：显示每天的空气质量指数</li>
<li>周：以自然周（周一到周日）为粒度，统计一周7天的平均数为这一周的空气质量数值，如果数据中缺少一个自然周的几天，则按剩余天进行计算</li>
<li>月：以自然月为粒度，统一一个月所有天的平均数为这一个月的空气质量数值</li>
<li>用户可以通过select切换城市</li>
<li>通过在”aqi-chart-wrap”里添加DOM，来模拟一个柱状图图表，横轴是时间，纵轴是空气质量指数，参考图（点击打开）。天、周、月的数据只根据用户的选择显示一种。</li>
<li>天：每天的数据是一个很细的矩形</li>
<li>周：每周的数据是一个矩形</li>
<li>月：每周的数据是一个很粗的矩形</li>
<li>鼠标移动到柱状图的某个柱子时，用title属性提示这个柱子的具体日期和数据</li>
</ul>
<h1 id="整体思路">整体思路</h1><p>首先给相应的表单元素添加事件监听器，当事件触发时，判断选项是否发生了变化，如果发生变化则调用相应的处理函数，否则返回。</p>
<p>在处理函数中，首先根据用户选择的选项对数据进行操作，最后将数据渲染为图表。</p>
<h1 id="最终代码">最终代码</h1><h2 id="html">html</h2><pre><code><span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"form-gra-time"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">legend</span>&gt;</span>请选择日期粒度：<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span>&gt;</span>日<span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"gra-time"</span> <span class="attribute">value</span>=<span class="value">"day"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">checked</span>=<span class="value">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span>&gt;</span>周<span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"gra-time"</span> <span class="attribute">value</span>=<span class="value">"week"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span>&gt;</span>月<span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"gra-time"</span> <span class="attribute">value</span>=<span class="value">"month"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
 <span class="tag">&lt;<span class="title">fieldset</span>&gt;</span>
   <span class="tag">&lt;<span class="title">legend</span>&gt;</span>请选择查看的城市：<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
   <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"city-select"</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
 <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"aqi-chart-wrap"</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
 <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/task17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><h2 id="js">js</h2><pre><code><span class="comment">/* 数据格式演示
var aqiSourceData = {
  "北京": {
    "2016-01-01": 10,
    "2016-01-02": 10,
    "2016-01-03": 10,
    "2016-01-04": 10
  }
};
*/</span>
var $ = <span class="function"><span class="keyword">function</span><span class="params">(id)</span>{</span>
  return document.getElementById<span class="params">(id)</span>;
}
<span class="function"><span class="keyword">function</span> <span class="title">getRadioValue</span><span class="params">(name)</span>{</span>
  var obj = document.getElementsByName<span class="params">(name)</span>;
  <span class="keyword">for</span><span class="params">(i=<span class="number">0</span>;i&lt;obj.length;i++)</span>{
    <span class="keyword">if</span><span class="params">(obj[i].checked)</span>{
      return obj[i].value;
    }
  }
  return <span class="string">"undefined"</span>;
}
<span class="comment">// 以下两个函数用于随机模拟生成测试数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">getDateStr</span><span class="params">(dat)</span> {</span>
  var y = dat.getFullYear<span class="params">()</span>;
  var m = dat.getMonth<span class="params">()</span> + <span class="number">1</span>;
  m = m &lt; <span class="number">10</span> ? '<span class="number">0</span>' + m : m;
  var d = dat.getDate<span class="params">()</span>;
  d = d &lt; <span class="number">10</span> ? '<span class="number">0</span>' + d : d;
  return y + '-' + m + '-' + d;
}
<span class="function"><span class="keyword">function</span> <span class="title">randomBuildData</span><span class="params">(seed)</span> {</span>
  var returnData = {};
  var dat = new Date<span class="params">(<span class="string">"2016-01-01"</span>)</span>;
  var datStr = '';
  <span class="keyword">for</span> <span class="params">(var i = <span class="number">1</span>; i &lt; <span class="number">92</span>; i++)</span> {
    datStr = getDateStr<span class="params">(dat)</span>;
    returnData[datStr] = Math.<span class="built_in">ceil</span><span class="params">(Math.random<span class="params">()</span> * seed)</span>;
    dat.setDate<span class="params">(dat.getDate<span class="params">()</span> + <span class="number">1</span>)</span>;
  }
  return returnData;
}
var aqiSourceData = {
  <span class="string">"北京"</span>: randomBuildData<span class="params">(<span class="number">500</span>)</span>,
  <span class="string">"上海"</span>: randomBuildData<span class="params">(<span class="number">300</span>)</span>,
  <span class="string">"广州"</span>: randomBuildData<span class="params">(<span class="number">200</span>)</span>,
  <span class="string">"深圳"</span>: randomBuildData<span class="params">(<span class="number">100</span>)</span>,
  <span class="string">"成都"</span>: randomBuildData<span class="params">(<span class="number">300</span>)</span>,
  <span class="string">"西安"</span>: randomBuildData<span class="params">(<span class="number">500</span>)</span>,
  <span class="string">"福州"</span>: randomBuildData<span class="params">(<span class="number">100</span>)</span>,
  <span class="string">"厦门"</span>: randomBuildData<span class="params">(<span class="number">100</span>)</span>,
  <span class="string">"沈阳"</span>: randomBuildData<span class="params">(<span class="number">500</span>)</span>
};
<span class="comment">// console.log(aqiSourceData);</span>
<span class="comment">// 用于渲染图表的数据</span>
var chartData = {};
<span class="comment">// 记录当前页面的表单选项</span>
var pageState = {
  nowSelectCity: <span class="string">"北京"</span>,
  nowGraTime: <span class="string">"day"</span>
}
<span class="comment">/**
 * 渲染图表
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderChart</span><span class="params">()</span> {</span>
  var <span class="built_in">text</span> = <span class="string">""</span>;
  <span class="keyword">for</span><span class="params">(item in chartData)</span>{
    var <span class="built_in">color</span> = <span class="string">"#"</span> + Math.<span class="built_in">floor</span><span class="params">(Math.random<span class="params">()</span> * <span class="number">0</span>xFFFFFF)</span>.toString<span class="params">(<span class="number">16</span>)</span>;
    <span class="built_in">text</span> += '&lt;div title=<span class="string">"'+item+"</span> : <span class="string">"+chartData[item]+'"</span> style=<span class="string">"height:'+chartData[item]+'px;background-color:'+color+'"</span>&gt;&lt;/div&gt;';
  }
  var aqiChartWrap = document.getElementsByClassName<span class="params">(<span class="string">"aqi-chart-wrap"</span>)</span>[<span class="number">0</span>];
  <span class="comment">// console.log(text);</span>
  aqiChartWrap.innerHTML = <span class="built_in">text</span>;
}
<span class="comment">/**
 * 日、周、月的radio事件点击时的处理函数
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">graTimeChange</span><span class="params">()</span> {</span>
  <span class="comment">// 确定是否选项发生了变化 </span>
  var time = getRadioValue<span class="params">(<span class="string">"gra-time"</span>)</span>;
  <span class="keyword">if</span><span class="params">(time == pageState[<span class="string">"nowGraTime"</span>])</span>{
    return;
  }<span class="keyword">else</span>{
    <span class="comment">// console.log(time);</span>
    pageState[<span class="string">"nowGraTime"</span>] = time;
  }

  <span class="comment">// 设置对应数据</span>
  initAqiChartData<span class="params">()</span>;
  <span class="comment">// 调用图表渲染函数</span>
  renderChart<span class="params">()</span>;
}
<span class="comment">/**
 * select发生变化时的处理函数
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">citySelectChange</span><span class="params">(target)</span> {</span>
  <span class="comment">// 确定是否选项发生了变化 </span>
  var citySelect = target.options[target.selectedIndex].value;
  <span class="keyword">if</span><span class="params">(citySelect == pageState[<span class="string">"nowSelectCity"</span>])</span>{
    return;
  }<span class="keyword">else</span>{
    <span class="comment">// console.log(citySelect);</span>
    pageState[<span class="string">"nowSelectCity"</span>] = citySelect;
  }
  <span class="comment">// 设置对应数据</span>
  initAqiChartData<span class="params">()</span>;
  <span class="comment">// 调用图表渲染函数</span>
  renderChart<span class="params">()</span>;
}
<span class="comment">/**
 * 初始化日、周、月的radio事件，当点击时，调用函数graTimeChange
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">initGraTimeForm</span><span class="params">()</span> {</span>
  var form = $<span class="params">(<span class="string">"form-gra-time"</span>)</span>;
  var times = form.elements[<span class="string">"gra-time"</span>];
  <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;times.length;i++)</span>{
    times[i].addEventListener<span class="params">(<span class="string">"change"</span>,graTimeChange,<span class="literal">false</span>)</span>;
  }
}
<span class="comment">/**
 * 初始化城市Select下拉选择框中的选项
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">initCitySelector</span><span class="params">()</span> {</span>
  <span class="comment">// 读取aqiSourceData中的城市，然后设置id为city-select的下拉列表中的选项</span>
  <span class="keyword">for</span><span class="params">(items in aqiSourceData)</span>{
    $<span class="params">(<span class="string">"city-select"</span>)</span>.innerHTML += <span class="string">"&lt;option&gt;"</span>+items+<span class="string">"&lt;/option&gt;"</span>;
  }
  <span class="comment">// 给select设置事件，当选项发生变化时调用函数citySelectChange</span>
  $<span class="params">(<span class="string">"city-select"</span>)</span>.addEventListener<span class="params">(<span class="string">"change"</span>,function<span class="params">(e)</span>{
    citySelectChange<span class="params">(e.target)</span>;
  })</span>;
}
<span class="comment">/**
 * 初始化图表需要的数据格式
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">initAqiChartData</span><span class="params">()</span> {</span>
  <span class="comment">// 将原始的源数据处理成图表需要的数据格式</span>
  nowCityData = aqiSourceData[pageState.nowSelectCity];
  switch<span class="params">(pageState.nowGraTime)</span>{
    case <span class="string">"day"</span>:
      chartData = nowCityData;
      <span class="comment">// console.log("day");</span>
      break;
    case <span class="string">"week"</span>:
      chartData = {};
      var dataSum = <span class="number">0</span>,daySum = <span class="number">0</span>,week = <span class="number">0</span>;
      <span class="keyword">for</span><span class="params">(item in nowCityData)</span>{
        dataSum += nowCityData[item];
        daySum++;
        <span class="keyword">if</span><span class="params">(new Date<span class="params">(item)</span>.getDay<span class="params">()</span> == <span class="number">6</span>)</span>{  <span class="comment">//以自然周统计</span>
          week++;
          chartData[<span class="string">"第"</span>+week+<span class="string">"周"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
          dataSum = <span class="number">0</span>;
          daySum = <span class="number">0</span>;
        }
      }
      <span class="comment">//如果最后不满一周，则按剩余天数计算</span>
      <span class="keyword">if</span><span class="params">(daySum != <span class="number">0</span>)</span>{
        week++;
        chartData[<span class="string">"第"</span>+week+<span class="string">"周"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
      }
      <span class="comment">// console.log("week");</span>
      break;
    case <span class="string">"month"</span>:
      chartData = {};
      var dataSum=<span class="number">0</span>,daySum=<span class="number">0</span>,curMonth = -<span class="number">1</span>;
      <span class="keyword">for</span><span class="params">(var item in nowCityData)</span>{
        var date = new Date<span class="params">(item)</span>;
        var month = date.getMonth<span class="params">()</span>;
        <span class="keyword">if</span><span class="params">(month !== curMonth)</span>{
          <span class="keyword">if</span><span class="params">(daySum &gt; <span class="number">0</span>)</span>{
            chartData[curMonth + <span class="number">1</span> +<span class="string">"月份"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
          }
          curMonth = month;
          daySum = <span class="number">0</span>;
          dataSum = <span class="number">0</span>;
        }
        dataSum += nowCityData[item];
        daySum++;
      }
      <span class="comment">//最后一月按实际天数计算</span>
      <span class="keyword">if</span><span class="params">(daySum &gt; <span class="number">0</span>)</span>{
        chartData[month + <span class="number">1</span> +<span class="string">"月份"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
      }
      console.<span class="built_in">log</span><span class="params">(chartData)</span>;
      break;
  }
}
<span class="comment">/**
 * 初始化函数
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> {</span>
  initGraTimeForm<span class="params">()</span>
  initCitySelector<span class="params">()</span>;
  initAqiChartData<span class="params">()</span>;
  renderChart<span class="params">()</span>;
}
init<span class="params">()</span>;
</code></pre><h2 id="CSS">CSS</h2><pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
  <span class="class">.aqi-chart-wrap</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
    <span class="rule"><span class="attribute">justify-content</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">align-items</span>:<span class="value"> flex-end</span></span>;
    <span class="rule"><span class="attribute">align-content</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span> auto</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">10px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">90%</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">600px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;
  }</span>
  <span class="class">.aqi-chart-wrap</span> <span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>;
    <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"><span class="number">3px</span></span></span>;
  }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>最终效果:<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/ife-task-17.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="任务目的">任务目的</h1><hr>
<ul>
<li>在上一任务基础上继续JavaScript的体验</li>
<li>接触更加复杂的表单对象</li>
<li>实现页面上的一个完整交互功能</li>
<li>用DOM实现一个柱状图图表</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP之概述]]></title>
    <link href="http://blog.supce.com/2016/10/21/HTTP%E4%B9%8B%E6%A6%82%E8%BF%B0/"/>
    <id>http://blog.supce.com/2016/10/21/HTTP之概述/</id>
    <published>2016-10-20T16:00:00.000Z</published>
    <updated>2016-10-21T11:59:41.365Z</updated>
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>去看瓷器古董的时候，如果卖家直接把瓷器递给买家，容易失手掉下去，也不好判定到底是谁的责任。于是有了这样一条规矩：卖家会把瓷器放在桌子上，离手之后，买家再去拿。这样既保证了瓷器在传递过程中的安全性，也容易分辨是谁失手打碎的瓷器。</p>
</blockquote>
<h1 id="Web客户端和服务器">Web客户端和服务器</h1><p>上面这条规矩规定了贵重瓷器是如何在买家与卖家之间传递而不被破坏的。大家都知道Web内容都是存在Web服务器上的。那么Web客户端(最常见的是浏览器)与服务器之间的信息什么时候传递、如何传递、具体传递什么，并且能够保证数据在传输过程中不会被损坏或产生混乱？于是就有了HTTP。</p>
<p>HTTP是超文本传输协议的英文缩写。既然要保证传输过程中数据不被损坏，说明HTTP是一种可靠的数据传输协议。当我们想浏览某个页面时，浏览器会向服务器发送一个HTTP请求。服务器会寻找所期望的对象，如果存在，就将对象、对象类型。对象长度以及其他的一些信息放在HTTP响应中发送给客户端。</p>
<p>下图可能会更加直观：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http1.png" alt=""></p>
<a id="more"></a>
<p>上图可以发现，要想浏览一个页面，最主要的是HTTP请求和HTTP响应。现实中，如果我们想去张三家，首先得知道他的家庭住址。HTTP请求也是一样，在发送请求时，必须知道请求的资源具体在哪，这就需要借助URL。URL是统一资源定位符的英文缩写，它描述了一台特定服务器上某个资源的特定位置。一个具体的URL实例如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http2.png" alt=""></p>
<p>下面就具体看看一次HTTP请求和响应是怎样的。比如，我们想要访问Baidu的首页，借助chrome，首先查看请求头：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http3.png" alt=""></p>
<p>第一行为：<code>GET / HTTP/1.1</code> HTTP支持几种不同的请求命令，这些命令被称为HTTP Method。每条HTTP请求都包含一个方法，这个方法会告诉服务器具体执行什么动作。下图是五种常见的HTTP方法：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http4.png" alt=""></p>
<p>对于<code>HTTP/1.1</code>是现在使用的HTTP协议的版本。</p>
<p>第二行host是这次请求的主机。</p>
<p>第三行<code>Connection: keep-alive</code> keep-alive功能使客户端到服务器端的连接持续有效,当出现对服务器的后继请求时，keep-alive功能避免了建立或者重新建立连接。</p>
<p>下一行为<code>Cache-Control: max-age=0</code> Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached。其中，max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</p>
<p>然后是<code>Upgrade-Insecure-Requests: 1</code> 这个是和https有关。服务器的响应头有时候可能会有<code>Content-Security-Policy: upgrade-insecure-requests</code>，该指令用于让浏览器自动升级请求从http到https,用于大量包含http资源的http网页直接升级到https而不会报错。简洁的来讲,就相当于在http和https之间起的一个过渡作用。而对于请求头的<code>Upgrade-Insecure-Requests:1</code>，则是告诉服务器，自己支持这种操作，也就是我能读懂你服务器发过来的上面这条信息，并且在以后发请求的时候不用http而用https。</p>
<blockquote>
<p>具体可以参考小胡子哥的一篇<a href="http://www.cnblogs.com/hustskyking/archive/2015/08/21/upgrade-insecure-requests.html" target="_blank" rel="external">blog</a>。</p>
</blockquote>
<p>再往下是<code>User-Agent</code>，它包含了发出请求的用户信息，通常是用户操作系统、浏览器版本、内核等。</p>
<p>再下面三个是客户端希望接收的数据类型、数据编码方式和支持的语言。</p>
<p>最后则是我们的Cookie。</p>
<p>下面再来分析下响应头，具体的响应头如下图</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http5.png" alt=""></p>
<p>第一行为：<code>200 OK</code> 我们把它称为状态码。每条HTTP响应报文返回时都会携带一个状态码，状态码是一个三位数的代码，告知客户端请求是否成功，或者采取其他的动作。下图为几种常用的状态码：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http6.png" alt=""></p>
<blockquote>
<p>有些人访问Google，说404了，其实是不正确的。</p>
</blockquote>
<p>第二行为：<code>Server: bfe/1.0.8.18</code> Server响应头包含处理请求的原始服务器的软件信息。BFE全称是Baidu Front End，是百度自己研发的一套前端接入系统。查看网易官网是 <code>Server:nginx</code>。</p>
<p>再往下是Date头域，它表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。</p>
<p>之后是<code>Content-Type: text/html;charset=utf-8</code>，浏览器会根据Content-Type来决定如何显示返回的消息体内容。HTML格式的文本文档由<code>text/html</code>类型来标记。其他常用类型如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http7.png" alt=""></p>
<p>然后再看<code>Cache-Control: private</code>，和请求头不太一样，对于响应消息中的指令，具体包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当前用户的部分响应消息，此响应消息对于其他用户的请求无效。</p>
<p><code>X-UA-Compatible: IE=Edge,chrome=1</code> 这里是设置浏览器的兼容模式，强制浏览器按照特定的版本标准进行渲染。百度这里设置IE渲染模式是照最高的标准模式解析页面，chrome=1则可以激活Chrome Frame。</p>
<p>然后是<code>Strict-Transport-Security: max-age=604800</code>，trict Transport Security(通常简称为HSTS)是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源,禁止HTTP方式。</p>
<p>最后是我们的响应主体，也就是网页的具体内容：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http8.png" alt=""></p>
<hr>
<h1 id="TCP/IP">TCP/IP</h1><p>上面主要是浏览器发送请求，然后服务器做出响应，浏览器解析完响应后把内容呈现。但是，从服务器到浏览器这一过程的信息又是如何传递的呢？这就需要祭出计算机网络课程里的一张图了：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http9.png" alt=""></p>
<p>由上图可以看出，HTTP是个应用层的协议。HTTP并不关心网络通信的具体细节，它把联网的细节都交给了通用、可靠的TCP/IP协议。简单来说HTTP协议位于TCP/IP的上层，浏览器与服务器之间是HTTP使用TCP来传输数据。至于TCP/IP的详细内容以后再专门拿一篇文章来讲。这里主要说的还是浏览器与服务器通信的一个大致过程。</p>
<p>最后用一张图再来解释一下浏览器与服务器的连接与处理：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http10.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<blockquote>
<p>去看瓷器古董的时候，如果卖家直接把瓷器递给买家，容易失手掉下去，也不好判定到底是谁的责任。于是有了这样一条规矩：卖家会把瓷器放在桌子上，离手之后，买家再去拿。这样既保证了瓷器在传递过程中的安全性，也容易分辨是谁失手打碎的瓷器。</p>
</blockquote>
<h1 id="Web客户端和服务器">Web客户端和服务器</h1><p>上面这条规矩规定了贵重瓷器是如何在买家与卖家之间传递而不被破坏的。大家都知道Web内容都是存在Web服务器上的。那么Web客户端(最常见的是浏览器)与服务器之间的信息什么时候传递、如何传递、具体传递什么，并且能够保证数据在传输过程中不会被损坏或产生混乱？于是就有了HTTP。</p>
<p>HTTP是超文本传输协议的英文缩写。既然要保证传输过程中数据不被损坏，说明HTTP是一种可靠的数据传输协议。当我们想浏览某个页面时，浏览器会向服务器发送一个HTTP请求。服务器会寻找所期望的对象，如果存在，就将对象、对象类型。对象长度以及其他的一些信息放在HTTP响应中发送给客户端。</p>
<p>下图可能会更加直观：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://blog.supce.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于编码(一)]]></title>
    <link href="http://blog.supce.com/2016/10/19/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81(%E4%B8%80)/"/>
    <id>http://blog.supce.com/2016/10/19/关于编码(一)/</id>
    <published>2016-10-18T16:00:00.000Z</published>
    <updated>2016-10-19T13:21:01.737Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="从英文单词和汉字说起">从英文单词和汉字说起</h1><p>世有万物，人类为了区分，给万物冠以不同的名称。英文单词由26个字母组成，对于天空，人们用字母s，k，y表示，即：sky；对于猫用c，a，t，表示，即cat；对于狗用d,o,t表示，即：dog。</p>
<p>这些名字都是随意的，没有什么原因说明为什么不把猫称为狗或不把狗称为猫。因此可以说英语词汇就是一种用26个符号(字母)进行的编码。<br>刚开始可以用几个字母，很短的单词来命名事物。随着已经约定事物的单词越来越多，后期事物的单词也越来越长。估计这也是很多自然事物的单词比较短，而一些近现代词汇比较长的原因吧。<br>汉字和英文单词有些不同。汉字最初是象形文字。通过模拟物体的形状来表示某一类物品。</p>
<p>随着不断的模拟，又从这些最初的象形文字归纳提炼出“点”、“横”、“竖”、“撇”、“捺”等笔画。然后再利用这些笔画进行组合，创立出不同的文字，用这些文字标记不同的物品。所以，也可以说汉字也是一种编码，甚至要比英文单词更加复杂，能够创立更多的组合。<br>比如下面表示太阳的“日”字。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma1.png" alt=""></p>
<a id="more"></a>
<hr>
<h1 id="由摩斯密码、盲文到二元编">由摩斯密码、盲文到二元编</h1><p>由于应用场景的不同，人们对于信息的表示有着不同需求。字母可以通过写在纸上进行信息的传递，但是在有些场景不适合，比如说盲人或者电报机是无法识别纸质上的文字的。</p>
<p>摩尔斯电码（又译为摩斯密码，Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。</p>
<p><em>点（.）和划（-），或叫“滴”（Dit）和“答”（Dah）</em></p>
<p>英文字母可以用下图表示:</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma2.png" alt=""></p>
<p>为了便于识别(译码)，树状图可能会更清晰：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma3.jpg" alt=""></p>
<p>摩尔斯电码被称为二元码（binary code），因为编码中仅含“滴”和“嗒”。这与一个硬<br>币很相似，硬币着地时只可能是正面或反面。二元事物（例如硬币）、二元编码（例如摩尔斯电码）常常用2的乘方来描述。</p>
<p>下面来解析下盲文，来看看它是如何工作的。我们并不是要真的学习布莱叶盲文，而且也无须刻意记住什么关于它的内容。我们仅仅希望从中窥探到编码的一些本质。</p>
<p>在布莱叶盲文中，每个在书写文字中用到的符号——具体来说就是字母、数字和标点符号——都被编码成为2×3的点码单元中的一个或者多个凸起的点。这个点码单元包含的点通常使用1到6的数字来编号。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma4.jpg" alt=""></p>
<blockquote>
<p>下面我们约定：大点表示这是一个凸起的点，小点则表示其对应的位置是平的</p>
</blockquote>
<p>对于6个位置，我们可以由2的6次方=64种组合。</p>
<p>对于26个字母表示法如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma5.jpg" alt=""></p>
<p>甚至可以区分大小写————规定6号凸点为大写标识符，如果表示大写“B”，如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma6.png" alt=""></p>
<p>大写字母标识符表示紧随它的字母（而且仅仅是紧随它的字母）应该被译为大写。类似这样的编码被称为“逃逸码”（escape codes）。逃逸码让你“逃离”对编码串单调的、一成不变的解析，而转入一种新的解析方式中。</p>
<hr>
<h1 id="二进制数">二进制数</h1><p>二进制数是由0，1两个数码表示数的。</p>
<p>让我们再回头看看之前提到的由点、划组成其间用空格分开的摩尔斯电码。摩尔斯电码看上去不像是由0和1组成的，但它确实是。</p>
<p>下面回忆一下摩尔斯电码的编码规则：划的长度等于点长度的三倍；单个的点或划之间用长度与点的长度相等的空格分开；单词内的各个字母之间用长度等于划的长度的空格分隔；各单词之间由长度等于两倍的划长度的空格分开。</p>
<p>为使分析更加简单，我们假设划的长度是点长度的两倍而不是3倍。也就是说，一个点是一个值为1的比特位，一个划是两个值为1的比特位，空格是值为0的比特位。</p>
<blockquote>
<p>“bit (比特)”这个词被创造出来代表“binary digit”，它的确是新造的和计算机相关的最可爱的词之一。当然，“bit”有其通常的意义：“一小部分，程度很低或数量很少”。这个意义用来表示比特是非常精确的，因为1比特,一个二进制数字位确实是一个非常小的量。–《Code》</p>
</blockquote>
<p>下面是之前的摩尔斯电码基本表：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma2.png" alt=""></p>
<p>我们可以将它转换为比特形式：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma7.png" alt=""></p>
<p>注意，所有的编码都以 1开头，以两个0结束。结尾处的两个零代表单词中各个字母之间的空格，单词之间的空格用另外的一对0来表示。</p>
<p>对于”code”这个单词，可以用11010110100110110110011010100100表示</p>
<p>用比特的形式表示布莱叶盲文比表示摩尔斯电码容易得多。例如，单词“code”可以用布莱叶盲文这样表示：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma8.png" alt=""></p>
<p>如果突起的点是1，平坦的点是0，则布莱叶盲文中的每一个符号都可以用6个比特的二进制代码表示。单词”code”中的四个布莱叶字母符号就可以简单地写成:</p>
<p>100100 101010 100110 100010</p>
<p><em>最左边的一位对应编号为1的位置，最右边的一位对应编码为 6的位置。</em></p>
<p>正如上面的例子，比特可以代表任何信息。但是，最基本的一点是：比特是数字。</p>
<p>当用比特表示信息时只要将可能情况的数目数清楚就可以了，这样就决定了需要多少个比特位(四个数目用两个比特位即可)，从而使得各种可能的情况都能分配到一个编号。</p>
<p>比特在哲学和数学的奇怪混合物 — 逻辑 — 中发挥作用。逻辑最基本的目标是证明某个语句是否正确，而正确与否也可以用1和0来表示。</p>
<blockquote>
<p>以上这些恰好是信息可以通过电信号进行传递的前提！</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="从英文单词和汉字说起">从英文单词和汉字说起</h1><p>世有万物，人类为了区分，给万物冠以不同的名称。英文单词由26个字母组成，对于天空，人们用字母s，k，y表示，即：sky；对于猫用c，a，t，表示，即cat；对于狗用d,o,t表示，即：dog。</p>
<p>这些名字都是随意的，没有什么原因说明为什么不把猫称为狗或不把狗称为猫。因此可以说英语词汇就是一种用26个符号(字母)进行的编码。<br>刚开始可以用几个字母，很短的单词来命名事物。随着已经约定事物的单词越来越多，后期事物的单词也越来越长。估计这也是很多自然事物的单词比较短，而一些近现代词汇比较长的原因吧。<br>汉字和英文单词有些不同。汉字最初是象形文字。通过模拟物体的形状来表示某一类物品。</p>
<p>随着不断的模拟，又从这些最初的象形文字归纳提炼出“点”、“横”、“竖”、“撇”、“捺”等笔画。然后再利用这些笔画进行组合，创立出不同的文字，用这些文字标记不同的物品。所以，也可以说汉字也是一种编码，甚至要比英文单词更加复杂，能够创立更多的组合。<br>比如下面表示太阳的“日”字。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="编程" scheme="http://blog.supce.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之沿环形路径转动的动画]]></title>
    <link href="http://blog.supce.com/2016/10/13/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B2%BF%E7%8E%AF%E5%BD%A2%E8%B7%AF%E5%BE%84%E5%B9%B3%E7%A7%BB%E7%9A%84%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.supce.com/2016/10/13/CSS Secret 读书笔记之沿环形路径平移的动画/</id>
    <published>2016-10-12T16:00:00.000Z</published>
    <updated>2016-10-13T13:36:56.429Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="沿环形路径转动的动画">沿环形路径转动的动画</h1><p>今天利用CSS实现一种沿着环形路径转动的动画。为了便于演示，我们让一个头像图片沿着环形路径转动。<br>首先是一个img标签，用来保存头像图片，外面嵌套一个div用来设置背景。</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;img src=<span class="string">"test.jpg"</span> <span class="type">class</span>=<span class="string">"avatar"</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><a id="more"></a>
<p>然后设置基本的样式：</p>
<pre><code><span class="class">.path</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">20px</span> auto</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fb3</span></span></span>;
}</span>
<span class="class">.avatar</span>,<span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed black</span></span>; <span class="comment">/*为了便于观察旋转，添加虚线边框*/</span>
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
}</span>
<span class="class">.avatar-a</span>&gt;<span class="tag">img</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> inherit</span></span>;
}</span>
</code></pre><p>最后为图片添加旋转动画：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin</span>{
    <span class="tag">to</span> <span class="rules">{ <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">1turn</span>)</span></span>; }</span>
}
<span class="class">.avatar</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">6s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">50%</span> <span class="number">100px</span></span></span>;
}</span>
</code></pre><p>刷新页面：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-01.gif" alt=""></p>
<p>虽然图片已经能够沿着环形路径转动了，但是图片自身也在旋转。为了让图片能够沿着环形转动，同时保证图片保持原来的朝向，可以用下面这两种方式：</p>
<p>既然图片本身也在旋转，那可以尝试在图片的外层嵌套一个div，然后让这个div反向旋转，从而把内层的图片旋转效果给抵消掉。这也是之前经常用到的一种方法。</p>
<p>修改HTML代码结构：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"avatar-a"</span>&gt;
        &lt;img src=<span class="string">"test.jpg"</span>&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>下面就利用到上篇文章提到的<code>animation-direction</code>，图片外层的div保持旋转，然后设置内部img的<code>animation-direction</code>为相同的动画特效，但是最后让<code>animation-direction</code>反转。</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin</span>{
    <span class="tag">to</span> <span class="rules">{ <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">1turn</span>)</span></span>; }</span>
}
<span class="class">.avatar-a</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">6s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">50%</span> <span class="number">100px</span></span></span>;
}</span>
<span class="class">.avatar-a</span>&gt;<span class="tag">img</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> inherit</span></span>;
    <span class="rule"><span class="attribute">animation-direction</span>:<span class="value"> reverse</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-02.gif" alt=""></p>
<p>much nicer！</p>
<p>问题虽然得到解决，但是修改了HTML结构。下面这种方式能够在保持原来HTML代码结构不变的情况下解决自身旋转问题。在提出这种方法之前，要首先了解下<code>transform-origin</code>。其实：</p>
<p><em>每个<code>transform-origin</code>都可以被两个<code>translate()</code>模拟出来</em></p>
<p>比如下面这个两端代码是等效的：</p>
<pre><code><span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">30deg</span>)</span></span>;
<span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">100px</span> <span class="number">50px</span></span></span>;

<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">100px</span>,<span class="number">50px</span>),
           <span class="function">rotate</span>(<span class="number">30deg</span>),
           <span class="function">translate</span>(-<span class="number">100px</span>,-<span class="number">50px</span>)</span></span>;
<span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span></span></span>;
</code></pre><p>具体过程如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-03.jpg" alt=""></p>
<p>于是，我们可以把刚才的spin动画拆分：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframe</span> spin</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)</span></span>;
    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)</span></span>;
    }</span>
}
</code></pre><p>对于自身的反向旋转进行拆分：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframe</span> spin</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
}
</code></pre><p>然后把img外部嵌套的div去掉，把这两个动画合并，直接用在img上，这样既保持了原有的HTML代码结构，也解决了图片的自旋转问题。最终代码如下：</p>
<p>HTML：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;img src=<span class="string">"test.jpg"</span> <span class="type">class</span>=<span class="string">"avatar-b"</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin-b</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)
                   <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)
                   <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
}
<span class="class">.avatar-b</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">6s</span> spin-b infinite linear</span></span>;
}</span>
</code></pre><p>也可以把一个关键帧的水平位移抵消，以精简代码：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin-b</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">100px</span>) <span class="function">translateY</span>(-<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translateY</span>(-<span class="number">100px</span>) <span class="function">translateY</span>(<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)</span></span>;

    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">100px</span>) <span class="function">translateY</span>(-<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translateY</span>(-<span class="number">100px</span>) <span class="function">translateY</span>(<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)</span></span>;
    }</span>
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-04.gif" alt=""></p>
<p>much nicer！</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="沿环形路径转动的动画">沿环形路径转动的动画</h1><p>今天利用CSS实现一种沿着环形路径转动的动画。为了便于演示，我们让一个头像图片沿着环形路径转动。<br>首先是一个img标签，用来保存头像图片，外面嵌套一个div用来设置背景。</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;img src=<span class="string">"test.jpg"</span> <span class="type">class</span>=<span class="string">"avatar"</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之逐帧动画&闪烁效果]]></title>
    <link href="http://blog.supce.com/2016/10/11/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB&%E9%97%AA%E7%83%81%E6%95%88%E6%9E%9C/"/>
    <id>http://blog.supce.com/2016/10/11/CSS Secret 读书笔记之逐帧动画&闪烁效果/</id>
    <published>2016-10-10T16:00:00.000Z</published>
    <updated>2016-10-11T12:40:17.345Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="逐帧动画">逐帧动画</h1><p>在一些场景中，比如页面的加载提示，只使用过渡很难实现预期的效果。在这种情况下，我们可以使用基于图片的逐帧动画来解决。<br>提到基于图片的逐帧动画首先想到的就是GIF动画。GIF动画在大多数场景下都能满足我们的需求，但是GIF也有一些不足：</p>
<ul>
<li>GIF不具备Alpha透明的特征。但是对于页面的加载提示来说，一般都是半透明的。</li>
<li>低灵活性！我们无法在CSS层面修改动画的某些参数， 比如动画的持续时间、循环次数、是否暂停等。GIF一但生成，这些参数就固定在文件中，如果想要修改就只能重新生成一个GIF文件。</li>
</ul>
<p>这个时候，可以利用下面这种方式作为补充，我们写一个半透明加载提示的小例子。<br><a id="more"></a></p>
<p>首先，把动画的中所有帧全部拼到一张PNG图片中，如下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-01.jpg" alt=""><br>然后用一个容器将图片包裹进去，并把它的宽高设置为单帧的尺寸。<br>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"loader"</span>&gt;loading...&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.loader</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(loader.png)</span></span>;
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
    <span class="comment">/*隐藏文本*/</span>
    <span class="rule"><span class="attribute">text-indent</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">white-space</span>:<span class="value"> nowrap</span></span>;
}</span>
</code></pre><p>这时候只把图片的第一帧显示了出来</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-02.jpg" alt=""></p>
<p>然后添加动画效果，修改后的代码如下:</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> loader</span>{
    <span class="tag">to</span> <span class="rules">{<span class="rule"><span class="attribute">background-position</span>:<span class="value"> -<span class="number">800px</span> <span class="number">0</span></span></span>;}</span>
}
<span class="class">.loader</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(loader.png)</span></span>;
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> loader <span class="number">1s</span> infinite linear</span></span>;
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
    <span class="rule"><span class="attribute">text-indent</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">white-space</span>:<span class="value"> nowrap</span></span>;
}</span>
</code></pre><p>刷新下页面：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-03.gif" alt=""></p>
<p>跟我们预期的效果并不一样。其实只要修改下调速函数就可以了，上文中提到，所有基于贝塞尔曲线的调速函数都是平滑的过渡效果。但是我们现在需求的是逐帧的动画效果。而<code>step()</code>函数会根据指定步进数，把动画切分为多帧，整个动画会在帧与帧之间硬切。<br>于是修改代码：</p>
<pre><code><span class="rule"><span class="attribute">animation</span>:<span class="value"> loader <span class="number">1s</span> infinite <span class="function">steps</span>(<span class="number">8</span>)</span></span>;
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-04.gif" alt=""></p>
<p>much nicer!</p>
<hr>
<h1 id="闪烁效果">闪烁效果</h1><p>在某些论坛或者淘宝店铺的介绍页面，会有闪烁的效果。虽然可以使用GIF来实现，但也可以尝试使用CSS动画来完成闪烁效果。<br>如果把闪烁拆分为动画，其实就是将原来的颜色逐渐变为透明，然后再逐渐显隐的一个过程。<br>假设把一段文字闪烁3次。<br>HTML：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"smooth-blink-a blink"</span>&gt;this <span class="keyword">is</span> a blink test&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> blink-<span class="number">1</span> </span>{ <span class="tag">to</span> <span class="rules">{ <span class="rule"><span class="attribute">color</span>:<span class="value">transparent</span></span>; }</span> }
<span class="class">.blink</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">15em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">3em</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">30px</span> auto</span></span>;
    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> black</span></span>;
    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">125%</span>/<span class="number">1</span> sans-serif</span></span>;
}</span>
<span class="class">.smooth-blink-a</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">1s</span> blink-<span class="number">1</span> <span class="number">3</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-05.gif" alt=""></p>
<p>仔细观察会发现，文字平滑的渐变为透明，但是会一下子跳转为原来的颜色。如下图:<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-06.jpg" alt=""><br>为了解决这个问题，可以利用<code>animation-direction</code>，如果属性值是<code>reverse</code>就会反转每一个循环周期，如果是<code>alternate</code>会反转第偶数个循环周期，<code>alternate-reverse</code>会反转第奇数个循环周期。如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-07.jpg" alt=""></p>
<p>如果使用<code>alternate</code>，要实现一次渐隐渐出，就会是两个循环周期(即次数翻倍)。所以也要把<code>animation-duration</code>减半。<br>修改代码：</p>
<pre><code><span class="class">.smooth-blink-a</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> .<span class="number">5s</span> blink-<span class="number">1</span> <span class="number">6</span></span></span>;
    <span class="rule"><span class="attribute">animation-direction</span>:<span class="value"> alternate</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-08.gif" alt=""></p>
<p>整个动画过渡平滑了许多。</p>
<p>如果不想使用平滑的过渡，想要使用最普通的闪烁效果。瞬间就想到了上节中的<code>step()</code>。<br>修改代码如下：</p>
<pre><code>animation: <span class="number">1</span>s blink-<span class="number">1</span>  <span class="number">3</span> steps(<span class="number">1</span>);
</code></pre><p>刷新页面，发现文本根本不会闪烁。这是由于step(1)等同于step(1,end)，这就意味着当前颜色到透明色之间的过渡是在一次步进中完成的，于是颜色的切换只会发生在动画周期的末尾，因此透明色只会在无限短的时间点处出现，在视觉上就是不闪烁。如果设置为step(1,start)，那么就会是永久的透明色。</p>
<p>这时候需要扭转下思路，我们可以让转换动作发生在动画的50%处，而不是起始位置。<br>最终代码如下：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> blink-<span class="number">2</span> </span>{ 50% <span class="rules">{<span class="rule"><span class="attribute">color</span>:<span class="value"> transparent</span></span>;}</span> }
<span class="class">.smooth-blink-a</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">1s</span> blink-<span class="number">2</span>  <span class="number">3</span> <span class="function">steps</span>(<span class="number">1</span>)</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-20-09.gif" alt=""></p>
<p>问题解决。</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="逐帧动画">逐帧动画</h1><p>在一些场景中，比如页面的加载提示，只使用过渡很难实现预期的效果。在这种情况下，我们可以使用基于图片的逐帧动画来解决。<br>提到基于图片的逐帧动画首先想到的就是GIF动画。GIF动画在大多数场景下都能满足我们的需求，但是GIF也有一些不足：</p>
<ul>
<li>GIF不具备Alpha透明的特征。但是对于页面的加载提示来说，一般都是半透明的。</li>
<li>低灵活性！我们无法在CSS层面修改动画的某些参数， 比如动画的持续时间、循环次数、是否暂停等。GIF一但生成，这些参数就固定在文件中，如果想要修改就只能重新生成一个GIF文件。</li>
</ul>
<p>这个时候，可以利用下面这种方式作为补充，我们写一个半透明加载提示的小例子。<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之缓动效果]]></title>
    <link href="http://blog.supce.com/2016/10/10/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BC%93%E5%8A%A8%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.supce.com/2016/10/10/CSS Secret 读书笔记之缓动动画/</id>
    <published>2016-10-09T16:00:00.000Z</published>
    <updated>2016-10-10T12:58:20.596Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="弹跳动画">弹跳动画</h1><p>在现实世界里，物体的移动往往不是匀速的。因此，给动画和过渡加上缓动效果会使界面显得更加真实。<br>回弹是一种常用的缓动效果，对回弹的过程进行分析会发现，回弹就是当一个过渡达到最终值时，往回倒一点，然后再次回到最终值，如此往复一次或者多次，并逐渐收敛。最终稳定在终值。<br>回弹往往会用在有尺寸变化的元素上，比如对于页面弹出框，先放大再缩小。下面就利用回弹模拟一个下落的弹性小球。</p>
<p>HTML：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"ball_bg"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"ball ball-a"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><a id="more"></a>
<p>CSS:</p>
<pre><code><span class="class">.ball_bg</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">30px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">330px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> skyblue</span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(skyblue,white <span class="number">320px</span>,yellowgreen <span class="number">0</span>)</span></span>;
}</span>
<span class="class">.ball</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> red</span></span>;  <span class="comment">/*平稳回退*/</span>
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">radial-gradient</span>(at <span class="number">30%</span> <span class="number">30%</span>,<span class="hexcolor">#fdd</span>,red)</span></span>;   
}</span>
<span class="at_rule">@<span class="keyword">keyframes</span> bounce-a</span>{
    60%,80%,<span class="tag">to</span> <span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">300px</span>)</span></span>;
    }</span>
    70% <span class="rules">{<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">200px</span>)</span></span>;}</span>
    90% <span class="rules">{<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">250px</span>)</span></span>;}</span>
}
<span class="class">.ball-a</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> bounce-a <span class="number">3s</span> forwards</span></span>;
}</span>
</code></pre><p>迫不及待地刷新页面:</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-1.gif" alt=""><br>但是实际的效果令人很失望，小球的移动显得很不真实。这是由于默认的调速函数时这样的：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-02.jpg" alt=""><br>还有四种内置的缓动曲线如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-03.jpg" alt=""><br>如上图，ease-in和ease-out是相反的版本。这对组合正好满足回弹效果：小球的运动相反时，调速函数也是相反的。于是，修改上面的代码：</p>
<pre><code><span class="class">.ball-a</span><span class="rules">{
    <span class="comment">/*animation: bounce-a 3s forwards;*/</span>
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> bounce-a <span class="number">3s</span> ease-in forwards</span></span>;
}</span>
<span class="at_rule">@<span class="keyword">keyframes</span> bounce-a</span>{
    60%,80%,<span class="tag">to</span> <span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">300px</span>)</span></span>;
        <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> ease-out</span></span>;
    }</span>
    70% <span class="rules">{<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">200px</span>)</span></span>;}</span>
    90% <span class="rules">{<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">250px</span>)</span></span>;}</span>
}
</code></pre><p>效果会真是很多：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-4.gif" alt=""></p>
<p>上面提到的五种曲线都是通过三次贝塞尔曲线来指定的。这种曲线由一定数量的路径片段组成，每个片段的每一端由一个锚点来控制曲率。在CSS的调速函数中，都是只有一个片段的贝塞尔曲线，因此调速函数只有两个控制曲率的锚点。</p>
<p>为了对预定义的曲线进行补充，CSS提供了<code>cubic-bezier()</code>函数，允许开发者指定自定义的调速函数。该函数接收四个参数，分别表示两个控制锚点的坐标值。<br>比如：<code>cubic-bezier(x1,y1,x2,y2)</code>，则(x1,y1)表示第一个锚点坐标，(x2,y2)表示第二个锚点坐标。曲线片段的两端分别固定在(0,0)和(1,1)，因此参数的取值范围为[0-1]<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-05.jpg" alt=""><br>我们也可以利用chrome或者<a href="http://cubic-bezier.com/" target="_blank" rel="external">图形化工具</a>来设置这四个参数使过渡更加逼真。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-06.jpg" alt=""></p>
<hr>
<h1 id="弹性过渡">弹性过渡</h1><p>弹性过渡通常用在表单登录的提示框上，下面模拟一个文本输入框，每当它被聚焦时，都需要展示一个提示框。这个提示框用来向用户提示格式等信息。<br>首先是HTML:</p>
<pre><code>&lt;label&gt;password:&lt;/label&gt;
&lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"pwd"</span>&gt;
    &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"text"</span> value=<span class="string">"your password"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"uname-b"</span>&gt;
    &lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">"callout-b callout"</span>&gt;
    <span class="type">Only</span> letters, numbers, underscores (_) and hyphens (-) allowed!
    &lt;/span&gt;
&lt;/div&gt;
</code></pre><p>然后添加样式，先用动画模拟上面提到的效果：</p>
<pre><code><span class="class">.name</span>,<span class="class">.pwd</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
}</span>
<span class="class">.callout</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">178px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">6em</span> .<span class="number">8em</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">4em</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fb3</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">80%</span>/<span class="number">1</span> sans-serif</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>)</span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> .<span class="number">05em</span> .<span class="number">2em</span> .<span class="number">6em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>)</span></span>;
}</span>
<span class="rule"><span class="attribute">.callout</span>:<span class="value">before{
    content: <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> .<span class="number">4em</span></span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> -.<span class="number">5em</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">4em</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> inherit</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> inherit</span></span>;
    <span class="rule"><span class="attribute">border-top</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">border-right</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">45deg</span>)</span></span>;
    <span class="comment">/*border: 1em solid transparent;
    border-right-color: #fb3;
    border-left-width: 0;*/</span>
}
<span class="at_rule">@<span class="keyword">keyframes</span> elastic-grow</span>{
    <span class="tag">from</span> <span class="rules">{<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scale</span>(<span class="number">0</span>)</span></span>;}</span>
    70% <span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">scale</span>(<span class="number">1.1</span>)</span></span>;
        <span class="rule"><span class="attribute">animation-timing-function</span>:<span class="value"> <span class="function">cubic-bezier</span>(.<span class="number">1</span>,.<span class="number">25</span>,.<span class="number">1</span>,.<span class="number">25</span>)</span></span>;
    }</span>
}
<span class="rule"><span class="attribute">.uname-b</span>:<span class="value"><span class="function">not</span>(:focus) + .callout-b{
    transform: <span class="function">scale</span>(<span class="number">0</span>)</span></span>;
}
<span class="rule"><span class="attribute">.uname-b</span>:<span class="value">focus + .callout-b{
    animation: elastic-grow .<span class="number">5s</span></span></span>;
}
<span class="class">.callout-b</span><span class="rules">{
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">10%</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-7.gif" alt=""><br>虽然用动画可以模拟出刚开始的需求，但是有种大材小用的感觉，那么就换一个思路，利用上节所提到的过渡来增加弹性的效果。<br>这个思路主要还是利用<code>cubic-bezier()</code>，由上节知道x1,x2只能在区间[0-1]上取值。但是我们可以在垂直方向上突破0-1区间，从而让过渡达到低于0或者高于100%的程度。这就意味着在从scale(0)变形到scale(1)的过程中，可以在中间经历一个scale(1.1)。<br>在上面的代码中，要增加弹性效果，只需要把调速函数先达到110%，再过渡到100%，利用上节所提到的可视化工具，把第二个锚点向上移，跳到<code>cubic-bezier(.25,.1,.3,1.5)</code>的程度。<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-08.jpg" alt=""><br>如上图，这个过渡会在50%的时间点到达100%，在70%达到110%，在最后回到100%。<br>我们为了便于对比，重新写一个demo<br>HTML：</p>
<pre><code>&lt;label&gt;username:&lt;/label&gt;
&lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"name"</span>&gt;
    &lt;input <span class="class"><span class="keyword">type</span>=</span><span class="string">"text"</span> value=<span class="string">"your name"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"uname-a"</span>&gt;
    &lt;span <span class="class"><span class="keyword">class</span>=</span><span class="string">"callout-a callout"</span>&gt;
    只允许字母、数字、下划线(_)和连字符(-)
    &lt;/span&gt;
&lt;/div&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="rule"><span class="attribute">.uname-a</span>:<span class="value"><span class="function">not</span>(:focus) + .callout-a{
    transform: <span class="function">scale</span>(<span class="number">0</span>)</span></span>;
}
<span class="class">.callout-a</span><span class="rules">{
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> .<span class="number">5s</span> <span class="function">cubic-bezier</span>(.<span class="number">25</span>,.<span class="number">1</span>,.<span class="number">3</span>,<span class="number">1.5</span>)</span></span>;
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0%</span> <span class="number">10%</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-9.gif" alt=""></p>
<p>仔细观察会发现，提示框在弹出的时候没问题，但是当失去焦点消失时，这个过程会将原来的110%变形(scale(1.1))解析为scale(-0.1)，造成视觉上是从原始大小(scale(1))到消失(scale(-0.1))然后再稍微放大些，最后再消失(scale(0))。</p>
<p>要解决这个问题，只需要在失去焦点的时候，把调速函数覆盖为ease。</p>
<p>修改代码：</p>
<pre><code>.uname-a:not(:focus) + .callout-a{
    transform: scale(<span class="number">0</span>);
    transition-timing-<span class="function"><span class="keyword">function</span><span class="type">: ease</span></span>;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-10.gif" alt=""></p>
<p>但是稍微有些强迫症的人可能会发现，提示框关闭的动作要比弹出时慢一些。这是因为提示框弹出时在进行到50%(即250ms)就已经达到100%，而提示框的关闭过程需要500ms。这时候只需要显示的指定<code>transition-duration</code>即可。</p>
<pre><code>.uname-a:not(:focus) + .callout-a{
    transform: scale(<span class="number">0</span>);
    transition-timing-<span class="function"><span class="keyword">function</span><span class="type">: ease</span></span>;
    transition-duration: <span class="number">.25</span>s;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-19-11.gif" alt=""></p>
<p>问题完美解决~</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="弹跳动画">弹跳动画</h1><p>在现实世界里，物体的移动往往不是匀速的。因此，给动画和过渡加上缓动效果会使界面显得更加真实。<br>回弹是一种常用的缓动效果，对回弹的过程进行分析会发现，回弹就是当一个过渡达到最终值时，往回倒一点，然后再次回到最终值，如此往复一次或者多次，并逐渐收敛。最终稳定在终值。<br>回弹往往会用在有尺寸变化的元素上，比如对于页面弹出框，先放大再缩小。下面就利用回弹模拟一个下落的弹性小球。</p>
<p>HTML：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"ball_bg"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"ball ball-a"</span>&gt;&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之水平居中&垂直居中]]></title>
    <link href="http://blog.supce.com/2016/10/09/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B0%B4%E5%B9%B3%E5%B1%85%E4%B8%AD&%E5%9E%82%E7%9B%B4%E5%B1%85%E4%B8%AD/"/>
    <id>http://blog.supce.com/2016/10/09/CSS Secret 读书笔记之水平居中&垂直居中/</id>
    <published>2016-10-08T16:00:00.000Z</published>
    <updated>2016-10-09T12:25:32.015Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="水平居中">水平居中</h1><h2 id="行内元素">行内元素</h2><p>对于<code>&lt;span&gt;</code> <code>img</code> <code>&lt;input&gt;</code>等行内元素，只需要给父元素设置<code>text-align: center</code></p>
<h2 id="定宽块级元素">定宽块级元素</h2><p>对于<code>div</code> <code>p</code> 等块级元素，如果是定宽，只需要给该元素设置左右<code>margin</code>为<code>auto</code></p>
<h2 id="不定宽块级元素">不定宽块级元素</h2><ul>
<li>方法一：改变块级元素<code>display</code>为<code>inline</code>或者<code>inline-block</code>，然后设置父元素<code>text-align</code>为<code>center</code></li>
</ul>
<a id="more"></a>
<p>比如：</p>
<pre><code>&lt;div&gt;
    &lt;ul&gt;
        &lt;<span class="keyword">li</span>&gt;<span class="keyword">test</span> <span class="keyword">one</span>&lt;/<span class="keyword">li</span>&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;<span class="keyword">li</span>&gt;<span class="keyword">test</span> <span class="keyword">one</span>&lt;/<span class="keyword">li</span>&gt;
        &lt;<span class="keyword">li</span>&gt;<span class="keyword">test</span> <span class="keyword">two</span>&lt;/<span class="keyword">li</span>&gt;
    &lt;/ul&gt;
    &lt;ul&gt;
        &lt;<span class="keyword">li</span>&gt;<span class="keyword">test</span> <span class="keyword">one</span>&lt;/<span class="keyword">li</span>&gt;
        &lt;<span class="keyword">li</span>&gt;<span class="keyword">test</span> <span class="keyword">two</span>&lt;/<span class="keyword">li</span>&gt;
        &lt;<span class="keyword">li</span>&gt;<span class="keyword">test</span> three&lt;/<span class="keyword">li</span>&gt;
    &lt;/ul&gt;
&lt;/div&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed <span class="hexcolor">#333</span></span></span>;
}</span>
<span class="tag">ul</span><span class="rules">{
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;
    <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
}</span>
<span class="tag">li</span><span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-01.jpg" alt=""></p>
<p><em>这种方法虽然实现了居中，但是会导致块级元素功能的缺失，上面例子中已经无法给li设置宽和高（虽然可以利用margin和padding产生视觉上的宽和高）当然也可以直接设置li为inline-block</em></p>
<ul>
<li>方法二：通过给父元素设置float，然后父元素设置position:relative和left:50%，子元素设置position:relative和left:-50%来实现水平居中。</li>
</ul>
<p>其基本原理如下：</p>
<p>1、没有浮动的div：大家都知道div是一个块元素，其默认的宽度就是100%：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-02.jpg" alt=""><br>2、如果div设置了浮动之后，他的内容有多宽度就会撑开有多大的容器（除了显式设置元素宽度值）：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-03.jpg" alt=""><br>3、设置ul浮动到左侧：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-04.jpg" alt=""><br>4、然后设置ul的position为relative，让其在原来的位置右移50%(left:50%)<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-05.jpg" alt=""><br>5、最后我们在li上设置<code>position:relative</code>，但其移动的方向和ul移动的方向刚好是反方向，而其移动的值保持一致:<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-06.jpg" alt=""></p>
<p>保持HTML不变CSS代码如下：</p>
<pre><code><span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed <span class="hexcolor">#333</span></span></span>;
}</span>
<span class="tag">ul</span><span class="rules">{
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;
    <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;  <span class="comment">/*清除浮动*/</span>
}</span>
<span class="tag">li</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">2px</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"> -<span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-07.jpg" alt=""></p>
<ul>
<li>方法三：在元素外加入table标签（包括 table、tbody、tr、td），该元素写在 td 内，然后设置左右margin的值为auto</li>
</ul>
<blockquote>
<p>在CSS Secret 读书笔记之结构与布局(一)中知道，如果是默认的自动表格布局算法，单元格的宽度是根据内容的宽度来进行分配的，这恰好是使用该方法的前提。</p>
</blockquote>
<p>HTML:</p>
<pre><code><span class="tag">&lt;<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">table</span>&gt;</span>
        <span class="tag">&lt;<span class="title">tbody</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">ul</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">li</span>&gt;</span>test one<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">li</span>&gt;</span>test two<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
                        <span class="tag">&lt;<span class="title">li</span>&gt;</span>test three<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
                    <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">tbody</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">table</span>&gt;</span>    
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>CSS:</p>
<pre><code><span class="tag">div</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed <span class="hexcolor">#333</span></span></span>;
    }</span>
    <span class="tag">table</span><span class="rules">{
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    }</span>
    <span class="tag">ul</span><span class="rules">{
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;
        <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;
    }</span>
    <span class="tag">li</span><span class="rules">{
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">2px</span></span></span>;
        <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"><span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;
    }</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-08.jpg" alt=""></p>
<hr>
<h1 id="垂直居中">垂直居中</h1><p>1、对于父元素高度不确定的文本，图片和块级元素：：<br>设置父元素的上下内边距相同。<br>HTML: </p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"parent one"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"centered"</span>&gt;
        &lt;h3&gt;this <span class="keyword">is</span> a test&lt;/h3&gt;
        &lt;p&gt;this <span class="keyword">div</span> <span class="keyword">is</span> centered&lt;/p&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.parent</span><span class="rules">{
    <span class="rule"><span class="attribute">padding-top</span>:<span class="value"> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">padding-bottom</span>:<span class="value"> <span class="number">50px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#c0c0c0</span></span></span>;
}</span>
<span class="class">.centered</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="hexcolor">#a0a0a0</span> solid <span class="number">1px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#f5f5f5</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-09.jpg" alt=""></p>
<p>2、对于父元素高度确定的单行文本：<br>设置父元素的<code>height</code>与<code>line-height</code>两个属性的值相同。</p>
<p><em>当<code>line-height</code>的值大于<code>font-size</code>时，会将大于的部分平均分配到文字的上下两端</em></p>
<p>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"single_line"</span>&gt;
    this <span class="keyword">is</span> a test. 
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.single_line</span><span class="rules">{
    <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">15px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40px</span></span></span>;
    <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid black</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-10.jpg" alt=""></p>
<p>3、对于多行文本：<br>设置父元素display为table，要被居中的元素display为table-cell和vertical-algin为middle<br>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"out"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"in"</span>&gt;
        这是一个多行文本，这是一个多行文本，这是一个多行文本
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.out</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#c0c0c0</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> table</span></span>;
}</span>
<span class="class">.in</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> table-cell</span></span>;
    <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-11.jpg" alt=""></p>
<p>4、inline-block方法：<br>设置元素<code>display:inline-block;</code> <code>vertical-align:middle</code>，为父元素设置after伪元素，将伪元素的display和vertical属性分别设置为inline-block和middle，最后设置伪元素高度与父元素高度相同(<code>height:100%</code>)</p>
<p><em>由于行内框的高度是由最高的行内框决定的，设置伪元素高度与父元素高度一致，然后利用vertical-algin即可</em></p>
<p>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"container one"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"centered-one centered"</span>&gt;
        &lt;h1&gt;this <span class="keyword">is</span> a test&lt;/h1&gt;
        &lt;p&gt;this <span class="keyword">div</span> <span class="keyword">is</span> centered&lt;/p&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.container</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#c0c0c0</span></span></span>;
}</span>
<span class="class">.centered</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="hexcolor">#a0a0a0</span> solid <span class="number">1px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#f5f5f5</span></span></span>;
}</span>
<span class="class">.centered-one</span>,<span class="rule"><span class="attribute">.one</span>:<span class="value">after{
    display: inline-block</span></span>;
    <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;
}
<span class="rule"><span class="attribute">.one</span>:<span class="value">after{
    content: <span class="string">''</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">100%</span></span></span>;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-12.jpg" alt=""></p>
<p>5、对于宽高确定的元素：</p>
<p>方法一：利用绝对定位<br>设置父元素的position为relative，设置要垂直居中的元素position为absolute，top和bottom为0，上下外边距为auto。</p>
<blockquote>
<p>元素在过度受限情况下，将margin设置为auto，浏览器会重算margin的值，过度受限指的是同时设置top/bottom与height或者left/right与width</p>
</blockquote>
<p>计算公式为：</p>
<blockquote>
<p>‘top’ + ‘margin-top’ + ‘border-top-width’ + ‘padding-top’ + ‘height’ + ‘padding-bottom’ + ‘border-bottom-width’ + ‘margin-bottom’ + ‘bottom’ = 包含块的高度，在其他值不是auto的时候，margin-top和margin-bottom是可以根据上式算出的</p>
</blockquote>
<p>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"container two"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"centered-two centered"</span>&gt;
        &lt;h1&gt;this <span class="keyword">is</span> a test&lt;/h1&gt;
        &lt;p&gt;this <span class="keyword">div</span> <span class="keyword">is</span> centered&lt;/p&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.container</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#c0c0c0</span></span></span>;
}</span>
<span class="class">.centered</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="hexcolor">#a0a0a0</span> solid <span class="number">1px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#f5f5f5</span></span></span>;
}</span>
<span class="class">.two</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
}</span>
<span class="class">.centered-two</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">150px</span></span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value">auto <span class="number">0</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-13.jpg" alt=""></p>
<p>方法二：利用负边距<br>设置父元素的position为relative，设置要垂直居中的元素position为absolute，top为50%，margin-top为高度的一般。</p>
<p><em>通过设置top为50%，将元素的左上角放在父元素的垂直中心，在利用margin-top为高度的一半，将元素的垂直中心与父元素的垂直中心重合</em></p>
<p>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"container three"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"centered-three centered"</span>&gt;
        &lt;h1&gt;this <span class="keyword">is</span> a test&lt;/h1&gt;
        &lt;p&gt;this <span class="keyword">div</span> <span class="keyword">is</span> centered&lt;/p&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.container</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#c0c0c0</span></span></span>;
}</span>
<span class="class">.centered</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="hexcolor">#a0a0a0</span> solid <span class="number">1px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#f5f5f5</span></span></span>;
}</span>
<span class="class">.three</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
}</span>
<span class="class">.centered-three</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">150px</span></span></span>;
    <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> -<span class="number">75px</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-14.jpg" alt=""></p>
<blockquote>
<p>如果想要水平也居中，可以同时设置left为50%，margin-left为负的宽度的一半。</p>
</blockquote>
<p>如果支持CSS3的话，为了增强自适应性，可以使用<code>translateY()</code>变形函数，这个函数支持百分比。<br>修改CSS代码如下：</p>
<pre><code><span class="class">.centered-three</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="comment">/*width: 300px;
    height: 150px;
    margin-top: -75px;*/</span>
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">10em</span></span></span>;
    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">50%</span>)</span></span>;
}</span>
</code></pre><blockquote>
<p>想要水平垂直居中，可以同时设置<code>left:50%</code>,<code>transform:transform(-50%,-50%)</code></p>
</blockquote>
<p>6、Flex布局<br>这个比较简单<br>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"container four"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"centered-four centered"</span>&gt;
        &lt;h1&gt;this <span class="keyword">is</span> a test&lt;/h1&gt;
        &lt;p&gt;this <span class="keyword">div</span> <span class="keyword">is</span> centered&lt;/p&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.four</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
    <span class="rule"><span class="attribute">align-items</span>:<span class="value"> center</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-15.jpg" alt=""></p>
<p>如果想要水平垂直居中，只需修改CSS代码如下：</p>
<pre><code><span class="class">.four</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
    <span class="comment">/*align-items: center;*/</span>
}</span>
<span class="class">.centered-four</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-18-16.jpg" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="水平居中">水平居中</h1><h2 id="行内元素">行内元素</h2><p>对于<code>&lt;span&gt;</code> <code>img</code> <code>&lt;input&gt;</code>等行内元素，只需要给父元素设置<code>text-align: center</code></p>
<h2 id="定宽块级元素">定宽块级元素</h2><p>对于<code>div</code> <code>p</code> 等块级元素，如果是定宽，只需要给该元素设置左右<code>margin</code>为<code>auto</code></p>
<h2 id="不定宽块级元素">不定宽块级元素</h2><ul>
<li>方法一：改变块级元素<code>display</code>为<code>inline</code>或者<code>inline-block</code>，然后设置父元素<code>text-align</code>为<code>center</code></li>
</ul>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之结构与布局(二)]]></title>
    <link href="http://blog.supce.com/2016/10/01/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B8%83%E5%B1%80(%E4%BA%8C)/"/>
    <id>http://blog.supce.com/2016/10/01/CSS Secret 读书笔记之结构与布局(二)/</id>
    <published>2016-09-30T16:00:00.000Z</published>
    <updated>2016-10-01T13:31:30.640Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="根据兄弟元素的数量设置样式">根据兄弟元素的数量设置样式</h1><p>有时候会碰见这样一种场景：当一个列表不断延长时，通过隐藏空间或压缩控件等方式来节省屏幕空间，用来提升用户体验。<br>这时候就需要我们根据兄弟元素的总数来为它们设置相应的样式。<br>设想一个列表，假设仅当列表的总数为4时才对这些列表项设置样式，这时可以使用<code>li:nth-child(4)</code>来选中列表的第四个列表项。但是我们的需求却是：<br><em>在列表的总数为4时选中每个列表项</em><br>如果直接利用兄弟选择符<code>li:nth-child(4),li:hth-child(4)~li</code>得到的是第四个列表以及它之后的所有列表项。那么我们转换一下思路分以下几种情况：<br>当只有一个列表项时，直接利用<code>:only-child</code>即：</p>
<pre><code><span class="tag">li</span><span class="pseudo">:only-child</span>{
    <span class="comment">/*只有一个列表时的样式*/</span>
}
</code></pre><a id="more"></a>
<p>对于只有一个列表项的列表，其第一项同时也是该列表的最后一项。也就是说<code>:only-child</code>等效于<code>:first-child:last-child</code>，而<code>:last-child</code>是<code>nth-last-child(1)</code>的简写，所以：</p>
<pre><code><span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(<span class="number">1</span>){
    <span class="comment">/*等效于:only-child*/</span>
}
</code></pre><p><em>tips :nth-last-child(n) 选择器匹配属于其元素的第 N 个子元素的每个元素，不论元素的类型，从最后一个子元素开始计数。</em></p>
<p>由上面可以得出对于一个正好包含4项的列表，如果想命中所有列表项，可以这样写：</p>
<pre><code><span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(<span class="number">4</span>),
<span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(<span class="number">4</span>)~<span class="tag">li</span>{
    <span class="comment">/*列表包含4项且命中所有项*/</span>
}
</code></pre><p>根据<a href="http://www.w3school.com.cn/cssref/selector_nth-last-child.asp" target="_blank" rel="external">参考手册</a>，<code>:nth-last-child()</code>选择器的参数不仅仅可以是简单的数字，也可以是类似于an+b的表达式，其中，n 是计数器（从 0 开始），b 是偏移值。<br>比如，我们指定了下标是 3 的倍数的所有p元素的背景色，从最后一个子元素开始计数：</p>
<pre><code><span class="tag">p</span><span class="pseudo">:nth-last-child</span>(<span class="number">3</span>n+<span class="number">0</span>){
    <span class="attribute">background</span>:<span class="hexcolor">#ff0000</span>;
}
</code></pre><p>而对于n+b(相当于a=1)这个公式，无论n如何取值，这个表达式都无法产生一个小于b的值，可以选中从第b个开始的所有子元素。<br>因此：</p>
<pre><code><span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(n+<span class="number">4</span>),
<span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(n+<span class="number">4</span>)~<span class="tag">li</span>{
    <span class="comment">/*列表至少包含4项且命中所有项*/</span>
}
</code></pre><p>同理，-n+b这种形式的表达式可以选中开头的b个元素。因此仅当列表中有4个或更少的列表时，可以这样写:</p>
<pre><code><span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(-n+<span class="number">4</span>),
<span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(-n+<span class="number">4</span>)~<span class="tag">li</span>{
   <span class="comment">/*列表最多包含4项且命中所有项*/</span>
}
</code></pre><p>如果想命中包含2-6个列表项的列表时，只需把上面两种技巧组合一下：</p>
<pre><code><span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(n+<span class="number">2</span>)<span class="pseudo">:nth-last-child</span>(-n+<span class="number">6</span>),
<span class="tag">li</span><span class="pseudo">:first-child</span><span class="pseudo">:nth-last-child</span>(n+<span class="number">2</span>)<span class="pseudo">:nth-last-child</span>(-n+<span class="number">6</span>)~<span class="tag">li</span>{
    <span class="comment">/*当列表包含2-6项时，命中列表中所有列表项*/</span>
}
</code></pre><p>利用上面的技巧可以写一个类似于变色便签的小例子：<br>HTML：</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">class</span>=<span class="value">"palette"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"color-options"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"add"</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Add<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
            <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"delete"</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span>Delete<span class="tag">&lt;/<span class="title">a</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"input-group"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">rows</span>=<span class="value">"12"</span> <span class="attribute">class</span>=<span class="value">"form-control"</span>&gt;</span>write someting...<span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><p>CSS:</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">ul</span><span class="rules">{
        <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;
    }</span>
    <span class="class">.palette</span><span class="rules">{
        <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">300px</span></span></span>;
        <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">900px</span></span></span>;
        <span class="rule"><span class="attribute">font</span>:<span class="value"> bold <span class="number">90%</span>/<span class="number">1</span> sans-serif</span></span>;
    }</span>
    <span class="class">.palette</span> <span class="tag">li</span><span class="rules">{
        <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#D6E055</span></span></span>;
    }</span>
    <span class="class">.color-options</span><span class="rules">{
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> <span class="number">10px</span></span></span>;
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>)</span></span>;
        <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">15px</span> <span class="number">15px</span></span></span>;
        <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
    }</span>
    <span class="class">.color-options</span> <span class="tag">a</span><span class="rules">{
        <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
        <span class="rule"><span class="attribute">text-decoration</span>:<span class="value"> none</span></span>;
    }</span>
    <span class="class">.color-options</span> <span class="rule"><span class="attribute">a</span>:<span class="value">before{
        display: inline-block</span></span>;
        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">1rem</span></span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1.2rem</span></span></span>;
        <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> .<span class="number">3rem</span></span></span>;
        <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">1.2</span></span></span>;
        <span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;
        <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
        <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    }
    <span class="class">.color-options</span> <span class="rule"><span class="attribute">.add</span>:<span class="value">before {
        content:<span class="string">'✚'</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#590</span></span></span>;
    }
    <span class="class">.color-options</span> <span class="rule"><span class="attribute">.delete</span>:<span class="value">before {
        content:<span class="string">'✖'</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"><span class="hexcolor">#b00</span></span></span>;
    }

    <span class="class">.color-options</span> <span class="rule"><span class="attribute">a</span>:<span class="value">after {
        content: <span class="string">' color'</span></span></span>;
        <span class="rule"><span class="attribute">font-weight</span>:<span class="value"> normal</span></span>;
    }
    <span class="class">.add</span> <span class="rules">{ <span class="rule"><span class="attribute">float</span>:<span class="value">left</span></span>; }</span>
    <span class="class">.delete</span> <span class="rules">{ <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>; }</span>

    <span class="class">.palette</span> <span class="rule"><span class="attribute">li</span>:<span class="value">only-child .delete{
        display: none</span></span>;
    }
    <span class="class">.palette</span> <span class="rule"><span class="attribute">li</span>:<span class="value">first-child:<span class="function">nth-last-child</span>(n+<span class="number">4</span>) .color-options a:after,
    .palette li:first-child:<span class="function">nth-last-child</span>(n+<span class="number">4</span>) ~ li .color-options a:after{
        content: none</span></span>;
    }
    <span class="class">.palette</span> <span class="rule"><span class="attribute">li</span>:<span class="value">first-child:<span class="function">nth-last-child</span>(n+<span class="number">4</span>) .color-options a,
    .palette li:first-child:<span class="function">nth-last-child</span>(n+<span class="number">4</span>) ~ li .color-options a{
        font-size: <span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"> transparent</span></span>;
    }
    <span class="class">.input-group</span><span class="rules">{
        <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">20px</span></span></span>;
    }</span>
    <span class="class">.form-control</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;
        <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">120%</span>/<span class="number">1</span> sans-serif</span></span>;
        <span class="rule"><span class="attribute">box-sizing</span>:<span class="value">border-box</span></span>; <span class="comment">/*防止溢出*/</span>
        <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">15px</span></span></span>;
        <span class="rule"><span class="attribute">outline</span>:<span class="value"> none</span></span>;
        <span class="rule"><span class="attribute">resize</span>:<span class="value"> none</span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>JS:</p>
<pre><code>&lt;script <span class="keyword">type</span>=<span class="string">"text/javascript"</span>&gt;
    <span class="keyword">var</span> colors = [
        '<span class="comment">#FEE169', '#CDD452', '#2E95A3', '#F9722E',</span>
        '<span class="comment">#E6E2AF', '#A7A37E', '#EFECCA', '#046380', </span>
        '<span class="comment">#50B8B4', '#C6FFFA', '#E2FFA8', '#D6E055','#C9313D'</span>
    ],
    palette = document.querySelector('.palette'),
    <span class="keyword">template</span> = palette.firstElementChild;
    function addColor(<span class="keyword">template</span>){
        <span class="keyword">var</span> li = <span class="keyword">template</span>.cloneNode(<span class="literal">true</span>);
        <span class="keyword">var</span> color = colors.shift();
        colors.push(color);
        li.style.background = color;
        // palette.insertBefore(li,<span class="keyword">template</span>.nextSibling);
        palette.appendChild(li);
    }
    palette.onclick = function(evt){
        <span class="keyword">var</span> button = evt.target;
        <span class="keyword">if</span>(button.className == 'add'){
            addColor(button.parentNode.parentNode)
        }<span class="keyword">else</span> <span class="keyword">if</span>(button.className == 'delete'){
            <span class="keyword">if</span>(confirm('您确定删除?')){
                <span class="keyword">var</span> li = button.parentNode.parentNode;
                li.parentNode.removeChild(li);
            }   
        }
    }
&lt;/script&gt;
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-17-1.gif" alt=""></p>
<hr>
<h1 id="紧贴底部的页脚">紧贴底部的页脚</h1><p>有一个具有块级样式的页脚，当页面内容足够长时它一切正常，而当页面比较短时，就会出现问题。此时的问题在于页脚不能像我们期望中那样“紧贴”在视口的最底部，而是紧跟在内容的下方。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-17-2.jpg" alt=""></p>
<blockquote>
<p>上图是将内容div删掉后的天津教育考试院官网</p>
</blockquote>
<p>针对于这种情况可以用下面两种方式解决：</p>
<h2 id="基于固定高度的解决方案">基于固定高度的解决方案</h2><p>这种方案的主要思路是：假设页脚的文本不折行，然后估算出页脚实际所占的高度。然后再计算出页头的高度。最后借助视口相关的长度单位以及<code>calc()</code>函数，把页脚固定到底部。其核心代码为：</p>
<pre><code><span class="tag">main</span><span class="rules">{
    <span class="rule"><span class="attribute">min-height</span>:<span class="value"><span class="function">calc</span>(<span class="number">100vh</span> - 页头高度 - 页脚高度)</span></span>;
    <span class="comment">/*避免内边距或边框扰乱高度的计算*/</span>
    <span class="rule"><span class="attribute">box-sizing</span>:<span class="value">border-box</span></span>;
}</span>
</code></pre><p>举个例子，HTML：</p>
<pre><code><span class="tag">&lt;<span class="title">header</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>标题<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
<span class="tag">&lt;/<span class="title">header</span>&gt;</span>
<span class="tag">&lt;<span class="title">main</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>
        空空道人看了一回，晓得这石头有些来历，遂向石头说道：“石兄，你这一段故事，据你自己说来，有些趣味，故镌写在此，意欲闻世传奇。据我看来：第一件，无朝代年纪可考；第二件，并无大贤大忠、理朝廷、治风俗的善政，其中只不过几个异样女子，或情或痴，或小才微善。我纵然抄去，也算不得一种奇书。”石头果然答道：“我师何必太痴！我想历来野史的朝代，无非假借汉、唐的名色；莫如我这石头所记不借此套，只按自己的事体情理，反倒新鲜别致。况且那野史中，或讪谤君相，或贬人妻女，奸淫凶恶，不可胜数；更有一种风月笔墨，其淫秽污臭最易坏人子弟。至于才子佳人等书，则又开口‘文君’，满篇‘子建’，千部一腔，千人一面，且终不能不涉淫滥。在作者不过要写出自己的两首情诗艳赋来，故假捏出男女二人名姓；又必旁添一小人拨乱其间，如戏中的小丑一般。更可厌者，‘之乎者也’，非理即文，大不近情，自相矛盾。竟不如我这半世亲见亲闻的几个女子，虽不敢说强似前代书中所有之人，但观其事迹原委，亦可消愁破闷；至于几首歪诗，也可以喷饭供酒。其间离合悲欢，兴衰际遇，俱是按迹循踪，不敢稍加穿凿，至失其真。
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span> 
<span class="tag">&lt;/<span class="title">main</span>&gt;</span>
<span class="tag">&lt;<span class="title">footer</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>© 2016 No rights reserved.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>Made with ♥ by supce.<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">footer</span>&gt;</span>
</code></pre><p>CSS:</p>
<pre><code><span class="tag">main</span> <span class="rules">{
    <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="function">calc</span>(<span class="number">100vh</span> - <span class="number">5em</span> - <span class="number">7em</span>)
}
body {
    margin: <span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">100%</span>/<span class="number">1.5</span> Palatino Linotype, Palatino, serif</span></span>;
}</span>
<span class="tag">h1</span> <span class="rules">{ <span class="rule"><span class="attribute">margin</span>:<span class="value"> .<span class="number">5em</span> <span class="number">0</span> <span class="number">0</span></span></span>; }</span>
<span class="tag">header</span> <span class="rules">{ <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>; <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">3em</span></span></span>; }</span>
<span class="tag">main</span>, <span class="tag">footer</span> <span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">5em</span> <span class="function">calc</span>(<span class="number">50%</span> - <span class="number">400px</span>)</span></span>;
}</span>
<span class="tag">footer</span> <span class="rules">{
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#222</span>, <span class="hexcolor">#444</span>)</span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">6em</span></span></span>;
}</span>
</code></pre><p>效果如下：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-17-3.jpg" alt=""></p>
<h2 id="基于flex弹性布局的解决方案">基于flex弹性布局的解决方案</h2><p>之前有一篇关于弹性布局的<a href="http://blog.supce.com/2016/09/12/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%BC%B9%E6%80%A7%E5%B8%83%E5%B1%80/">日志</a>。<br>要想让页脚紧贴底部：</p>
<ul>
<li>首先对<code>&lt;body&gt;</code>设置<code>display:flex;flex-flow:column;</code>，保证<code>body</code>内的子元素为垂直排列。</li>
<li>其次，设置<code>&lt;body&gt;</code>的<code>min-height</code>属性为100vh，这样它就至少会占据整个视口的高度。</li>
<li>最后，我们希望页头和页脚有其内部因素来决定，而内容区块的高度应该可以自动伸展并占满所有的可用空间。这就需要给<code>&lt;main&gt;</code>这个容器的flex属性指定一个大于0的值，我们可以暂时设置为1即可。</li>
</ul>
<p>这种方案的核心代码如下:</p>
<pre><code><span class="tag">body</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
    <span class="rule"><span class="attribute">flex-flow</span>:<span class="value"> column</span></span>;
    <span class="rule"><span class="attribute">min-height</span>:<span class="value"> <span class="number">100vh</span></span></span>;
}</span>
<span class="tag">main</span><span class="rules">{
    <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;
}</span>
</code></pre><blockquote>
<p>国庆节偷个小懒，不举例子了</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="根据兄弟元素的数量设置样式">根据兄弟元素的数量设置样式</h1><p>有时候会碰见这样一种场景：当一个列表不断延长时，通过隐藏空间或压缩控件等方式来节省屏幕空间，用来提升用户体验。<br>这时候就需要我们根据兄弟元素的总数来为它们设置相应的样式。<br>设想一个列表，假设仅当列表的总数为4时才对这些列表项设置样式，这时可以使用<code>li:nth-child(4)</code>来选中列表的第四个列表项。但是我们的需求却是：<br><em>在列表的总数为4时选中每个列表项</em><br>如果直接利用兄弟选择符<code>li:nth-child(4),li:hth-child(4)~li</code>得到的是第四个列表以及它之后的所有列表项。那么我们转换一下思路分以下几种情况：<br>当只有一个列表项时，直接利用<code>:only-child</code>即：</p>
<pre><code><span class="tag">li</span><span class="pseudo">:only-child</span>{
    <span class="comment">/*只有一个列表时的样式*/</span>
}
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之结构与布局(一)]]></title>
    <link href="http://blog.supce.com/2016/09/28/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E7%BB%93%E6%9E%84%E4%B8%8E%E5%B8%83%E5%B1%80(%E4%B8%80)/"/>
    <id>http://blog.supce.com/2016/09/28/CSS Secret 读书笔记之结构与布局(一)/</id>
    <published>2016-09-27T16:00:00.000Z</published>
    <updated>2016-09-28T03:13:23.512Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="自适应内部元素">自适应内部元素</h1><p>如果不给一个元素指定一个具体的高度(<code>height</code>),这个元素就会根据内容适应高度。但是对于<code>width</code>怎么样才能有类似的行为呢？<br>首先给出一段HTML测试代码：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。家猫的祖先据推测是起源于古埃及的沙漠猫，波斯的波斯猫，已经被人类驯化了3500年（但未像狗一样完全地被驯化）。<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">figure</span>&gt;</span>
    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"cat.jpg"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">figcaption</span>&gt;</span>猫咪的训练要从幼时抓起，先要摸清猫咪的脾气，然后根据需要选择不同的方式来进行训练。以下几种方式可供选用：强迫、诱导、奖励、惩罚、喊叫。<span class="tag">&lt;/<span class="title">figcaption</span>&gt;</span>
<span class="tag">&lt;/<span class="title">figure</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span>&gt;</span>猫，分多种，是鼠的天敌。各地都有畜养。有黄、黑、白、灰等各种颜色；身形像狸，外貌像老虎，毛柔而齿利（有几乎无毛的品种）。以尾长腰短，目光如金银，上腭棱多的最好。身体小巧，样子招人喜爱。好奇心重。<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre><a id="more"></a>
<p>设置一些基本的样式：</p>
<pre><code><span class="tag">figure</span><span class="rules">{
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid black</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
}</span>
<span class="tag">figure</span> &gt; <span class="tag">img</span><span class="rules">{ <span class="rule"><span class="attribute">max-width</span>:<span class="value"> inherit</span></span>; }</span>
</code></pre><p>初始的效果是这样的：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-1.jpg" alt=""><br>这个时候希望figure元素能够跟它所包含的图片宽度一样，而且是水平居中的。即：如何让figure的宽度让内部的图片决定。<br>首先想到的是浮动，给figure增加<code>float: left;</code><br>这时候宽度虽然符合要求，但是改变了原有的布局。<br>如果对figure元素设置<code>display: inline-block;</code>，让它根据内容来决定自身的尺寸。但是元素的宽度并不是根据图片的宽度来决定的。<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-2.jpg" alt=""><br>最后只能设置figure元素为定宽，然后对其内部的img设置<code>max-width: 100%;</code>，但是这就意味着放弃了响应式布局。<br>当然之前也用过JS来动态的设置figure宽度，但是我们可以利用CSS3的一个新关键字，轻松解决这个问题。<br>CSS3中为<code>height</code>和<code>width</code>属性定义了一<code>min-content</code>的关键字。这个关键字将元素的宽度设置为元素内部最大的不可断行元素的宽度(即最宽的单词，图片，或具有固定宽度的盒元素)。<br>为了平稳回退，可以再给元素设置一个固定的<code>max-width</code>值。最终代码如下：</p>
<pre><code><span class="tag">figure</span><span class="rules">{
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid black</span></span>;
}</span>
<span class="tag">figure</span><span class="rules">{
    <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">300px</span></span></span>;
    <span class="rule"><span class="attribute">max-width</span>:<span class="value"> min-content</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
}</span>
<span class="tag">figure</span> &gt; <span class="tag">img</span><span class="rules">{ <span class="rule"><span class="attribute">max-width</span>:<span class="value"> inherit</span></span>; }</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-3.jpg" alt=""></p>
<p>问题轻松解决~</p>
<hr>
<h1 id="精准控制表格列宽">精准控制表格列宽</h1><p>对于table有一个属性，叫作<code>table-layout</code>，它的默认值为<code>auto</code>，其行为模式被称作自定表格布局算法。也就是平时所看到的表格布局行为。<br>其具体的行为可以用下面这断代码来演示：<br>为了便于演示，先把CSS样式放前面，然后再把HTML分段。</p>
<pre><code><span class="tag">section</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">500px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed red</span></span>;
}</span>
<span class="tag">table</span><span class="rules">{
    <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border-collapse</span>:<span class="value"> collapse</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;
}</span>
<span class="tag">table</span>,<span class="tag">tr</span>,<span class="tag">td</span><span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid black</span></span>;
}</span>
<span class="tag">td</span><span class="class">.preformatted</span><span class="rules">{
    <span class="rule"><span class="attribute">white-space</span>:<span class="value"> pre</span></span>;
    <span class="rule"><span class="attribute">text-overflow</span>:<span class="value"> ellipsis</span></span>;
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
}</span>
</code></pre><p>HTML：</p>
<pre><code><span class="tag">&lt;<span class="title">section</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">table</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>如果我们不<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>指定单元格的宽度，则这些单元格就会根据它们内容的长短来分配宽度，也就是说，内容较长的单元格所能分配到的宽度也较多<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
        <span class="tag">&lt;<span class="title">table</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>如果我们不<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>指定单元格的宽度，则这些单元格就会根据它们内容的长短来分配宽度，也就是说，内容较长的单元格所能分配到的宽度也较多<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>表格的每一行都会参与到列宽的计算中，而不仅是第一行<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>注意，这个表格的列宽分配结果跟上面那个表格不同<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
        <span class="tag">&lt;<span class="title">table</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span> <span class="attribute">style</span>=<span class="value">"width:1000px"</span>&gt;</span>即使我们为单元格指定了宽度，也未必会得到对应的结果。比如这个单元格宽度为1000px<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span> <span class="attribute">style</span>=<span class="value">"width:2000px"</span>&gt;</span>这个单元格宽度被指定为2000px。由于外层容器不足以提供3000px，则两个单元格等比例缩小为33.3%和66.6%<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-4.jpg" alt=""></p>
<pre><code>        <span class="tag">&lt;<span class="title">table</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>如果我们禁止文本折行，那么表格宽度也可能远远超出其容器的宽度<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span> <span class="attribute">class</span>=<span class="value">"preformatted"</span>&gt;</span>而且 text-flow:ellipsis 对此也无能为力而且 text-flow:ellipsis 对此也无能为力而且 text-flow:ellipsis 对此也无能为力<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
        <span class="tag">&lt;<span class="title">table</span>&gt;</span>
            <span class="tag">&lt;<span class="title">tr</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span>大图片或者代码块也可能会导致同样的问题<span class="tag">&lt;/<span class="title">td</span>&gt;</span>
                <span class="tag">&lt;<span class="title">td</span>&gt;</span><span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"http://lea.verou.me/book/panoramic.jpg"</span> /&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">tr</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">table</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">section</span>&gt;</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-5.jpg" alt=""></p>
<p>如果我们把<code>table-layout</code>的值设置为<code>fixed</code>，这时候就是利用固定表格布局算法了。在这个算法下，表格的内容不会影响单元格的宽度，它把更多的控制权交给开发者，我们设置的宽度也会起作用，同时，类似于溢出等元素行为也会接受控制，因此的表格的内容将只能影响表格的行高。<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-6.jpg" alt=""><br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-7.jpg" alt=""><br>通过对比可以发现，设置fixed后，图片所在的单元行并没有根据图片的宽度来扩大自己的宽度。<br>如果给该单元格设置<code>overflow: hidden;</code>也是有效的：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-8.jpg" alt=""></p>
<hr>
<h1 id="满幅的背景，定宽的内容">满幅的背景，定宽的内容</h1><p>有一种网页设计方案，特别是在电子产品的介绍页面比较流行。比如下图某手机的发布页面：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-16-9.jpg" alt=""><br>这种设计可以称作为“背景宽度满幅，内容宽度固定”。其典型的特征如下：</p>
<ul>
<li>页面中包含多个大区块，每个区块都占据了整个视口的宽度，区块的背景也各不相同。</li>
<li>内容是定宽的，即使在不同分辨率下的宽度不一样，那也只是因为媒体查询改变了这个固定宽度的宽度值。在某些情况下，不同区块的内容也可能具有不同的宽度。</li>
</ul>
<p>要实现这种设计风格，最常见的方法就是为每个区块准备两层元素：外层用来实现满幅的背景，内层用来实现定宽的内容，然后再通过<code>margin: auto;</code>实现内容的水平居中。<br>比如下面这个例子：<br>HTML:</p>
<pre><code><span class="tag">&lt;<span class="title">footer</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"wrapper"</span>&gt;</span>
        <span class="comment">&lt;!--内容部分--&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">footer</span>&gt;</span>
</code></pre><p>CSS：</p>
<pre><code><span class="tag">footer</span><span class="rules">{
    <span class="rule"><span class="attribute">blackground</span>:<span class="value"> <span class="function">url</span>()</span></span>;
}</span>
<span class="class">.wrapper</span><span class="rules">{
    <span class="rule"><span class="attribute">max-width</span>:<span class="value"><span class="number">900px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1em</span> auto</span></span>;
}</span>
</code></pre><p>如果对<code>marign: auto;</code>有足够的了解，就会发现没必要再添加一层额外的元素。<br><code>margin: auto</code>所产生的左右外边距实际上都等于视口宽度的一半减去内容宽度的一半，根据上面的例子，左右外边距就是：50% - 450px。这时候就可以利用我们之前用到过的<code>calc</code>了。<br>可以把上面的代码修改下：</p>
<pre><code><span class="tag">footer</span><span class="rules">{
    <span class="rule"><span class="attribute">blackground</span>:<span class="value"> <span class="function">url</span>()</span></span>;
}</span>
<span class="class">.wrapper</span><span class="rules">{
    <span class="rule"><span class="attribute">max-width</span>:<span class="value"><span class="number">900px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">1em</span> <span class="function">calc</span>(<span class="number">50%</span> - <span class="number">450px</span>)</span></span>;
}</span>
</code></pre><p>我们最初的需求是能够去掉包裹内容的div元素。这时候可以稍微改变下思路，去掉div，给父元素设置<code>padding</code>值：</p>
<pre><code><span class="tag">footer</span><span class="rules">{
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>; <span class="comment">/*平稳回退*/</span>
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span> <span class="function">calc</span>(<span class="number">50%</span> - <span class="number">450px</span>)</span></span>;
    <span class="rule"><span class="attribute">blackground</span>:<span class="value"> <span class="function">url</span>()</span></span>;
}</span>
</code></pre>]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="自适应内部元素">自适应内部元素</h1><p>如果不给一个元素指定一个具体的高度(<code>height</code>),这个元素就会根据内容适应高度。但是对于<code>width</code>怎么样才能有类似的行为呢？<br>首先给出一段HTML测试代码：</p>
<pre><code><span class="tag">&lt;<span class="title">p</span>&gt;</span>猫，属于猫科动物，分家猫、野猫，是全世界家庭中较为广泛的宠物。家猫的祖先据推测是起源于古埃及的沙漠猫，波斯的波斯猫，已经被人类驯化了3500年（但未像狗一样完全地被驯化）。<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;<span class="title">figure</span>&gt;</span>
    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"cat.jpg"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">figcaption</span>&gt;</span>猫咪的训练要从幼时抓起，先要摸清猫咪的脾气，然后根据需要选择不同的方式来进行训练。以下几种方式可供选用：强迫、诱导、奖励、惩罚、喊叫。<span class="tag">&lt;/<span class="title">figcaption</span>&gt;</span>
<span class="tag">&lt;/<span class="title">figure</span>&gt;</span>
<span class="tag">&lt;<span class="title">p</span>&gt;</span>猫，分多种，是鼠的天敌。各地都有畜养。有黄、黑、白、灰等各种颜色；身形像狸，外貌像老虎，毛柔而齿利（有几乎无毛的品种）。以尾长腰短，目光如金银，上腭棱多的最好。身体小巧，样子招人喜爱。好奇心重。<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之交互式的图片对比控件]]></title>
    <link href="http://blog.supce.com/2016/09/26/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E4%BA%A4%E4%BA%92%E5%BC%8F%E7%9A%84%E5%9B%BE%E7%89%87%E5%AF%B9%E6%AF%94%E6%8E%A7%E4%BB%B6/"/>
    <id>http://blog.supce.com/2016/09/26/CSS Secret 读书笔记之交互式的图片对比控件/</id>
    <published>2016-09-25T16:00:00.000Z</published>
    <updated>2016-09-26T12:50:45.385Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="交互式的图片对比控件">交互式的图片对比控件</h1><p>利用CSS可以模拟一种图片对比滑动控件，这个控件会把两张图片叠加起来，允许用户拖动分割条来控制这两张图片的显露区域。这种控件可以理解为两层结构：<br>下层是一张固定的图片，上层的图片则可以在水平方向上调整大小，从而能够显示下层的图片。<br>一般这种需求是可以利用JavaScript解决的。但是也可以利用下面这两种CSS方式。</p>
<h2 id="resize方案"><code>resize</code>方案</h2><p>可以利用CSS3中的<code>resize</code>属性。这个属性就算没听说过，但是也肯定接触过它的行为，因为对于<code>&lt;textarea&gt;</code>元素来说，整个属性被默认设置为<code>both</code>，这就使得<code>&lt;textarea&gt;</code>元素在水平和垂直方向上是可以调整大小的。<br>对于任何一个<code>overflow</code>属性不是<code>visible</code>的元素来说，<code>resize</code>属性都是适用的。大部分元素<code>resize</code>属性的默认值是none，即禁止调整大小。该属性也接受<code>horizontal</code>和<code>vertical</code>来限制元素调整大小的方向。<br><a id="more"></a><br>搞清楚<code>resize</code>属性，问题就很好解决了。<br>首先想到的是两个img元素，但是直接对一个img元素应用<code>resize</code>会导致图片变形失真。这时候可以在它外面包裹一个div，然后对div设置<code>resize</code>进行大小调整。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"image-slider"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"bad.jpg"</span> /&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">img</span> <span class="attribute">src</span>=<span class="value">"good.jpg"</span> /&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后给元素设置一些基本的样式，并设置好对应div元素的<code>resize</code>属性值：</p>
<pre><code><span class="class">.image-slider</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
}</span>
<span class="class">.image-slider</span>&gt;<span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40%</span></span></span>;  <span class="comment">/*初始宽度*/</span>
    <span class="rule"><span class="attribute">max-width</span>:<span class="value"> <span class="number">100%</span></span></span>;
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
    <span class="rule"><span class="attribute">resize</span>:<span class="value"> horizontal</span></span>;
}</span>
<span class="class">.image-slider</span> <span class="tag">img</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;  <span class="comment">/*img是一种类似text的元素，在结束的时候，
                        会在末尾加上一个空白符，所以就会多出3px 设置为block可解决*/</span>
}</span>
</code></pre><p>这时候的效果是这样的：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-15-1.gif" alt=""><br>虽然在上层图片的右下角有一个调节的手柄，但是并不容易辨认。这时候可以利用一个伪元素，将其覆盖在初始的调节手柄之上。最后对伪元素进行美化：</p>
<pre><code><span class="tag">image-slider</span>&gt;<span class="rule"><span class="attribute">div</span>:<span class="value">:before{
    content: <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">right</span>:<span class="value"><span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">12px</span></span></span>;<span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">12px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">5px</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(-<span class="number">45deg</span>,white <span class="number">50%</span>,transparent <span class="number">0</span>)</span></span>;
    <span class="rule"><span class="attribute">-webkit-filter</span>:<span class="value"> <span class="function">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black)</span></span>;
    <span class="rule"><span class="attribute">filter</span>:<span class="value"> <span class="function">drop-shadow</span>(<span class="number">0</span> <span class="number">0</span> <span class="number">2px</span> black)</span></span>;
    <span class="rule"><span class="attribute">background-clip</span>:<span class="value"> content-box</span></span>;
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> ew-resize</span></span>;
}
</code></pre><p><em><code>cursor: ew-resize</code>提供额外的自释性，可以提示用户这个区域可以进行水平方向的拖动</em></p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-15-2.gif" alt=""></p>
<h2 id="范围输入控件方案">范围输入控件方案</h2><p>利用<code>resize</code>属性很简单就实现了我们的需求，但是这个方案有下面几个不足：</p>
<ul>
<li>利用<code>resize</code>方案对于键盘来说是不可访问的</li>
<li>只能通过拖动来调整上层图片。用户不能点击到某个点来调整宽度。</li>
<li>用户只能在上层图片的右上角进行大小的调整，有可能被用户忽略。</li>
</ul>
<p>为了解决上面三个问题，可以利用一点JS，将一个原生的滑动控件覆盖在图片上，用这个控件来控制上层图片的伸缩。<br>下面可以优化下HTML代码结构，通过JS来添加相应的元素和控件。</p>
<pre><code>&lt;<span class="tag">div</span> class=<span class="string">"image-slider-2"</span>&gt;
    &lt;<span class="tag">img</span> src=<span class="string">"bad.jpg"</span> /&gt;
    &lt;<span class="tag">img</span> src=<span class="string">"good.jpg"</span> /&gt;
&lt;/div&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="class">.image-slider-2</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
}</span>
<span class="class">.image-slider-2</span> &gt; <span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;<span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
}</span>
<span class="class">.image-slider-2</span> <span class="tag">img</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
}</span>
<span class="class">.image-slider-2</span> <span class="tag">input</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value"><span class="number">5px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
    <span class="comment">/*filter: contrast(.5);
    mix-blend-mode: luminosity;*/</span>
}</span>
</code></pre><p>JS:</p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    <span class="keyword">var</span> slider = <span class="built_in">document</span>.querySelector(<span class="string">'.image-slider-2'</span>);
    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);
    slider.appendChild(div);
    <span class="keyword">var</span> img = slider.querySelector(<span class="string">'img'</span>);
    slider.insertBefore(img,div);
    div.appendChild(img);
    <span class="comment">//创建滑动控件</span>
    <span class="keyword">var</span> range = <span class="built_in">document</span>.createElement(<span class="string">'input'</span>);
    range.type = <span class="string">'range'</span>;
    range.oninput = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        div.style.width = <span class="keyword">this</span>.value + <span class="string">'%'</span>;
    }
    slider.appendChild(range);
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p>最终效果如下：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-15-3.gif" alt=""></p>
<blockquote>
<p>最后真的希望雾霾问题能够解决，能够给后代留一个蓝天。</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="交互式的图片对比控件">交互式的图片对比控件</h1><p>利用CSS可以模拟一种图片对比滑动控件，这个控件会把两张图片叠加起来，允许用户拖动分割条来控制这两张图片的显露区域。这种控件可以理解为两层结构：<br>下层是一张固定的图片，上层的图片则可以在水平方向上调整大小，从而能够显示下层的图片。<br>一般这种需求是可以利用JavaScript解决的。但是也可以利用下面这两种CSS方式。</p>
<h2 id="resize方案"><code>resize</code>方案</h2><p>可以利用CSS3中的<code>resize</code>属性。这个属性就算没听说过，但是也肯定接触过它的行为，因为对于<code>&lt;textarea&gt;</code>元素来说，整个属性被默认设置为<code>both</code>，这就使得<code>&lt;textarea&gt;</code>元素在水平和垂直方向上是可以调整大小的。<br>对于任何一个<code>overflow</code>属性不是<code>visible</code>的元素来说，<code>resize</code>属性都是适用的。大部分元素<code>resize</code>属性的默认值是none，即禁止调整大小。该属性也接受<code>horizontal</code>和<code>vertical</code>来限制元素调整大小的方向。<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之模糊弱化背景&滚动提示]]></title>
    <link href="http://blog.supce.com/2016/09/25/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%A8%A1%E7%B3%8A%E5%BC%B1%E5%8C%96%E8%83%8C%E6%99%AF&%E6%BB%9A%E5%8A%A8%E6%8F%90%E7%A4%BA/"/>
    <id>http://blog.supce.com/2016/09/25/CSS Secret 读书笔记之模糊弱化背景&滚动提示/</id>
    <published>2016-09-24T16:00:00.000Z</published>
    <updated>2016-09-25T12:14:50.929Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="通过模糊弱化背景">通过模糊弱化背景</h1><p>昨天实现了阴影弱化背景，这里换个方式实现模糊弱化背景。<br>下面这种方式主要利用了<code>box-shadow</code>的扩展参数，把元素的投影向各个方向延伸放大。并且利用了viewport单位<code>vmax</code>。</p>
<p><em>1vmax相当于1vw和1vh两者中的较大值。100vw等于整个viewport的宽度，100vh等于整个viewport的高度</em></p>
<p>HTML:</p>
<pre><code>&lt;main&gt;
    &lt;button&gt;show dialog&lt;/button&gt;
    &lt;p&gt;
         <span class="number">2016</span> presidential campaign truly <span class="keyword">is</span> a product <span class="keyword">of</span> <span class="keyword">its</span> <span class="property">time</span>. When one presidential candidate loves <span class="keyword">to</span> communicate <span class="keyword">with</span> his voters <span class="keyword">through</span> <span class="number">140</span>-<span class="property">character</span> bursts <span class="function_start"><span class="keyword">on</span></span> Twitter, <span class="keyword">and</span> a hasty tweet can cause an international scandal, <span class="keyword">the</span> other side has <span class="keyword">to</span> be quick <span class="keyword">to</span> respond <span class="keyword">in</span> similar fashion. Hence a new internet gem courtesy <span class="keyword">of</span> Hillary Clinton’s campaign website: “Donald Trump, Pepe <span class="keyword">the</span> frog, <span class="keyword">and</span> white supremacists: an explainer.”
    &lt;/p&gt;
&lt;/main&gt;
&lt;dialog&gt;this <span class="keyword">is</span> a test this <span class="keyword">is</span> a test click <span class="keyword">me</span> click <span class="keyword">me</span>&lt;/dialog&gt;
</code></pre><a id="more"></a>
<p>CSS:</p>
<pre><code><span class="tag">main</span><span class="rules">{
    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">150%</span>/<span class="number">1.6</span> sans-serif</span></span>;
    <span class="rule"><span class="attribute">transition</span>:<span class="value"> .<span class="number">5s</span> filter</span></span>;
}</span>
<span class="tag">main</span><span class="class">.emphasized</span><span class="rules">{
    <span class="rule"><span class="attribute">filter</span>:<span class="value"> <span class="function">blur</span>(<span class="number">5px</span>)</span></span>;
    <span class="rule"><span class="attribute">-webkit-filter</span>:<span class="value"> <span class="function">blur</span>(<span class="number">5px</span>)</span></span>;

    <span class="comment">/*filter: blur(5px) contrast(.8) brightness(.8);
    -webkit-filter: blur(5px) contrast(.8) brightness(.8);*/</span>
}</span>
<span class="tag">dialog</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> fixed</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">25%</span></span></span>;
    <span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">7.5em</span></span></span>;
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">15em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">4em</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">1em</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid black</span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> .<span class="number">2em</span> .<span class="number">5em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>),
                <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100vmax</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>)</span></span>;
}</span>
<span class="rule"><span class="attribute">dialog</span>:<span class="value"><span class="function">not</span>([open]){
    display: none</span></span>;
}
</code></pre><p>JS:</p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector,context</span>)</span>{
        context = context || <span class="built_in">document</span>;
        <span class="keyword">return</span> context.querySelector(selector);
    }
    <span class="keyword">var</span> main = $(<span class="string">'main'</span>);
    <span class="keyword">var</span> dialog = $(<span class="string">'dialog'</span>);
    $(<span class="string">'button'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        dialog.setAttribute(<span class="string">'open'</span>,<span class="string">'true'</span>);
        main.classList.add(<span class="string">'emphasized'</span>);
    }
    dialog.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">if</span>(dialog.close){
            dialog.close();
        }<span class="keyword">else</span>{
            dialog.removeAttribute(<span class="string">'open'</span>);
        }
        main.classList.remove(<span class="string">'emphasized'</span>);
    }
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-14-1.gif" alt=""></p>
<hr>
<h1 id="滚动提示">滚动提示</h1><p>这里模拟一种滚动提示，这种滚动提示类似于Android 4.0+设置列表中的滚动提示。当列表滚动到最底部(最顶部)时会有阴影效果。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-14-2.jpg" alt=""></p>
<p>首先，创建一个无序列表，设置好最基本的样式。然后就轮到径像渐变大展身手了。在列表的顶部添加一个渐变阴影。<br>HTML:</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>高坂穗乃果<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>园田海末<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>南琴梨<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>小泉花阳<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>西木野真姬<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>星空凛<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>绚濑绘里<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>东条希<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span>矢泽妮可<span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
</code></pre><p>CSS:</p>
<pre><code><span class="tag">ul</span><span class="rules">{
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">10em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">4em</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">3em</span> .<span class="number">5em</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid silver</span></span>;
    <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;

    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">radial-gradient</span>(at top,<span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>),transparent <span class="number">60%</span>) no-repeat</span></span>;
    <span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">100%</span> <span class="number">25px</span></span></span>;
}</span>
</code></pre><p>这时候的效果如下：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-14-3.gif" alt=""><br>当列表滚动时，上面的阴影会一直停留在相同的位置。如果设置<code>background-attachment</code>为local时会出现一个相反的效果：当我们滚动到最顶端时，能看到阴影。向下滚动时阴影就消失了。<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-14-4.gif" alt=""><br>这时候可以换一种思路，再添加一层与背景色相同的矩形遮盖层，用于遮盖阴影。将阴影背景的<code>background-attachment</code>设置为默认值，将矩形遮盖层设置为local。这样，它就会在我们滚动到最顶部时遮盖住阴影，向下滚动时露出阴影。</p>
<pre><code><span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(white,<span class="function">hsla</span>(<span class="number">0</span>,<span class="number">0%</span>,<span class="number">100%</span>,<span class="number">0</span>)),
            <span class="function">radial-gradient</span>(at top,<span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">3</span>),transparent <span class="number">60%</span>)</span></span>;
<span class="rule"><span class="attribute">background-repeat</span>:<span class="value"> no-repeat</span></span>;
<span class="rule"><span class="attribute">background-size</span>:<span class="value"> <span class="number">100%</span> <span class="number">25px</span></span></span>;
<span class="rule"><span class="attribute">background-attachment</span>:<span class="value"> local,scroll</span></span>;
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-14-5.gif" alt=""></p>
<p>最后再用相同的思路给底部添加上双层阴影，最终代码如下：</p>
<pre><code>background: linear-gradient(white,hsla(<span class="number">0</span>,<span class="number">0</span>%,<span class="number">100</span>%,<span class="number">0</span>)) <span class="number">0</span> <span class="number">0</span>,
            radial-gradient(at top,rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.3</span>),transparent <span class="number">60</span>%) <span class="number">0</span> <span class="number">0</span>,
            linear-gradient(hsla(<span class="number">0</span>,<span class="number">0</span>%,<span class="number">100</span>%,<span class="number">0</span>),white) bottom,
            radial-gradient(at bottom,rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.3</span>),transparent <span class="number">60</span>%) bottom;
background-size: <span class="number">100</span>% <span class="number">50</span>px, <span class="number">100</span>% <span class="number">25</span>px,<span class="number">100</span>% <span class="number">50</span>px, <span class="number">100</span>% <span class="number">25</span>px;
background-repeat: no-repeat;
background-attachment: local,scroll,local,scroll;
</code></pre><p>效果图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-14-6.gif" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="通过模糊弱化背景">通过模糊弱化背景</h1><p>昨天实现了阴影弱化背景，这里换个方式实现模糊弱化背景。<br>下面这种方式主要利用了<code>box-shadow</code>的扩展参数，把元素的投影向各个方向延伸放大。并且利用了viewport单位<code>vmax</code>。</p>
<p><em>1vmax相当于1vw和1vh两者中的较大值。100vw等于整个viewport的宽度，100vh等于整个viewport的高度</em></p>
<p>HTML:</p>
<pre><code>&lt;main&gt;
    &lt;button&gt;show dialog&lt;/button&gt;
    &lt;p&gt;
         <span class="number">2016</span> presidential campaign truly <span class="keyword">is</span> a product <span class="keyword">of</span> <span class="keyword">its</span> <span class="property">time</span>. When one presidential candidate loves <span class="keyword">to</span> communicate <span class="keyword">with</span> his voters <span class="keyword">through</span> <span class="number">140</span>-<span class="property">character</span> bursts <span class="function_start"><span class="keyword">on</span></span> Twitter, <span class="keyword">and</span> a hasty tweet can cause an international scandal, <span class="keyword">the</span> other side has <span class="keyword">to</span> be quick <span class="keyword">to</span> respond <span class="keyword">in</span> similar fashion. Hence a new internet gem courtesy <span class="keyword">of</span> Hillary Clinton’s campaign website: “Donald Trump, Pepe <span class="keyword">the</span> frog, <span class="keyword">and</span> white supremacists: an explainer.”
    &lt;/p&gt;
&lt;/main&gt;
&lt;dialog&gt;this <span class="keyword">is</span> a test this <span class="keyword">is</span> a test click <span class="keyword">me</span> click <span class="keyword">me</span>&lt;/dialog&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之自定义复选框&阴影弱化背景]]></title>
    <link href="http://blog.supce.com/2016/09/24/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E8%87%AA%E5%AE%9A%E4%B9%89%E5%A4%8D%E9%80%89%E6%A1%86&%E9%98%B4%E5%BD%B1%E5%BC%B1%E5%8C%96%E8%83%8C%E6%99%AF/"/>
    <id>http://blog.supce.com/2016/09/24/CSS Secret 读书笔记之自定义复选框&阴影弱化背景/</id>
    <published>2016-09-23T16:00:00.000Z</published>
    <updated>2016-09-24T12:00:00.511Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="自定义复选框">自定义复选框</h1><p>单选框和复选框的默认样式确实不敢恭维，但是这两种控件在绝大多数浏览器中仍然无法自由的设置样式。这时候可以用下面这种“曲线救国”的思路来实现自定义复选框。</p>
<h2 id="伪元素解决方案">伪元素解决方案</h2><p>具体思路如下：<br>由于<code>label</code>元素可以和复选框关联，起到触发开关的作用。我们可以为它添加伪元素，并基于复选框的状态来为其设置样式。然后再把真正的复选框隐藏起来。</p>
<blockquote>
<p>CSS的魅力就在于此，正是<code>label</code>可以和复选框(单选框)关联，才有了自定义复选框的可能性。</p>
</blockquote>
<p>有了上面的思路，代码就很简单了。首先是最最最简单的HTML：</p>
<pre><code>&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"custom-a"</span> /&gt;
&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"custom-a"</span>&gt;自定义复选框&lt;/<span class="keyword">label</span>&gt;
</code></pre><a id="more"></a>
<p>然后给<code>label</code>的伪元素添加一些基本的样式：</p>
<pre><code><span class="tag">body</span><span class="rules">{<span class="rule"><span class="attribute">font</span>:<span class="value"><span class="number">150%</span>/<span class="number">1.5</span> sans-serif</span></span>;}</span>
<span class="tag">input</span><span class="attr_selector">[type="checkbox"]</span> + <span class="rule"><span class="attribute">label</span>:<span class="value">:before{
    content: <span class="string">'\a0'</span></span></span>; <span class="comment">/*不换行空格*/</span>
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> .<span class="number">8em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> .<span class="number">8em</span></span></span>;
    <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> .<span class="number">1em</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#c00</span></span></span>;
    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> .<span class="number">2em</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">3em</span></span></span>;
    <span class="rule"><span class="attribute">line-height</span>:<span class="value"> .<span class="number">65</span></span></span>;
    <span class="rule"><span class="attribute">text-indent</span>:<span class="value"> .<span class="number">15em</span></span></span>;
}
</code></pre><p>这时候效果是这个样子的：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-1.jpg" alt=""><br>下面再给伪元素添加复选框被勾选时的样式：</p>
<pre><code><span class="tag">input</span><span class="attr_selector">[type="checkbox"]</span><span class="pseudo">:checked</span> + <span class="rule"><span class="attribute">label</span>:<span class="value">:before{
    content: <span class="string">'\2713'</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> yellowgreen</span></span>;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-2.jpg" alt=""></p>
<p>现在就差一步了，就是把原来的复选框以一种不损失可访问性的方式隐层起来。这就意味着我们不能简单粗暴地设置<code>display:none</code>，因为这样会把它从键盘tab键切换焦点的队列中删除。那么怎么隐藏呢，这时候轮到裁剪登场了，可以使用裁剪，将它裁剪掉！</p>
<pre><code><span class="tag">input</span><span class="attr_selector">[type="checkbox"]</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">clip</span>:<span class="value"> <span class="function">rect</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>)</span></span>;
}</span>
</code></pre><p>然后当伪元素聚焦时再添加<code>box-shadow</code>的特效：</p>
<pre><code>input[type=<span class="string">"checkbox"</span>]:focus + label::before{
    box-shadow: <span class="number">0</span> <span class="number">0</span> <span class="number">.1</span>em <span class="number">2</span>px <span class="preprocessor">#<span class="number">58</span>a;</span>
}
</code></pre><p>OK，完美解决:<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-3.gif" alt=""><br>当然也可以补充上禁用时的样式：</p>
<pre><code><span class="tag">input</span><span class="attr_selector">[type="checkbox"]</span><span class="pseudo">:disabled</span> + <span class="rule"><span class="attribute">label</span>:<span class="value">:before{
    background: <span class="hexcolor">#58a</span></span></span>;
    <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">'\2713'</span></span></span>;
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> not-allowed</span></span>;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-4.gif" alt=""></p>
<blockquote>
<p>在上面的例子中，尽量避免把复选框设置为圆形，因为大多数用户会把圆形的选择框理解为单选框。对于单选框则反之。</p>
</blockquote>
<h2 id="开关式按钮">开关式按钮</h2><p>利用<code>label</code>的可关联性，也可以用来模拟开关式按钮。开关式按钮与复选框的行为十分相似，可以用来切换某个选项的开关状态：启用时，它是被按下的状态，停用时，它就是浮起的状态。<br>代码很简单，主要是利用了内嵌阴影的效果。<br>HTML:</p>
<pre><code>&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"switch"</span>&gt;
&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"switch"</span> id=<span class="string">"switch-label"</span>&gt;开关式按钮&lt;/<span class="keyword">label</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="id">#switch</span><span class="attr_selector">[type="checkbox"]</span> + <span class="id">#switch-label</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> .<span class="number">3em</span> .<span class="number">5em</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#ccc</span></span></span>;
    <span class="rule"><span class="attribute">background-image</span>:<span class="value"> <span class="function">linear-gradient</span>(<span class="hexcolor">#ddd</span>,<span class="hexcolor">#bbb</span>)</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>)</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">3em</span></span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> white inset</span></span>;
    <span class="rule"><span class="attribute">text-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">1px</span> <span class="number">1px</span> white</span></span>;
}</span>
<span class="id">#switch</span><span class="attr_selector">[type="checkbox"]</span><span class="pseudo">:checked</span> + <span class="id">#switch-label</span>,
<span class="id">#switch</span><span class="attr_selector">[type="checkbox"]</span><span class="pseudo">:active</span> + <span class="id">#switch-label</span><span class="rules">{
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> .<span class="number">1em</span> .<span class="number">1em</span> .<span class="number">2em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">6</span>) inset</span></span>;
    <span class="rule"><span class="attribute">border-color</span>:<span class="value"> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>)</span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#bbb</span></span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-5.gif" alt=""></p>
<hr>
<h1 id="通过阴影来弱化背景">通过阴影来弱化背景</h1><p>评论Twitter时，会通过阴影来弱化背景：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-6.jpg" alt=""><br>主要思路是通过点击事件，给背景设置半透明的背景色，然后将要显示的元素显示出来。这里就要用到js来辅助了。<br>HTML：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"overlay"</span>&gt;
    &lt;p&gt;this <span class="keyword">is</span> a test this <span class="keyword">is</span> test click <span class="keyword">me</span> click <span class="keyword">me</span>&lt;/p&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"lightbox"</span>&gt;this <span class="keyword">is</span> a light box&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS：</p>
<pre><code><span class="class">.overlay</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">10em</span></span></span>;
    <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid black</span></span>;
    <span class="comment">/*background-color: rgba(0,0,0,.7);*/</span>
}</span>
<span class="class">.lightbox</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">20em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">5em</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> auto</span></span>;
    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">z-index</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> white</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
}</span>
</code></pre><p>js：</p>
<pre><code><span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
    <span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">selector,context</span>)</span>{
        context = context || <span class="built_in">document</span>;
        <span class="keyword">return</span> context.querySelector(selector);
    }
    <span class="function"><span class="keyword">function</span> <span class="title">checkDisStyle</span>(<span class="params">obj</span>)</span>{
        <span class="keyword">if</span>(obj.currentStyle){
            <span class="keyword">return</span> obj.currentStyle.display;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="built_in">window</span>.getComputedStyle(obj).display;
        }
    }
    $(<span class="string">'.overlay'</span>).onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">if</span> (checkDisStyle($(<span class="string">'.lightbox'</span>)) == <span class="string">'none'</span>) {
            $(<span class="string">'.overlay'</span>).style.backgroundColor = <span class="string">"rgba(0,0,0,.7)"</span>;
            $(<span class="string">'.lightbox'</span>).style.display = <span class="string">"block"</span>;
        }<span class="keyword">else</span>{
            $(<span class="string">'.overlay'</span>).style.backgroundColor = <span class="string">""</span>;
            $(<span class="string">'.lightbox'</span>).style.display = <span class="string">"none"</span>;
        }
        <span class="comment">// console.log(checkDisStyle($('.lightbox')));</span>
    }
</span><span class="tag">&lt;/<span class="title">script</span>&gt;</span> 
</code></pre><p>搞完手工~</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-13-7.gif" alt=""></p>
<blockquote>
<p>在获取当前样式时，记得兼容IE，使用getComputedStyle方法</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="自定义复选框">自定义复选框</h1><p>单选框和复选框的默认样式确实不敢恭维，但是这两种控件在绝大多数浏览器中仍然无法自由的设置样式。这时候可以用下面这种“曲线救国”的思路来实现自定义复选框。</p>
<h2 id="伪元素解决方案">伪元素解决方案</h2><p>具体思路如下：<br>由于<code>label</code>元素可以和复选框关联，起到触发开关的作用。我们可以为它添加伪元素，并基于复选框的状态来为其设置样式。然后再把真正的复选框隐藏起来。</p>
<blockquote>
<p>CSS的魅力就在于此，正是<code>label</code>可以和复选框(单选框)关联，才有了自定义复选框的可能性。</p>
</blockquote>
<p>有了上面的思路，代码就很简单了。首先是最最最简单的HTML：</p>
<pre><code>&lt;<span class="keyword">input</span> <span class="keyword">type</span>=<span class="string">"checkbox"</span> id=<span class="string">"custom-a"</span> /&gt;
&lt;<span class="keyword">label</span> <span class="keyword">for</span>=<span class="string">"custom-a"</span>&gt;自定义复选框&lt;/<span class="keyword">label</span>&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之合适光标&扩大可点击区域]]></title>
    <link href="http://blog.supce.com/2016/09/23/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E5%90%88%E9%80%82%E5%85%89%E6%A0%87&%E6%89%A9%E5%A4%A7%E5%8F%AF%E7%82%B9%E5%87%BB%E5%8C%BA%E5%9F%9F/"/>
    <id>http://blog.supce.com/2016/09/23/CSS Secret 读书笔记之合适光标&扩大可点击区域/</id>
    <published>2016-09-22T16:00:00.000Z</published>
    <updated>2016-09-23T12:39:21.503Z</updated>
    <content type="html"><![CDATA[<p><em>今天莫名的累，借此机会水一篇好了</em></p>
<hr>
<h1 id="合适的鼠标光标">合适的鼠标光标</h1><p>为了给用户带来良好的体验，鼠标在网页中有着不可忽视的作用。不同的鼠标光标暗示着不同的信息。下图是CSS3中新的一批内建光标：</p>
<a id="more"></a>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-12-1.jpg" alt=""><br>下面就简单实现几个：</p>
<pre><code><span class="comment">&lt;!--禁用状态--&gt;</span>
<span class="tag">&lt;<span class="title">button</span>&gt;</span>可用<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">disabled</span>&gt;</span>禁用<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="comment">&lt;!--隐藏光标 适用于公共触摸屏--&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"dis-cursor"</span>&gt;</span>隐藏光标<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
</code></pre><p>CSS：</p>
<pre><code><span class="pseudo">:disabled</span><span class="rules">{        <span class="comment">/*disable选择器*/</span>
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> not-allowed</span></span>;
}</span>
<span class="class">.dis-cursor</span><span class="rules">{
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> none</span></span>;
}</span>
</code></pre><p>效果如下：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-12-2.gif" alt=""></p>
<hr>
<h1 id="扩大可点击区域">扩大可点击区域</h1><p>美国心理学家 Paul Fitts 层提出Fitts法则：人类移动到某个目标区域所需的最短时间是由目标距离与目标宽度之比所构成的对数函数。<br>即：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-12-3.jpg" alt=""><br>其中，T表示所需时间，D是从起点到目标中心的距离，W是目标区域的宽度，a和b是常数。<br>对于网页中那些较小的、难以瞄准的控件来说，如果不能把视觉尺寸放大时，可以把可点击区域放大以增加用户体验和提升交互性。</p>
<h2 id="利用透明边框">利用透明边框</h2><p>首先想到的就是透明边框，因为鼠标也会对边框出发鼠标事件。<br>但是要注意，利用<code>background-clip</code>把背景色限制在原本的区域。<br>如果想要给元素添加边框，可以利用内嵌投影来模拟边框。<br>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"extend-a"</span>&gt;+&lt;/<span class="keyword">div</span>&gt;       
</code></pre><p>CSS：</p>
<pre><code><span class="class">.extend-a</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span> auto</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">2em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">2em</span></span></span>;
    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">250%</span>/<span class="number">2em</span> sans-serif</span></span>;
    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">10px</span> solid transparent</span></span>; <span class="comment">/*透明边框扩大可点击区域*/</span>
    <span class="rule"><span class="attribute">background-clip</span>:<span class="value"> padding-box</span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1px</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">5</span>) inset</span></span>;  <span class="comment">/*内嵌投影模拟边框*/</span>
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-12-4.gif" alt=""></p>
<h2 id="利用伪元素">利用伪元素</h2><p>利用边框心里面总感觉怪怪的，有点别扭。这时候可以试试伪元素了，毕竟边框有时候会影响整体的布局，而伪元素不会。<br>可以在按钮的上层覆盖一层透明的伪元素，并且让伪元素在四个方向都比宿主元素大10px<br>HTML:</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"extend-b"</span>&gt;+&lt;/<span class="keyword">div</span>&gt;        
</code></pre><p>CSS：</p>
<pre><code><span class="class">.extend-b</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span> auto</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">2em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">2em</span></span></span>;
    <span class="rule"><span class="attribute">font</span>:<span class="value"> <span class="number">250%</span>/<span class="number">2em</span> sans-serif</span></span>;
    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#58a</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;
}</span>
<span class="rule"><span class="attribute">.extend-b</span>:<span class="value">:before{
    content: <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value">-<span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">right</span>:<span class="value">-<span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">bottom</span>:<span class="value">-<span class="number">10px</span></span></span>; <span class="rule"><span class="attribute">left</span>:<span class="value">-<span class="number">10px</span></span></span>;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-12-5.gif" alt=""></p>
<blockquote>
<p>就偷偷的划一次水</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>今天莫名的累，借此机会水一篇好了</em></p>
<hr>
<h1 id="合适的鼠标光标">合适的鼠标光标</h1><p>为了给用户带来良好的体验，鼠标在网页中有着不可忽视的作用。不同的鼠标光标暗示着不同的信息。下图是CSS3中新的一批内建光标：</p>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之折角效果&连字符断行]]></title>
    <link href="http://blog.supce.com/2016/09/22/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%8A%98%E8%A7%92%E6%95%88%E6%9E%9C&%E8%BF%9E%E5%AD%97%E7%AC%A6%E6%96%AD%E8%A1%8C/"/>
    <id>http://blog.supce.com/2016/09/22/CSS Secret 读书笔记之折角效果&连字符断行/</id>
    <published>2016-09-21T16:00:00.000Z</published>
    <updated>2016-09-22T13:08:49.524Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="折角效果">折角效果</h1><p>有时候会把一个元素的右上角进行折叠，使元素显得更加有立体感。<br>要实现这种效果通常可以在右上角增加两个三角形：一个三角形来体现折页的形状，另一个三角形遮住元素的一角，用来模拟翻折所产生的缺口。但是这两种方式有以下两个缺陷：</p>
<ul>
<li>当折角元素之下的背景不是纯色而是一幅图案、一层纹理、一张照片或者渐变等，上面这种方式就不能完美实现了。</li>
<li>当折角不是45°时也不能够完美实现。</li>
</ul>
<p>这时候可以用下面这种方式解决<br><a id="more"></a></p>
<h2 id="45°的折角">45°的折角</h2><p>估计已经猜到，这时候要轮到到“万能”的渐变(<code>linear-gradient</code>)登场了。<br>基本思路是这样的：</p>
<ul>
<li>首先利用渐变在右上角创建一个透明的三角</li>
<li>其次再利用渐变生成一个深色透明的三角产生折页效果</li>
</ul>
<p>代码是这个样子的：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"triangle-a"</span>&gt;this <span class="keyword">is</span> a test&lt;/<span class="keyword">div</span>&gt;
<span class="keyword">div</span>{
    width: <span class="number">10</span>em;
    height: <span class="number">6</span>em;
    background: <span class="comment">#fb3;</span>
    font: <span class="number">100</span>%/<span class="number">6</span>em sans-serif;
    <span class="type">text</span>-align: center;
    color: white;
}
.triangle-a{
    background: <span class="comment">#58a  /*回退样式*/</span>
    background: linear-gradient(<span class="keyword">to</span> left bottom,transparent <span class="number">50</span>%,rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.4</span>) <span class="number">0</span>) no-<span class="keyword">repeat</span> <span class="number">100</span>% <span class="number">0</span> / <span class="number">2</span>em <span class="number">2</span>em,
                linear-gradient(-<span class="number">135</span>deg,transparent <span class="number">1.5</span>em,<span class="comment">#fb3 0);</span>
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-1.jpg" alt=""></p>
<blockquote>
<p>注意：透明的切角是沿着渐变轴进行度量的，而background-size中的长度是正常的宽度和高度。所以在45°角的情况下，深色透明正方形的边长应为渐变轴的长度根号2倍。</p>
</blockquote>
<h2 id="其他度数的折角">其他度数的折角</h2><p>如果需要产生一个30°的切角，这时候把渐变设置为-150deg，然后利用正余弦算出深色透明矩形的长和宽。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-2.jpg" alt=""></p>
<pre><code>.triangle-b{
        background: linear-gradient(to left bottom,transparent <span class="number">50</span>%,rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">.4</span>) <span class="number">0</span>) no-repeat <span class="number">100</span>% <span class="number">0</span> /<span class="number">3</span>em <span class="number">1.73</span>em,
                    linear-gradient(-<span class="number">150</span>deg,transparent <span class="number">1.5</span>em,<span class="preprocessor">#fb3 <span class="number">0</span>);</span>
    }
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-3.jpg" alt=""></p>
<p>结果发现效果跟现实里是不一样的。</p>
<p>仔细观察会发现深色三角在形状和大小上与切下来的角是一样的。只是这个深色三角需要进行旋转才能模拟现实的效果。<br>为了方便对深色透明三角进行操作且不影响切口效果，这时候得利用伪元素来实现深色三角了！</p>
<pre><code><span class="class">.triangle-c</span><span class="rules">{
    <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(-<span class="number">150deg</span>,transparent <span class="number">1.5em</span>,<span class="hexcolor">#58a</span> <span class="number">0</span>)</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> .<span class="number">5em</span></span></span>;
}</span>
<span class="rule"><span class="attribute">.triangle-c</span>:<span class="value">:before{
    content: <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;<span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(to left bottom,transparent <span class="number">50%</span>,<span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>) <span class="number">0</span>,<span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>)) no-repeat <span class="number">100%</span> <span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">3em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">1.73em</span></span></span>;
}
</code></pre><p>这是只不过是把上面的效果用伪元素实现了一遍。<br>然后把伪元素的宽和高进行互换：<code>width: 1.73em;height: 3em;</code></p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-4.jpg" alt=""></p>
<p>再观察下，把元素以右下角为中心进行旋转-30度，就可以使得深色透明三角与切口平行：</p>
<pre><code><span class="rule"><span class="attribute">.triangle-c</span>:<span class="value">:before{
    content: <span class="string">""</span></span></span>;
    <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    <span class="rule"><span class="attribute">top</span>:<span class="value"> <span class="number">0</span></span></span>;<span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">linear-gradient</span>(to left bottom,transparent <span class="number">50%</span>,<span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>) <span class="number">0</span>,<span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>)) no-repeat <span class="number">100%</span> <span class="number">0</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">1.73em</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">3em</span></span></span>;
    <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(-<span class="number">30deg</span>)</span></span>;
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> bottom right</span></span>;
    <span class="rule"><span class="attribute">border-bottom-left-radius</span>:<span class="value"> inherit</span></span>;
    <span class="rule"><span class="attribute">box-shadow</span>:<span class="value"> -.<span class="number">2em</span> .<span class="number">2em</span> .<span class="number">3em</span> -.<span class="number">1em</span> <span class="function">rgba</span>(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">15</span>)</span></span>;
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-5.jpg" alt=""></p>
<p>最后再把深色透明三角向上垂直移动就行，垂直移动量应为x-y如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-6.jpg" alt=""></p>
<p>即修改代码如下：</p>
<pre><code><span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(-<span class="number">1.3em</span>) <span class="function">rotate</span>(-<span class="number">30deg</span>)</span></span>;
</code></pre><p>最终效果如下：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-7.jpg" alt=""></p>
<p>每换一个角度就需要重新计算，这时候可以用下预处理器：</p>
<pre><code>@mixin folded-corner(<span class="variable">$background</span>, <span class="variable">$size</span>, <span class="variable">$angle</span>: <span class="number">30</span>deg) {
    position: relative;
    background: <span class="variable">$background</span>; /* 回退 */
    background: linear-gradient(<span class="variable">$angle</span> - <span class="number">180</span>deg, transparent <span class="variable">$size</span>, <span class="variable">$background</span> <span class="number">0</span>);
                border-radius: .<span class="number">5</span>em;
                <span class="variable">$x</span>: <span class="variable">$size</span> / sin(<span class="variable">$angle</span>);
                <span class="variable">$y</span>: <span class="variable">$size</span> / cos(<span class="variable">$angle</span>);
    &amp;::before {
        content: <span class="string">''</span>;
        position: absolute;
        top: <span class="number">0</span>; right: <span class="number">0</span>;
        background: linear-gradient(to left bottom,transparent <span class="number">50</span>%, rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>) <span class="number">0</span>,
        rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">4</span>)) <span class="number">100</span>% <span class="number">0</span> no-repeat;
        width: <span class="variable">$y</span>; height: <span class="variable">$x</span>;
        transform: translateY(<span class="variable">$y</span> - <span class="variable">$x</span>)
        rotate(<span class="number">2</span>*<span class="variable">$angle</span> - <span class="number">90</span>deg);
        transform-origin: bottom right;
        border-bottom-left-radius: inherit;
        box-shadow: -.<span class="number">2</span>em .<span class="number">2</span>em .<span class="number">3</span>em -.<span class="number">1</span>em rgba(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,.<span class="number">2</span>);
    }
}
</code></pre><p>此时只需一行代码即可：</p>
<pre><code>.triangle{ @include folded-corner(<span class="preprocessor">#<span class="number">58</span>a,<span class="number">2</span>em,<span class="number">40</span>deg); }</span>
</code></pre><hr>
<h1 id="连字符断行">连字符断行</h1><p>这部分在英文文本中可能会遇到，处于强迫症，也把它写一下吧<br>文本如果在元素中能够两端对齐是很美观的。但是利用<code>text-align:justify;</code>会自动调整单词的间距，出现类似于“孤岛”的单词<br>比如：</p>
<pre><code><span class="keyword">div</span>{
    width: <span class="number">15</span>em;
    margin: <span class="number">20</span>px auto;
    padding: <span class="number">20</span>px;
    font: <span class="number">125</span>%/<span class="number">1.5</span> sans-serif;
    background: <span class="comment">#fb3;</span>
}
.test-a{
    <span class="type">text</span>-align: justify;
}
&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"test-a"</span>&gt;
This <span class="keyword">is</span> a test.Like many things <span class="keyword">in</span> computer science, <span class="property">word</span> wrapping sounds simple <span class="keyword">and</span> straightforward
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-8.jpg" alt=""></p>
<p>虽然上图中文本两端对齐了，但是更加不美观了。<br>如果在两端对齐中使用连词符断行，使单词能够在音节分界处断开并折行，效果就会好一些。<br>这时候可以利用<code>CSS3中</code>的新属性<code>hyphens</code>，它接收三个值：<code>none,manual,auto</code>。<br><code>manual</code>是它的初始值，表示我们可以在任何时候手工插入连词符(<code>&amp;shy</code>)以实现折行。<br><code>none</code>表示禁用这种行为。<br><code>auto</code>表示自动为我们添加连词符<br>比如上面的例子添加后：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-11-9.jpg" alt=""></p>
<blockquote>
<p>可惜这个属性在chrome 53.0.2785.116 m中不兼容</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="折角效果">折角效果</h1><p>有时候会把一个元素的右上角进行折叠，使元素显得更加有立体感。<br>要实现这种效果通常可以在右上角增加两个三角形：一个三角形来体现折页的形状，另一个三角形遮住元素的一角，用来模拟翻折所产生的缺口。但是这两种方式有以下两个缺陷：</p>
<ul>
<li>当折角元素之下的背景不是纯色而是一幅图案、一层纹理、一张照片或者渐变等，上面这种方式就不能完美实现了。</li>
<li>当折角不是45°时也不能够完美实现。</li>
</ul>
<p>这时候可以用下面这种方式解决<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
</feed>
