<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[supce's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://blog.supce.com/"/>
  <updated>2016-12-15T12:22:52.670Z</updated>
  <id>http://blog.supce.com/</id>
  
  <author>
    <name><![CDATA[supce]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[听指令的小方块(二)]]></title>
    <link href="http://blog.supce.com/2016/12/15/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8027/"/>
    <id>http://blog.supce.com/2016/12/15/JavaScript之基础27/</id>
    <published>2016-12-14T16:00:00.000Z</published>
    <updated>2016-12-15T12:22:52.670Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="整体思路">整体思路</h1><p>在上一篇中是通过页面元素实现的最终效果，下面尝试用canvas的方式实现。</p>
<p>这里需要两个canvas进行叠加，一个用来绘制底层的棋盘背景，另一个用来绘制小方块。</p>
<p>首先是HTML代码:</p>
<pre><code>&lt;<span class="tag">div</span> id=<span class="string">"canvas_box"</span>&gt;
    &lt;<span class="tag">canvas</span> id=<span class="string">"canvas_bg"</span> <span class="attribute">width</span>=<span class="string">"441"</span> <span class="attribute">height</span>=<span class="string">"441"</span>&gt;A drawing of table&lt;/canvas&gt;
    &lt;<span class="tag">canvas</span> id=<span class="string">"canvas_square"</span> <span class="attribute">width</span>=<span class="string">"40"</span> <span class="attribute">height</span>=<span class="string">"40"</span>&gt;A drawing of table&lt;/canvas&gt;
&lt;/div&gt;
</code></pre><a id="more"></a>
<p>配置基本样式</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="id">#canvas_box</span><span class="rules">{
        <span class="rule"><span class="attribute">position</span>:<span class="value"> relative</span></span>;
    }</span>
    <span class="id">#canvas_box</span> <span class="id">#canvas_bg</span><span class="rules">{
        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
        <span class="rule"><span class="attribute">left</span>:<span class="value"><span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">top</span>:<span class="value"><span class="number">0</span></span></span>;
    }</span>
    <span class="id">#canvas_box</span> <span class="id">#canvas_square</span><span class="rules">{
        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>然后，在createBg.js中绘制底层棋盘背景</p>
<pre><code><span class="list">(<span class="keyword">function</span><span class="list">()</span><span class="collection">{
    var drawing = $<span class="list">(<span class="string">"#canvas_bg"</span>)</span><span class="comment">;</span>
    if<span class="list">(<span class="keyword">drawing.getContext</span>)</span><span class="collection">{
        var context = drawing.getContext<span class="list">(<span class="string">"2d"</span>)</span><span class="comment">;</span>
        creataBg<span class="list">(<span class="keyword">context</span>)</span><span class="comment">;</span>
        createXY<span class="list">(<span class="keyword">context</span>)</span><span class="comment">;</span>

    }</span>
    //创建棋盘背景
    function creataBg<span class="list">(<span class="keyword">context</span>)</span><span class="collection">{
        context.strokeStyle = <span class="string">"#ccc"</span><span class="comment">;</span>
        context.translate<span class="list">(<span class="number">0.5</span>,<span class="number">0.5</span>)</span><span class="comment">;</span>
        context.lineWidth = <span class="number">1</span><span class="comment">;</span>
        context.beginPath<span class="list">()</span><span class="comment">;</span>
        var x = <span class="number">40</span>,y=40;
        for<span class="list">(<span class="keyword"><span class="built_in">var</span></span> i=0;i&lt;11;i++)</span><span class="collection">{
            context.moveTo<span class="list">(<span class="keyword">x</span>,y)</span><span class="comment">;</span>
            context.lineTo<span class="list">(<span class="keyword">x</span>,<span class="number">440</span>)</span><span class="comment">;</span>
            x += <span class="number">40</span><span class="comment">;</span>
        }</span>
        x = <span class="number">40</span><span class="comment">;y=40;</span>
        for<span class="list">(<span class="keyword"><span class="built_in">var</span></span> j=0;j&lt;11;j++)</span><span class="collection">{
            context.moveTo<span class="list">(<span class="keyword">x</span>,y)</span><span class="comment">;</span>
            context.lineTo<span class="list">(<span class="number">440</span>,y)</span><span class="comment">;</span>
            y += <span class="number">40</span><span class="comment">;</span>
        }</span>
        context.stroke<span class="list">()</span><span class="comment">;</span>
        context.closePath<span class="list">()</span><span class="comment">;</span>
    }</span>
    //创建x,y坐标值
    function createXY<span class="list">(<span class="keyword">context</span>)</span><span class="collection">{
        context.font = <span class="string">"normal 14px Arial"</span><span class="comment">;</span>
        context.textAlign = <span class="string">"center"</span><span class="comment">;</span>
        context.textBaseline = <span class="string">"middle"</span><span class="comment">;</span>
        var x = <span class="number">60</span>,y=60;
        for<span class="list">(<span class="keyword"><span class="built_in">var</span></span> i=1;i&lt;11;i++)</span><span class="collection">{
            context.fillText<span class="list">(<span class="keyword">i</span>,x,<span class="number">20</span>)</span><span class="comment">;</span>
            x += <span class="number">40</span><span class="comment">;</span>
        }</span>
        for<span class="list">(<span class="keyword"><span class="built_in">var</span></span> i=1;i&lt;11;i++)</span><span class="collection">{
            context.fillText<span class="list">(<span class="keyword">i</span>,<span class="number">20</span>,y)</span><span class="comment">;</span>
            y += <span class="number">40</span><span class="comment">;</span>
        }</span>   
    }</span>
}</span>)</span><span class="list">()</span><span class="comment">;</span>
</code></pre><p>创建一个square类，两个属性，分别保存页面方块元素和该方块的方向。同时，在其原型中增添两个方法，一个是create方法，用于创建方块；一个为go方法，用于移动方块。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Square</span><span class="params">(square)</span>{</span>
    this.<span class="built_in">square</span> = <span class="built_in">square</span>;
    this.direction = <span class="string">"right"</span>;
}
Square.prototype = {
    create : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        var context = this.<span class="built_in">square</span>.getContext<span class="params">(<span class="string">"2d"</span>)</span>;
        switch<span class="params">(this.direction)</span>{
            case 'top':
                createTop<span class="params">(context)</span>;
                break;
            case 'bottom':
                createBottom<span class="params">(context)</span>;
                break;
            case 'left':
                createLeft<span class="params">(context)</span>;
                break;
            case 'right':
                createRight<span class="params">(context)</span>;
                break;
        };
        <span class="keyword">if</span><span class="params">(this.square.style.left == <span class="string">""</span>)</span>{
            this.<span class="built_in">square</span>.style.left = <span class="string">"40px"</span>;
            this.<span class="built_in">square</span>.style.top = <span class="string">"40px"</span>;
        }

        <span class="function"><span class="keyword">function</span> <span class="title">createTop</span><span class="params">(context)</span>{</span>
            var gra = context.createLinearGradient<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0</span>,<span class="string">"red"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.2</span>,<span class="string">"red"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.2</span>,<span class="string">"blue"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">1</span>,<span class="string">"blue"</span>)</span>;
            context.fillStyle = gra;
            context.fillRect<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">40</span>)</span>;
        };
        <span class="function"><span class="keyword">function</span> <span class="title">createBottom</span><span class="params">(context)</span>{</span>
            var gra = context.createLinearGradient<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0</span>,<span class="string">"blue"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.8</span>,<span class="string">"blue"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.8</span>,<span class="string">"red"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">1</span>,<span class="string">"red"</span>)</span>;
            context.fillStyle = gra;
            context.fillRect<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">40</span>)</span>;
        };
        <span class="function"><span class="keyword">function</span> <span class="title">createLeft</span><span class="params">(context)</span>{</span>
            var gra = context.createLinearGradient<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">0</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0</span>,<span class="string">"red"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.2</span>,<span class="string">"red"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.2</span>,<span class="string">"blue"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">1</span>,<span class="string">"blue"</span>)</span>;
            context.fillStyle = gra;
            context.fillRect<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">40</span>)</span>;
        };
        <span class="function"><span class="keyword">function</span> <span class="title">createRight</span><span class="params">(context)</span>{</span>
            var gra = context.createLinearGradient<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">0</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0</span>,<span class="string">"blue"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.8</span>,<span class="string">"blue"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">0.8</span>,<span class="string">"red"</span>)</span>;
            gra.addColorStop<span class="params">(<span class="number">1</span>,<span class="string">"red"</span>)</span>;
            context.fillStyle = gra;
            context.fillRect<span class="params">(<span class="number">0</span>,<span class="number">0</span>,<span class="number">40</span>,<span class="number">40</span>)</span>;
        };
    },
    go : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        console.<span class="built_in">log</span><span class="params">(<span class="string">"gogogo"</span>)</span>;
        switch<span class="params">(this.direction)</span>{
            case 'right':
                var y = parseInt<span class="params">(this.square.style.left)</span>;
                <span class="keyword">if</span><span class="params">(y&lt;<span class="number">400</span>)</span>{
                    y += <span class="number">40</span>;
                    this.<span class="built_in">square</span>.style.left = <span class="params">(y + <span class="string">"px"</span>)</span>;
                }<span class="keyword">else</span>{
                    alert<span class="params">(<span class="string">"已到达右侧边缘"</span>)</span>;
                }   
                break;
            case 'left':
                var y = parseInt<span class="params">(this.square.style.left)</span>;
                <span class="keyword">if</span><span class="params">(y&gt;<span class="number">40</span>)</span>{
                    y -= <span class="number">40</span>;
                    this.<span class="built_in">square</span>.style.left = <span class="params">(y + <span class="string">"px"</span>)</span>;
                }<span class="keyword">else</span>{
                    alert<span class="params">(<span class="string">"已到达左侧边缘"</span>)</span>;
                }   
                break;
            case 'top':
                var x = parseInt<span class="params">(this.square.style.top)</span>;
                <span class="keyword">if</span><span class="params">(x&gt;<span class="number">40</span>)</span>{
                    x -= <span class="number">40</span>;
                    this.<span class="built_in">square</span>.style.top = <span class="params">(x + <span class="string">"px"</span>)</span>;
                }<span class="keyword">else</span>{
                    alert<span class="params">(<span class="string">"已到达顶部边缘"</span>)</span>;
                }   
                break;
            case 'bottom':
                var x = parseInt<span class="params">(this.square.style.top)</span>;
                <span class="keyword">if</span><span class="params">(x&lt;<span class="number">400</span>)</span>{
                    x += <span class="number">40</span>;
                    this.<span class="built_in">square</span>.style.top = <span class="params">(x + <span class="string">"px"</span>)</span>;
                }<span class="keyword">else</span>{
                    alert<span class="params">(<span class="string">"已到达底部边缘"</span>)</span>;
                }   
                break;
        };
    }
}
</code></pre><p>最后在app.js中new一个square对象，绑定相关事件，通过事件调用对象的相关方法。</p>
<pre><code>var square = <span class="keyword">new</span> Square($(<span class="string">"#canvas_square"</span>));
square.create();
<span class="comment">//绑定键盘事件</span>
addHandler(document,<span class="string">"keydown"</span>,function(e){
    <span class="comment">// console.log(e.keyCode);</span>
    <span class="keyword">switch</span>(e.keyCode){
        <span class="keyword">case</span> <span class="number">37</span>:
            square.direction = <span class="string">"left"</span>;
            square.create();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">38</span>:
            square.direction = <span class="string">"top"</span>;
            square.create();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">39</span>:
            square.direction = <span class="string">"right"</span>;
            square.create();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">40</span>:
            square.direction = <span class="string">"bottom"</span>;
            square.create();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">32</span>:   <span class="comment">//按回车和空格前进</span>
        <span class="keyword">case</span> <span class="number">13</span>:
            square.go();
            <span class="keyword">break</span>;
    }
});
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="">最终代码</a><br><a href="">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="整体思路">整体思路</h1><p>在上一篇中是通过页面元素实现的最终效果，下面尝试用canvas的方式实现。</p>
<p>这里需要两个canvas进行叠加，一个用来绘制底层的棋盘背景，另一个用来绘制小方块。</p>
<p>首先是HTML代码:</p>
<pre><code>&lt;<span class="tag">div</span> id=<span class="string">"canvas_box"</span>&gt;
    &lt;<span class="tag">canvas</span> id=<span class="string">"canvas_bg"</span> <span class="attribute">width</span>=<span class="string">"441"</span> <span class="attribute">height</span>=<span class="string">"441"</span>&gt;A drawing of table&lt;/canvas&gt;
    &lt;<span class="tag">canvas</span> id=<span class="string">"canvas_square"</span> <span class="attribute">width</span>=<span class="string">"40"</span> <span class="attribute">height</span>=<span class="string">"40"</span>&gt;A drawing of table&lt;/canvas&gt;
&lt;/div&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[听指令的小方块]]></title>
    <link href="http://blog.supce.com/2016/12/13/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8026/"/>
    <id>http://blog.supce.com/2016/12/13/JavaScript之基础26/</id>
    <published>2016-12-12T16:00:00.000Z</published>
    <updated>2016-12-13T11:46:18.123Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript在DOM、字符串处理相关知识</li>
<li>练习对于复杂UI，如何进行数据机构建模</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框</li>
<li>可以通过键盘对方块下达指令，按下按钮后，使得正方形做相应动作</li>
<li>回车或者空格:向蓝色边所面向的方向前进一格（一格等同于正方形的边长）</li>
<li>←：向左</li>
<li>→：向右</li>
<li>↑：向右</li>
<li>↓：向下</li>
<li>移动不能超出格子空间</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>要实现上面的效果，可以通过canvas也可以通过对页面元素操作来实现。下面采用的是对元素操作来实现的。</p>
<p>首先是最基础的HTML代码，我们设置一个背景容器div，用来存放背景。</p>
<pre><code><span class="doctype">&lt;!DOCTYPE html&gt;</span>
<span class="tag">&lt;<span class="title">html</span>&gt;</span>
<span class="tag">&lt;<span class="title">head</span>&gt;</span>
    <span class="tag">&lt;<span class="title">title</span>&gt;</span>听指令的方块<span class="tag">&lt;/<span class="title">title</span>&gt;</span>
    <span class="tag">&lt;<span class="title">link</span> <span class="attribute">rel</span>=<span class="value">"stylesheet"</span> <span class="attribute">type</span>=<span class="value">"text/css"</span> <span class="attribute">href</span>=<span class="value">"css/task33.css"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/task33/utils.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">head</span>&gt;</span>
<span class="tag">&lt;<span class="title">body</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"table_container"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"control_panel"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span>&gt;</span>上下左右改变方向，回车空格移动<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>

    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/task33/createTable.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/task33/Manipulate.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
    <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span> <span class="attribute">src</span>=<span class="value">"js/task33/app.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
<span class="tag">&lt;/<span class="title">body</span>&gt;</span>
<span class="tag">&lt;/<span class="title">html</span>&gt;</span>
</code></pre><p>然后可以通过js来创建我们的棋盘背景。将这段代码放在createTable.js中</p>
<pre><code><span class="comment">//创建背景</span>
(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> container = $(<span class="string">"#table_container"</span>);
    <span class="keyword">var</span> table = <span class="built_in">document</span>.createElement(<span class="string">"table"</span>);
    <span class="keyword">var</span> tbody = <span class="built_in">document</span>.createElement(<span class="string">"tbody"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;<span class="number">11</span>;i++){
        <span class="keyword">var</span> tr = <span class="built_in">document</span>.createElement(<span class="string">"tr"</span>);
        <span class="keyword">if</span>(i == <span class="number">0</span>){
            tr.setAttribute(<span class="string">"axle"</span>,<span class="string">"y"</span>);
        }
        <span class="keyword">for</span>(<span class="keyword">var</span> j=<span class="number">0</span>;j&lt;<span class="number">11</span>;j++){
            <span class="keyword">var</span> td = <span class="built_in">document</span>.createElement(<span class="string">"td"</span>);
            td.setAttribute(<span class="string">"index"</span>,j);  <span class="comment">//标注该td为tr的第几个子节点</span>
            <span class="keyword">if</span>(i===<span class="number">0</span> &amp;&amp; j!==<span class="number">0</span>){   <span class="comment">//添加横轴坐标</span>
                td.innerHTML = j;
            }
            <span class="keyword">if</span>(j===<span class="number">0</span> &amp;&amp; i!==<span class="number">0</span>){   <span class="comment">//添加纵轴坐标</span>
                td.innerHTML = i;
            }
            <span class="keyword">if</span>(i===<span class="number">5</span> &amp;&amp; j==<span class="number">5</span>){    <span class="comment">//添加初始化方块</span>
                <span class="keyword">var</span> square = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);
                square.setAttribute(<span class="string">"id"</span>,<span class="string">"square"</span>);
                square.className = <span class="string">"bottom"</span>;
                td.appendChild(square);
            }
            tr.appendChild(td);
        }
        tbody.appendChild(tr);
    }
    table.appendChild(tbody);
    container.appendChild(table);
})();
</code></pre><p>写一个操作类，存放页面中的方块，并且给方块添加go方法(前进)和turn(转变方向)方法</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Manipulate</span>(<span class="params">square</span>)</span>{
    <span class="keyword">this</span>.square = square;
};
Manipulate.prototype = {
    go : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="built_in">console</span>.log(<span class="string">"gogogog"</span>);
        <span class="keyword">var</span> direction = square.className;
        <span class="keyword">var</span> td = <span class="keyword">this</span>.square.parentNode;
        <span class="keyword">switch</span>(direction){
            <span class="keyword">case</span> <span class="string">'right'</span>:
                <span class="keyword">var</span> target = td.nextElementSibling;
                <span class="keyword">if</span>(target){
                    target.appendChild(<span class="keyword">this</span>.square);
                    td.innerHTML = <span class="string">""</span>;
                }<span class="keyword">else</span>{
                    alert(<span class="string">"到达最右侧了"</span>);
                }
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'left'</span>:
                <span class="keyword">var</span> target = td.previousElementSibling;
                <span class="keyword">if</span>(target &amp;&amp; (target.innerHTML == <span class="string">""</span>)){
                    target.appendChild(<span class="keyword">this</span>.square);
                    td.innerHTML = <span class="string">""</span>;
                }<span class="keyword">else</span>{
                    alert(<span class="string">"达到最左侧了"</span>);
                }
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'bottom'</span>:
                <span class="keyword">var</span> index = td.getAttribute(<span class="string">"index"</span>);  <span class="comment">//获取索引值</span>
                <span class="keyword">var</span> tr = td.parentNode.nextElementSibling;
                <span class="keyword">if</span>(tr){
                    <span class="keyword">var</span> target = tr.children[index];
                    target.appendChild(<span class="keyword">this</span>.square);
                    td.innerHTML = <span class="string">""</span>;
                }<span class="keyword">else</span>{
                    alert(<span class="string">"到达最底部了"</span>);
                }
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'top'</span>:
                <span class="keyword">var</span> index = td.getAttribute(<span class="string">"index"</span>);  
                <span class="keyword">var</span> tr = td.parentNode.previousElementSibling;
                <span class="keyword">if</span>(tr &amp;&amp; (tr.getAttribute(<span class="string">"axle"</span>) != <span class="string">"y"</span>)){
                    <span class="keyword">var</span> target = tr.children[index];
                    target.appendChild(<span class="keyword">this</span>.square);
                    td.innerHTML = <span class="string">""</span>;
                }<span class="keyword">else</span>{
                    alert(<span class="string">"到达顶部了"</span>);
                }
                <span class="keyword">break</span>;
        }
    },
    turn : <span class="function"><span class="keyword">function</span>(<span class="params">direction</span>)</span>{
        <span class="keyword">switch</span>(direction){
            <span class="keyword">case</span> <span class="string">'top'</span>:
                <span class="keyword">this</span>.square.className = <span class="string">"top"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'right'</span>:
                <span class="keyword">this</span>.square.className = <span class="string">"right"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'bottom'</span>:
                <span class="keyword">this</span>.square.className = <span class="string">"bottom"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'left'</span>:
                <span class="keyword">this</span>.square.className = <span class="string">"left"</span>;
                <span class="keyword">break</span>;
        }
    }
}
</code></pre><p>最后创建对象，绑定相关事件即可</p>
<pre><code><span class="keyword">var</span> square = $(<span class="string">"#square"</span>);
<span class="keyword">var</span> manipulate = <span class="keyword">new</span> Manipulate(square);
<span class="comment">//绑定键盘事件</span>
addHandler(<span class="built_in">document</span>,<span class="string">"keydown"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
    <span class="comment">// console.log(e.keyCode);</span>
    <span class="keyword">switch</span>(e.keyCode){
        <span class="keyword">case</span> <span class="number">37</span>:
            manipulate.turn(<span class="string">"left"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">38</span>:
            manipulate.turn(<span class="string">"top"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">39</span>:
            manipulate.turn(<span class="string">"right"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">40</span>:
            manipulate.turn(<span class="string">"bottom"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="number">32</span>:   <span class="comment">//按回车和空格前进</span>
        <span class="keyword">case</span> <span class="number">13</span>:
            manipulate.go();
            <span class="keyword">break</span>;
    }
});
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/tree/master/js/task33" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task33.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript在DOM、字符串处理相关知识</li>
<li>练习对于复杂UI，如何进行数据机构建模</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>实现一个类似棋盘的格子空间，每个格子用两个数字可以定位，一个红正方形的DOM在这个空间内，正方形中的蓝色边表示这是他的正面，有一个input输入框</li>
<li>可以通过键盘对方块下达指令，按下按钮后，使得正方形做相应动作</li>
<li>回车或者空格:向蓝色边所面向的方向前进一格（一格等同于正方形的边长）</li>
<li>←：向左</li>
<li>→：向右</li>
<li>↑：向右</li>
<li>↓：向下</li>
<li>移动不能超出格子空间</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[表单工厂]]></title>
    <link href="http://blog.supce.com/2016/12/09/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8025/"/>
    <id>http://blog.supce.com/2016/12/09/JavaScript之基础25/</id>
    <published>2016-12-08T16:00:00.000Z</published>
    <updated>2016-12-09T08:28:23.062Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>加强对JavaScript的掌握</li>
<li>熟悉常用表单处理逻辑</li>
<li>学习如何模块如何设计，不同模块间如何尽量解耦</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>实现以JavaScript对象的方式定义表单及验证规则</li>
<li><p>表单配置参考示例如下：（不需要一致，仅为参考）</p>
<p>  {</p>
<pre><code><span class="string">label:</span> <span class="string">'名称'</span>,                    <span class="comment">// 表单标签</span>
<span class="string">type:</span> <span class="string">'input'</span>,                   <span class="comment">// 表单类型</span>
<span class="string">validator:</span> function () {...},    <span class="comment">// 表单验证规</span>
<span class="string">rules:</span> <span class="string">'必填，长度为4-16个字符'</span>,    <span class="comment">// 填写规则提示</span>
<span class="string">success:</span> <span class="string">'格式正确'</span>,              <span class="comment">// 验证通过提示</span>
<span class="string">fail:</span> <span class="string">'名称不能为空'</span>               <span class="comment">// 验证失败提示</span>
</code></pre><p>  }</p>
</li>
</ul>
<ul>
<li>基于该配置项，实现一套逻辑，可以自动生成表单的展现、交互、验证</li>
<li>使用你制作的表单工厂，在一个页面上创建两套样式不同的表单</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>常见的控件类型一般有文本框，单选框，复选框，下拉菜单和文本域。我们可以让用户生成这5种控件，并且添加基本的配置以及自动生成验证规则等。</p>
<p>首先准备好HTML框架，HTML分为两部分，一部分是表单的生成配置部分，另一部分用来存放生成的表单。</p>
<p>第一部分：</p>
<pre><code><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"data_create"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"type_box"</span> <span class="attribute">class</span>=<span class="value">"input"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">legend</span>&gt;</span>控件类型<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
        <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"widget"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"input"</span>&gt;</span>文本框<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"radio"</span>&gt;</span>单选框<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"checkbox"</span>&gt;</span>复选框<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"select"</span>&gt;</span>下拉菜单<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"textarea"</span>&gt;</span>文本域<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"basic_box"</span> <span class="attribute">class</span>=<span class="value">"necessary"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">legend</span>&gt;</span>控件配置<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>名称:<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"label_box"</span> <span class="attribute">value</span>=<span class="value">"input"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"necessary"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"necessary"</span>&gt;</span>必填<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"unnecessary"</span>&gt;</span>选填<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
        <span class="tag">&lt;<span class="title">p</span>&gt;</span>
            <span class="tag">&lt;<span class="title">label</span>&gt;</span>样式:<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
            <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"style_box"</span>&gt;</span>
                <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"style_one"</span>&gt;</span>样式一<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
                <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"style_two"</span>&gt;</span>样式二<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"rule_input"</span> <span class="attribute">class</span>=<span class="value">"text"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">legend</span>&gt;</span>检验规则<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
        <span class="tag">&lt;<span class="title">select</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"text"</span>&gt;</span>文本<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"password"</span>&gt;</span>密码<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"number"</span>&gt;</span>数字<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"email"</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"phone"</span>&gt;</span>电话<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"length_control"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">legend</span>&gt;</span>长度<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>字符长度：<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"min_length"</span> <span class="attribute">type</span>=<span class="value">"number"</span> <span class="attribute">min</span>=<span class="value">"0"</span> <span class="attribute">value</span>=<span class="value">"4"</span> <span class="attribute">class</span>=<span class="value">"numInput"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span>&gt;</span>——<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"max_length"</span> <span class="attribute">type</span>=<span class="value">"number"</span> <span class="attribute">min</span>=<span class="value">"1"</span> <span class="attribute">value</span>=<span class="value">"16"</span> <span class="attribute">class</span>=<span class="value">"numInput"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"box_item"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">legend</span>&gt;</span>选项<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">id</span>=<span class="value">"box_item_input"</span> <span class="attribute">placeholder</span>=<span class="value">"可用空格，逗号，回车来分隔选项"</span> /&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">id</span>=<span class="value">"box_item_show"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btn_add"</span> <span class="attribute">type</span>=<span class="value">"button"</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</code></pre><p>第二部分：</p>
<pre><code>&lt;<span class="tag">div</span> id=<span class="string">"form_box"</span>&gt;
    &lt;<span class="tag">h1</span> id=<span class="string">"title"</span>&gt;表单展示区&lt;/h1&gt;
    &lt;<span class="tag">form</span> id=<span class="string">"result"</span> class=<span class="string">"style_one"</span>&gt;
        &lt;<span class="tag">button</span> type=<span class="string">"button"</span> id=<span class="string">"submit_form"</span>&gt;提交&lt;/button&gt;
        &lt;<span class="tag">input</span> type=<span class="string">"text"</span> class=<span class="string">"hide"</span>&gt;
    &lt;/form&gt;
&lt;/div&gt;
</code></pre><p>在生成单选框，复选框，下拉菜单时，每一个选项的添加利用了之前Tag输入的功能。即实现了一个tag输入框，用户输入空格，逗号，回车时，都自动把当前输入的内容作为一个tag放在输入框下面，遇到重复输入的Tag，自动忽视。</p>
<p>我们把这部分功能封装为showTagModel</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">ShowTag</span>(<span class="params">ipt,box</span>)</span>{
    <span class="keyword">this</span>.arr = [];  <span class="comment">//数据存放数组</span>
    <span class="keyword">this</span>.ipt = ipt; <span class="comment">//选项输入框</span>
    <span class="keyword">this</span>.box = box; <span class="comment">//显示tag的容器</span>
    <span class="keyword">this</span>.length = <span class="number">20</span>; <span class="comment">//option的数量</span>
}
ShowTag.prototype = {
    getData : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> <span class="keyword">this</span>.arr;
    },
    <span class="comment">//显示标签</span>
    show : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> text = <span class="string">''</span>;
        <span class="keyword">for</span> (<span class="keyword">var</span> index = <span class="number">0</span>; index &lt; <span class="keyword">this</span>.arr.length; index++) {
            text += <span class="string">'&lt;div data-num="'</span> + index + <span class="string">'" class="item"&gt;&lt;span&gt;点击删除&lt;/span&gt;'</span> + <span class="keyword">this</span>.arr[index] + <span class="string">'&lt;/div&gt;'</span>;
        }
        <span class="keyword">this</span>.box.innerHTML = text;
        <span class="keyword">return</span> <span class="keyword">this</span>;
    },
    <span class="comment">//去重和限制长度</span>
    trim : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> i,j;
        <span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;<span class="keyword">this</span>.arr.length;i++){
            <span class="keyword">for</span>(j=i+<span class="number">1</span>;j&lt;<span class="keyword">this</span>.arr.length;j++){
                <span class="keyword">if</span>(<span class="keyword">this</span>.arr[i] == <span class="keyword">this</span>.arr[j]){
                    <span class="keyword">this</span>.arr.splice(j,<span class="number">1</span>);
                    j--;
                }
            }
        }
        <span class="keyword">while</span>(<span class="keyword">this</span>.arr.length &gt; <span class="keyword">this</span>.length){
            <span class="keyword">this</span>.arr.shift();
        }
        <span class="keyword">this</span>.show();
        <span class="keyword">return</span> <span class="keyword">this</span>;
    },
    <span class="comment">//添加数据</span>
    add : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> strs = <span class="keyword">this</span>.ipt.value.split(<span class="regexp">/[ ,、， \n\t]/</span>);
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;strs.length;i++){
            <span class="keyword">var</span> item = strs[i];
            <span class="keyword">if</span>(item != <span class="string">""</span>){
                <span class="keyword">this</span>.arr.push(item);
            }
        }
        <span class="keyword">this</span>.trim();
        <span class="keyword">return</span> <span class="keyword">this</span>;
    },
    <span class="comment">//点击删除数据</span>
    deleteEvent : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        <span class="comment">//点击span或者点击span内的文本</span>
        <span class="keyword">var</span> item = e.target.className == <span class="string">'item'</span> ? e.target : e.target.parentNode.className == <span class="string">'item'</span> ? e.target.parentNode : <span class="literal">null</span>;
        <span class="keyword">if</span> (item == <span class="literal">null</span>) {
            <span class="keyword">return</span> <span class="number">0</span>;
        }
        <span class="comment">//删除第n个元素，之后重新显示元素</span>
        <span class="keyword">this</span>.arr.splice(item.getAttribute(<span class="string">'data-num'</span>), <span class="number">1</span>);
        <span class="keyword">this</span>.show();
    }
};
<span class="comment">//input对象</span>
<span class="function"><span class="keyword">function</span> <span class="title">TagIpt</span>(<span class="params">tag_ipt,tag_box</span>)</span>{
    ShowTag.call(<span class="keyword">this</span>,tag_ipt,tag_box);
}
<span class="comment">//建立一个由ShowTag.prototype继承而来的TagIpt.prototype对象.</span>
TagIpt.prototype = <span class="built_in">Object</span>.create(ShowTag.prototype);
<span class="comment">//设置构造函数为ShowTag</span>
TagIpt.constructor = ShowTag;
TagIpt.prototype.init=<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
    <span class="comment">//绑定事件</span>
    addHandler(<span class="keyword">this</span>.box, <span class="string">'click'</span>, <span class="keyword">this</span>.deleteEvent.bind(<span class="keyword">this</span>));<span class="comment">//删除元素事件的绑定</span>
    addHandler(<span class="keyword">this</span>.ipt, <span class="string">'keyup'</span>, <span class="keyword">this</span>.keyUp.bind(<span class="keyword">this</span>));    <span class="comment">//输入框输入内容事件的绑定</span>
    addHandler(<span class="keyword">this</span>.ipt, <span class="string">'keydown'</span>, <span class="keyword">this</span>.preventDefault);    <span class="comment">//阻止输入框的默认事件</span>
};
TagIpt.prototype.keyUp=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{
    <span class="keyword">if</span> (e.keyCode == <span class="number">188</span> || e.keyCode == <span class="number">32</span> || e.keyCode == <span class="string">'13'</span>) {
        <span class="keyword">this</span>.add();
        <span class="keyword">this</span>.ipt.value = <span class="string">''</span>;
    }
};
TagIpt.prototype.preventDefault=<span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>{
    <span class="keyword">if</span> (e.keyCode == <span class="string">'13'</span>) {
        e.preventDefault ? e.preventDefault() : e.returnValue = <span class="literal">false</span>;
    }
};
</code></pre><p>由于要从页面中获取很多数据，这里用一个对象把需要的控件封装，集成再在同一个对象中，避免频繁对页面的某个元素频繁重复的获取。</p>
<p>这里把页面用的元素封装再dataModel中</p>
<pre><code><span class="comment">//存放需要的id节点</span>
var data_box = {
    <span class="string">type_box :</span> {             <span class="comment">//控件类型             </span>
<span class="label">        box:</span> $(<span class="string">"#type_box"</span>), 
<span class="label">        value:</span> <span class="string">"className"</span>   <span class="comment">//获取方式</span>
    },
    <span class="string">label_box :</span> {            <span class="comment">//控件名称</span>
        <span class="string">box :</span> $(<span class="string">"#label_box"</span>),
<span class="label">        value:</span> <span class="string">"value"</span>
    },
    <span class="string">necessary_box :</span> {        <span class="comment">//控件是否必填</span>
        <span class="string">box :</span> $(<span class="string">"#basic_box"</span>),
        <span class="string">value :</span> <span class="string">"className"</span>
    },
    <span class="string">style_box :</span> {            <span class="comment">//控件样式</span>
        <span class="string">box :</span> $(<span class="string">"#style_box"</span>),
        <span class="string">value :</span> <span class="string">"value"</span>
    },
    <span class="string">input_type_box :</span> {       <span class="comment">//input类型</span>
        <span class="string">box :</span> $(<span class="string">"#rule_input"</span>),
        <span class="string">value :</span> <span class="string">"className"</span>
    },
    <span class="string">min_length_box :</span> {       <span class="comment">//控件字符最短长度</span>
        <span class="string">box :</span> $(<span class="string">"#min_length"</span>),
        <span class="string">value :</span> <span class="string">"value"</span>
    },
    <span class="string">max_length_box :</span> {       <span class="comment">//控件字符最长长度</span>
        <span class="string">box :</span> $(<span class="string">"#max_length"</span>),
        <span class="string">value :</span> <span class="string">"value"</span>
    },
    <span class="string">item_box :</span> [
        $(<span class="string">"#box_item_input"</span>),
        $(<span class="string">'#box_item_show'</span>),  <span class="comment">//选项展示区</span>
        document.getElementsByClassName(<span class="string">'item'</span>) <span class="comment">//获取所有node节点</span>
    ],
    <span class="string">add_btn :</span> $(<span class="string">"#btn_add"</span>),  <span class="comment">//添加控件按钮</span>
    <span class="string">result_box :</span> $(<span class="string">"#result"</span>),<span class="comment">//控件展示区</span>
    <span class="string">submit_form :</span> $(<span class="string">"#submit_form"</span>)  <span class="comment">//展示区的提交按钮</span>
};
</code></pre><p>下一步就可以建立一个表单工厂，通过data_box获取相应的数据，并且根据用户输入的信息建立表单控件。在表单工厂中，首先是初始化部分，建立配置选项和类名的对应关系，为下一步获取页面配置数据做准备</p>
<pre><code><span class="comment">//数据工厂</span>
<span class="function"><span class="keyword">function</span> <span class="title">Data_factory</span>(<span class="params">data_box</span>)</span>{
    <span class="keyword">this</span>.box = data_box;
    <span class="keyword">this</span>.id = <span class="number">0</span>;
}
Data_factory.prototype = {
    init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">this</span>.addEvent();  <span class="comment">//初始化给form绑定事件</span>
    },
    addEvent : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        addHandler($(<span class="string">"#data_create"</span>),<span class="string">"change"</span>,<span class="keyword">this</span>.changeClass.bind(<span class="keyword">this</span>));  <span class="comment">//下拉框内容改变时更改对应元素的类名</span>
        addHandler(<span class="keyword">this</span>.box.style_box.box,<span class="string">"change"</span>,<span class="keyword">this</span>.changeStyle.bind(<span class="keyword">this</span>)); <span class="comment">//样式改变时修改控件样式</span>
    },
    changeClass : <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        <span class="keyword">var</span> box = e.target;
        <span class="keyword">if</span>(box.type == <span class="string">"select-one"</span>){
            <span class="keyword">var</span> value = box.options[box.selectedIndex].value;
            box.parentNode.className = value;
            <span class="keyword">if</span>(!<span class="regexp">/necessary/</span>.test(box.id)){
                <span class="keyword">this</span>.box.label_box.box.value = value;  <span class="comment">//改变控件的名字</span>
            }
        }
    },
    changeStyle : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> style = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.style_box);
        <span class="keyword">this</span>.box.result_box.className = style;
    },
</code></pre><p>然后是数据获取，在获取数据时，先获取基本的信息，比如控件类型和控件名称，然后根据类型再获取其他所需要的数据。因为不同的控件需要的数据是不同的</p>
<pre><code>getText : <span class="function"><span class="keyword">function</span><span class="params">(data_box)</span></span>{
        <span class="keyword">return</span> data_box.box[data_box.value];  <span class="comment">//根据不同的属性获取不同的值</span>
    },
    getData : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{      <span class="comment">//获取页面数据</span>
        <span class="keyword">var</span> data = {
            type : <span class="string">''</span>,        <span class="comment">//控件类型</span>
            label : <span class="string">''</span>,
            necessary : <span class="literal">true</span>,
            input_type : <span class="string">''</span>,  <span class="comment">//input的类型 text number password...</span>
            min_length : <span class="number">0</span>,
            max_length : <span class="number">1</span>,
            item : [],        <span class="comment">//存放选项的数组</span>
            id : <span class="number">0</span>,           <span class="comment">//控件id</span>
            default_text : <span class="string">''</span>,   <span class="comment">//默认提示</span>
            success_text : <span class="string">''</span>,   <span class="comment">//成功提示</span>
            fail_text : <span class="string">''</span>,      <span class="comment">//失败提示</span>
            validator : <span class="function"><span class="keyword">function</span><span class="params">()</span></span>{}  <span class="comment">//检验规则</span>
        };
        <span class="comment">//获取基础数据</span>
        data = <span class="keyword">this</span>.getBaseData(data);
        <span class="comment">//根据类型完善其他数据</span>
        <span class="keyword">switch</span>(data.type){
            <span class="keyword">case</span> <span class="string">'input'</span>:
                <span class="keyword">switch</span>(data.input_type){
                    <span class="keyword">case</span> <span class="string">'text'</span>:
                    <span class="keyword">case</span> <span class="string">'password'</span>:
                        data = <span class="keyword">this</span>.getLengthData(data);
                        <span class="keyword">break</span>;
                    <span class="keyword">case</span> <span class="string">'number'</span>:
                    <span class="keyword">case</span> <span class="string">'email'</span>:
                    <span class="keyword">case</span> <span class="string">'phone'</span>:
                        data = <span class="keyword">this</span>.getIptData(data);
                        <span class="keyword">break</span>;
                }   
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'textarea'</span>:
                data = <span class="keyword">this</span>.getLengthData(data);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'radio'</span>:
            <span class="keyword">case</span> <span class="string">'checkbox'</span>:
            <span class="keyword">case</span> <span class="string">'select'</span>:
                data = <span class="keyword">this</span>.getItemData(data);
                <span class="keyword">break</span>;
        }
        <span class="keyword">return</span> data;
    },
    getBaseData : <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{
        data.type = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.type_box);
        data.label = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.label_box);
        data.necessary = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.necessary_box)  == <span class="string">"necessary"</span>;
        data.input_type = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.input_type_box);
        data.id = <span class="string">"form"</span> + <span class="keyword">this</span>.id++;
        <span class="keyword">return</span> data;
    },
    <span class="comment">//补充text password和textarea的信息</span>
    getLengthData : <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{ 
        data.min_length = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.min_length_box);
        data.max_length = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.max_length_box);
        data.validator = validator.length_control;
        data.default_text = <span class="string">'长度为'</span> + data.min_length + <span class="string">'——'</span> + data.max_length + <span class="string">'个字符,'</span> + (data.necessary?<span class="string">"必填"</span>:<span class="string">"选填"</span>);
        data.success_text = data.label + <span class="string">'格式正确'</span>;
        data.fail_text = [
            data.label + <span class="string">'不能为空'</span>,
            data.label + <span class="string">'长度不能小于'</span> + data.min_length + <span class="string">'个字符'</span>,
            data.label + <span class="string">'长度不能大于'</span> + data.max_length + <span class="string">'个字符'</span>
        ];
        <span class="keyword">return</span> data;
    },
    <span class="comment">//补充numer emai 和phone的信息</span>
    getIptData : <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{
        data.input_type = <span class="keyword">this</span>.getText(<span class="keyword">this</span>.box.input_type_box);
        data.validator = validator[data.input_type];
        data.default_text = <span class="string">'请输入'</span> + data.label + (data.necessary?<span class="string">"必填"</span>:<span class="string">"选填"</span>);
        data.success_text = data.label + <span class="string">'格式正确'</span>;
        data.fail_text = [
            data.label + <span class="string">'不能为空'</span>,
            data.label + <span class="string">'格式不正确'</span>
        ];
        <span class="keyword">return</span> data;
    },
    <span class="comment">//补充radio checkbox 和select的信息</span>
    getItemData : <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>{
        <span class="keyword">var</span> items = <span class="keyword">this</span>.box.item_box[<span class="number">2</span>] <span class="comment">//获取所有选项节点</span>
        data.item = []; <span class="comment">//清空数据</span>
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;items.length;i++){
            data.item.push(items[i].childNodes[<span class="number">1</span>].data);
        }
        <span class="keyword">if</span>(data.item.length == <span class="number">0</span>){
            alert(<span class="string">'你还没有添加'</span> + data.label + <span class="string">'的选项'</span>);
            data = <span class="literal">null</span>;
        }<span class="keyword">else</span> <span class="keyword">if</span>(data.item.length == <span class="number">1</span>){
            alert(<span class="string">'你只添加了一个选项，无法创建'</span> + data.label);
            data = <span class="literal">null</span>;
        }<span class="keyword">else</span>{
            data.default_text = <span class="string">'请选择'</span> + data.label + (data.necessary?<span class="string">" 必填"</span>:<span class="string">"选填"</span>);
            data.success_text = data.label + <span class="string">'已选择'</span>;
            data.fail_text = [data.label + <span class="string">'未选择'</span>];
        }
        <span class="keyword">return</span> data;
    },
</code></pre><p>有了数据，就可以向页面插入控件了</p>
<pre><code><span class="comment">//根据数据生成控件</span>
addWidget : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    <span class="keyword">switch</span>(data.type){
        <span class="keyword">case</span> <span class="string">'input'</span>:
            <span class="keyword">this</span>.addIptWidget(data);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'radio'</span>:
            <span class="keyword">this</span>.addRadioWidget(data);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'checkbox'</span>:
            <span class="keyword">this</span>.addCheckWidget(data);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'select'</span>:
            <span class="keyword">this</span>.addSelectWidget(data);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'textarea'</span>:
            <span class="keyword">this</span>.addAreaWidget(data);
            <span class="keyword">break</span>;
    }
},
addIptWidget : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>);
    div.innerHTML = <span class="string">'&lt;label&gt;'</span> + data.label + <span class="string">':&lt;/label&gt;'</span> + <span class="string">'&lt;input type="'</span> + data.input_type + <span class="string">'" id="'</span> + data.id + <span class="string">'"&gt;&lt;span&gt;&lt;/span&gt;'</span>;
    <span class="keyword">this</span>.box.result_box.insertBefore(div,<span class="keyword">this</span>.box.submit_form);
},
addRadioWidget : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>),text = <span class="string">""</span>;
    div.className = <span class="string">"radio_box"</span>;
    text += <span class="string">'&lt;div id="'</span> + data.id + <span class="string">'"&gt;&lt;label className="widgetNameLabel" &gt;'</span> + data.label + <span class="string">':&lt;/label&gt;'</span>;
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.item.length; i++) {
        <span class="keyword">var</span> id = data.id + <span class="string">''</span> + i;
        text += <span class="string">'&lt;input type="radio" id="'</span> + id + <span class="string">'" name="'</span> + data.id + <span class="string">'"&gt;&lt;label for="'</span> + id + <span class="string">'"&gt;'</span> + data.item[i] + <span class="string">'&lt;/label&gt;'</span>;
    }
    text += <span class="string">'&lt;/div&gt;&lt;span&gt;&lt;/span&gt;'</span>;
    div.innerHTML = text;
    <span class="keyword">this</span>.box.result_box.insertBefore(div,<span class="keyword">this</span>.box.submit_form);
},
addCheckWidget : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>),text = <span class="string">""</span>;
    div.className = <span class="string">"radio_box"</span>;
    text += <span class="string">'&lt;div id="'</span> + data.id + <span class="string">'"&gt;&lt;label className="widgetNameLabel" &gt;'</span> + data.label + <span class="string">':&lt;/label&gt;'</span>;
    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; data.item.length; i++) {
        <span class="keyword">var</span> id = data.id + <span class="string">''</span> + i;
        text += <span class="string">'&lt;input type="checkbox" id="'</span> + id + <span class="string">'" name="'</span> + data.id + <span class="string">'"&gt;&lt;label for="'</span> + id + <span class="string">'"&gt;'</span> + data.item[i] + <span class="string">'&lt;/label&gt;'</span>;
    }
    text += <span class="string">'&lt;/div&gt;&lt;span&gt;&lt;/span&gt;'</span>;
    div.innerHTML = text;
    <span class="keyword">this</span>.box.result_box.insertBefore(div,<span class="keyword">this</span>.box.submit_form);
},
addSelectWidget : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">"div"</span>),text = <span class="string">""</span>;
    text += <span class="string">'&lt;label&gt;'</span> + data.label + <span class="string">':&lt;/label&gt;&lt;select id="'</span> + data.id + <span class="string">'" &gt;'</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.item.length;i++){
        text += <span class="string">'&lt;option&gt;'</span> + data.item[i] + <span class="string">'&lt;/option&gt;'</span>;
    }
    text += <span class="string">'&lt;/select&gt;&lt;span&gt;&lt;/span&gt;'</span>;
    div.innerHTML = text;
    <span class="keyword">this</span>.box.result_box.insertBefore(div,<span class="keyword">this</span>.box.submit_form);
},
addAreaWidget : <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>{
    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);
    div.innerHTML = <span class="string">'&lt;label&gt;'</span> + data.label + <span class="string">':&lt;/label&gt;&lt;textarea id="'</span> + data.id + <span class="string">'"&gt;&lt;/textarea&gt;&lt;span&gt;&lt;/span&gt;'</span>;
    <span class="keyword">this</span>.box.result_box.insertBefore(div, <span class="keyword">this</span>.box.submit_form);
}
</code></pre><p>控件工厂完成了，但是还需要给生成的表单设置相应的检验事件，用于提示用户，可以把这部分功能写在initForm中，Form用于事件的绑定，validator对象用于存放所有的检验规则。</p>
<pre><code><span class="comment">//初始化表单验证</span>
<span class="function"><span class="keyword">function</span> <span class="title">Form</span>(<span class="params">data</span>)</span>{
    <span class="keyword">this</span>.data = data;
    <span class="built_in">console</span>.log(data.id);
    <span class="keyword">this</span>.ipt = <span class="built_in">document</span>.getElementById(data.id);
    <span class="built_in">console</span>.log(<span class="keyword">this</span>.ipt);
    <span class="keyword">this</span>.tip = <span class="keyword">this</span>.ipt.nextElementSibling;
    <span class="keyword">this</span>.validator = data.validator;
    <span class="keyword">this</span>.init();
}
Form.prototype = {
    init : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        addHandler(<span class="keyword">this</span>.ipt,<span class="string">"focus"</span>,<span class="keyword">this</span>.default_tip.bind(<span class="keyword">this</span>));
        addHandler(<span class="keyword">this</span>.ipt,<span class="string">"blur"</span>,<span class="keyword">this</span>.validator.bind(<span class="keyword">this</span>));
        addHandler(<span class="keyword">this</span>.ipt,<span class="string">"change"</span>,<span class="keyword">this</span>.validator.bind(<span class="keyword">this</span>));
    },
    default_tip : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">this</span>.tip.innerHTML = <span class="keyword">this</span>.data.default_text;
        <span class="keyword">this</span>.tip.className = <span class="string">"default"</span>;
        <span class="comment">// this.ipt.className = "default";</span>
    },
    true_tip : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">this</span>.tip.innerHTML = <span class="keyword">this</span>.data.success_text;
        <span class="keyword">this</span>.tip.className = <span class="string">"true"</span>;
        <span class="comment">// this.ipt.className = "true";</span>
    },
    error_tip : <span class="function"><span class="keyword">function</span>(<span class="params">i</span>)</span>{
        <span class="keyword">this</span>.tip.innerHTML = <span class="keyword">this</span>.data.fail_text[i];
        <span class="keyword">this</span>.tip.className = <span class="string">"error"</span>;
        <span class="comment">// this.ipt.className = "error";</span>
    }
};
<span class="keyword">var</span> validator = {
     <span class="comment">//text password textarea</span>
    <span class="string">'length_control'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        min_length = <span class="keyword">this</span>.data.min_length;
        max_length = <span class="keyword">this</span>.data.max_length;
        <span class="keyword">var</span> text = <span class="keyword">this</span>.ipt.value;
        <span class="keyword">if</span> (text == <span class="string">''</span>) {
            <span class="keyword">if</span> (<span class="keyword">this</span>.data.necessary)
                <span class="keyword">this</span>.error_tip(<span class="number">0</span>);
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.default_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">else</span> {
            <span class="keyword">var</span> total = (<span class="regexp">/[\x00-\xff]/</span>.test(text) ? text.match(<span class="regexp">/[\x00-\xff]/g</span>).length : <span class="number">0</span>) + (<span class="regexp">/[^\x00-\xff]/</span>.test(text) ? text.match(<span class="regexp">/[^\x00-\xff]/g</span>).length * <span class="number">2</span> : <span class="number">0</span>);
            <span class="keyword">if</span> (total &lt; min_length) {
                <span class="keyword">this</span>.error_tip(<span class="number">1</span>);
            }
            <span class="keyword">else</span> <span class="keyword">if</span> (total &gt; max_length) {
                <span class="keyword">this</span>.error_tip(<span class="number">2</span>);
            }
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.true_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">return</span> <span class="literal">false</span>;
    },
    <span class="string">'number'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">var</span> text = <span class="keyword">this</span>.ipt.value;
        <span class="keyword">if</span> (text == <span class="string">''</span>) {
            <span class="keyword">if</span> (<span class="keyword">this</span>.data.necessary)
                <span class="keyword">this</span>.error_tip(<span class="number">0</span>);
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.default_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">else</span> {
            <span class="keyword">if</span> (<span class="regexp">/^\d*$/</span>.test(text)) {
                <span class="keyword">this</span>.true_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.error_tip(<span class="number">1</span>);
            }
        }
        <span class="keyword">return</span> <span class="literal">false</span>;
    },
    <span class="string">'email'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">var</span> text = <span class="keyword">this</span>.ipt.value;
        <span class="keyword">if</span> (text == <span class="string">''</span>) {
            <span class="keyword">if</span> (<span class="keyword">this</span>.data.necessary)
                <span class="keyword">this</span>.error_tip(<span class="number">0</span>);
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.default_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">else</span> {
            <span class="keyword">if</span> (<span class="regexp">/^[0-9a-z]+([._\\-]*[a-z0-9])*@([a-z0-9]+[a-z0-9]+.){1,63}[a-z0-9]+$/</span>.test(text)) {
                <span class="keyword">this</span>.true_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.error_tip(<span class="number">1</span>);
            }
        }
        <span class="keyword">return</span> <span class="literal">false</span>;
    },
    <span class="string">'phone'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">var</span> text = <span class="keyword">this</span>.ipt.value;
        <span class="keyword">if</span> (text == <span class="string">''</span>) {
            <span class="keyword">if</span> (<span class="keyword">this</span>.data.necessary)
                <span class="keyword">this</span>.error_tip(<span class="number">0</span>);
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.default_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">else</span> {
            <span class="keyword">if</span> (<span class="regexp">/^1[34578]\d{9}$/</span>.test(text)) {
                <span class="keyword">this</span>.true_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
            <span class="keyword">else</span> {
                <span class="keyword">this</span>.error_tip(<span class="number">1</span>);
            }
        }
        <span class="keyword">return</span> <span class="literal">false</span>;
    },
    <span class="string">'radio'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">var</span> item = $(<span class="string">'#'</span> + <span class="keyword">this</span>.data.id).getElementsByTagName(<span class="string">'input'</span>);
        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; item.length; i++) {
            <span class="keyword">if</span> (item[i].checked) {
                <span class="keyword">this</span>.true_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">if</span> (<span class="keyword">this</span>.data.necessary)
            <span class="keyword">this</span>.error_tip(<span class="number">0</span>);
        <span class="keyword">else</span> {
            <span class="keyword">this</span>.default_tip();
            <span class="keyword">return</span> <span class="literal">true</span>;
        }
        <span class="keyword">return</span> <span class="literal">false</span>;
    },
    <span class="string">'checkbox'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">var</span> children = <span class="keyword">this</span>.ipt.children;
        <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> children) {
            <span class="keyword">if</span> (children[i].checked) {
                <span class="keyword">this</span>.true_tip();
                <span class="keyword">return</span> <span class="literal">true</span>;
            }
        }
        <span class="keyword">if</span> (<span class="keyword">this</span>.data.necessary)
            <span class="keyword">this</span>.error_tip(<span class="number">0</span>);
        <span class="keyword">else</span> {
            <span class="keyword">this</span>.default_tip();
            <span class="keyword">return</span> <span class="literal">true</span>;
        }
        <span class="keyword">return</span> <span class="literal">false</span>;
    },
    <span class="string">'select'</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>{
        <span class="keyword">this</span>.true_tip();
        <span class="keyword">return</span> <span class="literal">true</span>;
    }
}
</code></pre><p>最后，直接调用，给页面两个按钮绑定事件。</p>
<pre><code><span class="keyword">var</span> data_factory = <span class="keyword">new</span> Data_factory(data_box),
    tagIpt = <span class="keyword">new</span> TagIpt(data_box.item_box[<span class="number">0</span>],data_box.item_box[<span class="number">1</span>]),
    widgetArr = [];
data_factory.init();
tagIpt.init();
<span class="comment">//绑定添加控件事件</span>
addHandler(data_factory.box.add_btn,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> data = data_factory.getData();
    <span class="keyword">if</span>(data != <span class="literal">null</span>){
        <span class="comment">//向表单中添加相应的控件</span>
        data_factory.addWidget(data);
        <span class="comment">//绑定验证函数并放入数组中</span>
        widgetArr.push(<span class="keyword">new</span> Form(data));
        <span class="comment">//在控件为radio和checkbox时直接展示默认的提示</span>
        <span class="keyword">if</span> (data.type == <span class="string">'radio'</span> || data.type == <span class="string">'checkbox'</span>) {
            widgetArr[widgetArr.length - <span class="number">1</span>].default_tip();
        }
    }
});
<span class="comment">//给表单提交按钮绑定检验事件</span>
addHandler(data_box.submit_form,<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">()</span></span>{
    <span class="keyword">var</span> text = <span class="string">""</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;widgetArr.length;i++){
        text += !widgetArr[i].validator() ? widgetArr[i].tip.textContent + <span class="string">'\n'</span> : <span class="string">""</span>;
    }
    <span class="keyword">if</span>(text == <span class="string">""</span>){
        alert(<span class="string">"提交成功"</span>);
    }<span class="keyword">else</span>{
        alert(text);
    }
});
</code></pre><hr>
<h1 id="完整代码">完整代码</h1><p><a href="https://github.com/byvector/code-monkey/tree/master/js/task32" target="_blank" rel="external">完整代码</a><br><a href="http://ife.supce.com/task32.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>加强对JavaScript的掌握</li>
<li>熟悉常用表单处理逻辑</li>
<li>学习如何模块如何设计，不同模块间如何尽量解耦</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>实现以JavaScript对象的方式定义表单及验证规则</li>
<li><p>表单配置参考示例如下：（不需要一致，仅为参考）</p>
<p>  {</p>
<pre><code><span class="string">label:</span> <span class="string">'名称'</span>,                    <span class="comment">// 表单标签</span>
<span class="string">type:</span> <span class="string">'input'</span>,                   <span class="comment">// 表单类型</span>
<span class="string">validator:</span> function () {...},    <span class="comment">// 表单验证规</span>
<span class="string">rules:</span> <span class="string">'必填，长度为4-16个字符'</span>,    <span class="comment">// 填写规则提示</span>
<span class="string">success:</span> <span class="string">'格式正确'</span>,              <span class="comment">// 验证通过提示</span>
<span class="string">fail:</span> <span class="string">'名称不能为空'</span>               <span class="comment">// 验证失败提示</span>
</code></pre><p>  }</p>
</li>
</ul>
<ul>
<li>基于该配置项，实现一套逻辑，可以自动生成表单的展现、交互、验证</li>
<li>使用你制作的表单工厂，在一个页面上创建两套样式不同的表单</li>
</ul>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 17]]></title>
    <link href="http://blog.supce.com/2016/11/30/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8024/"/>
    <id>http://blog.supce.com/2016/11/30/JavaScript之基础24/</id>
    <published>2016-11-29T16:00:00.000Z</published>
    <updated>2016-11-30T11:44:59.352Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>加强对JavaScript的掌握</li>
<li>熟悉常用表单处理逻辑</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中完成两个单选框，切换单选框的不同选项时下方显示的表单随之切换。</li>
<li>当选择在校生时，出现两个select下拉菜单，一个选择城市，一个选择学校，当选择非在校生时，出一个文本输入框</li>
<li>学校下拉菜单里的学校名单均为城市下拉菜单中所选的城市中的大学，当城市发生变化时，学校一起发生变化</li>
<li>城市及学校的数据随意编造即可，无需真实完整</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>这个任务简单，就是一个最基本的联动表单</p>
<p>首先将HTML写出来</p>
<pre><code><span class="tag">&lt;<span class="title">form</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"radioContainer"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"identity"</span> <span class="attribute">value</span>=<span class="value">"student"</span> <span class="attribute">checked</span>&gt;</span>在校生<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">name</span>=<span class="value">"identity"</span> <span class="attribute">value</span>=<span class="value">"gradute"</span>&gt;</span>非在校生<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>  
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"inSchool"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>学校<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"city"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"bj"</span>&gt;</span>北京<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"tj"</span>&gt;</span>天津<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"wh"</span>&gt;</span>武汉<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
        <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"school"</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"清华大学"</span>&gt;</span>清华大学<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"北京大学"</span>&gt;</span>北京大学<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
            <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"北京邮电大学"</span>&gt;</span>北京邮电大学<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"outSchool"</span> <span class="attribute">class</span>=<span class="value">"hidden"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>就业单位<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">"company"</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</code></pre><p>然后准备好数据</p>
<pre><code>var data = {
        <span class="string">bj :</span> [<span class="string">"清华大学"</span>,<span class="string">"北京大学"</span>,<span class="string">"北京邮电大学"</span>],
        <span class="string">tj :</span> [<span class="string">"天津大学"</span>,<span class="string">"南开大学"</span>],
        <span class="string">wh :</span> [<span class="string">"华中科技大学"</span>,<span class="string">"武汉大学"</span>]
    }
</code></pre><p>给radio添加下对应的事件</p>
<pre><code>var $ = <span class="function"><span class="keyword">function</span><span class="params">(id)</span>{</span>
    return document.getElementById<span class="params">(id)</span>;
}
<span class="function"><span class="keyword">function</span> <span class="title">addHandler</span><span class="params">(ele,type,handler)</span>{</span>
    <span class="keyword">if</span><span class="params">(ele.addEventListener)</span>{
        ele.addEventListener<span class="params">(type,handler,<span class="literal">false</span>)</span>;
    }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(ele.attachEvent)</span>{
        ele.attachEvent<span class="params">(<span class="string">"on"</span> + type,handler)</span>;
    }<span class="keyword">else</span>{
        ele[<span class="string">"on"</span> + type] = handler;
    }
}

addHandler<span class="params">($<span class="params">(<span class="string">"radioContainer"</span>)</span>,<span class="string">"change"</span>,function<span class="params">(e)</span>{
    var value = e.target.value;
    if<span class="params">(value == <span class="string">"student"</span>)</span>{
        $<span class="params">(<span class="string">"inSchool"</span>)</span>.classList.remove<span class="params">(<span class="string">"hidden"</span>)</span>;
        $<span class="params">(<span class="string">"outSchool"</span>)</span>.classList.add<span class="params">(<span class="string">"hidden"</span>)</span>;
    }else if<span class="params">(value == <span class="string">"gradute"</span>)</span>{
        $<span class="params">(<span class="string">"inSchool"</span>)</span>.classList.add<span class="params">(<span class="string">"hidden"</span>)</span>;
        $<span class="params">(<span class="string">"outSchool"</span>)</span>.classList.remove<span class="params">(<span class="string">"hidden"</span>)</span>;
    }
})</span>;
</code></pre><p>最后给输入文本框添加事件</p>
<pre><code>addHandler($(<span class="string">"city"</span>),<span class="string">"change"</span>,changeCity);
<span class="function"><span class="keyword">function</span> <span class="title">changeCity</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> selectedValue = $(<span class="string">"city"</span>).options[$(<span class="string">"city"</span>).selectedIndex].value;
    <span class="keyword">var</span> schools = data[selectedValue];
    $(<span class="string">"school"</span>).innerHTML = <span class="string">""</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=schools.length;i&lt;len;i++){
        <span class="keyword">var</span> option = <span class="built_in">document</span>.createElement(<span class="string">'option'</span>);
        option.value = schools[i];
        option.innerHTML = schools[i];
        $(<span class="string">"school"</span>).appendChild(option);
    }
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task31.html" target="_blank" rel="external">完整代码</a><br><a href="http://ife.supce.com/task31.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>加强对JavaScript的掌握</li>
<li>熟悉常用表单处理逻辑</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中完成两个单选框，切换单选框的不同选项时下方显示的表单随之切换。</li>
<li>当选择在校生时，出现两个select下拉菜单，一个选择城市，一个选择学校，当选择非在校生时，出一个文本输入框</li>
<li>学校下拉菜单里的学校名单均为城市下拉菜单中所选的城市中的大学，当城市发生变化时，学校一起发生变化</li>
<li>城市及学校的数据随意编造即可，无需真实完整</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 16]]></title>
    <link href="http://blog.supce.com/2016/11/29/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8023/"/>
    <id>http://blog.supce.com/2016/11/29/JavaScript之基础23/</id>
    <published>2016-11-28T16:00:00.000Z</published>
    <updated>2016-11-29T12:10:46.200Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>加强对JavaScript的掌握</li>
<li>熟悉常用表单处理逻辑</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中添加多个表单</li>
<li>要求:</li>
<li>表单获得焦点时，下方显示表单填写规则</li>
<li>表单失去焦点时校验表单内容</li>
<li>校验结果正确时，表单边框显示绿色，并在下方显示验证通过的描述文字</li>
<li>校验结果错误时，表单边框显示红色，并在下方显示验证错误的描述文字</li>
<li>点击提交按钮时，对页面中所有输入进行校验，校验结果显示方式同上。若所有表单校验通过，弹窗显示“提交成功”，否则显示“提交失败”</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>主要是对于表单的输入检验和文本提示，可以将文本提示放在HTML中，并将它们隐藏。然后根据不同的检测结果显示不同的提示。</p>
<pre><code><span class="tag">&lt;<span class="title">form</span> <span class="attribute">id</span>=<span class="value">"register"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"userName"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>用户名<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"prompt"</span>&gt;</span>中英文均可，4-16个字符<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkErr"</span>&gt;</span>必填！中英文均可，4-16个字符<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkSucc"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"pwd"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>密码<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"prompt"</span>&gt;</span>6-16个字符<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkErr"</span>&gt;</span>必填！6-16个字符<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkSucc"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"confirmPwd"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>确认密码<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"prompt"</span>&gt;</span>请再次填写密码<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkErr"</span>&gt;</span>密码不一致<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkSucc"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"email"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>邮箱<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"prompt"</span>&gt;</span>example@ife.com<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkErr"</span>&gt;</span>邮箱格式不正确<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkSucc"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span> <span class="attribute">id</span>=<span class="value">"tel"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">label</span>&gt;</span>手机号<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">name</span>=<span class="value">""</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"prompt"</span>&gt;</span>请输入11位手机号码<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkErr"</span>&gt;</span>手机号码格式不正确<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
        <span class="tag">&lt;<span class="title">span</span> <span class="attribute">class</span>=<span class="value">"checkSucc"</span>&gt;</span><span class="tag">&lt;/<span class="title">span</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"submitBtn"</span> <span class="attribute">type</span>=<span class="value">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">form</span>&gt;</span>
</code></pre><p>然后设置以下基本样式</p>
<pre><code><span class="id">#register</span> <span class="tag">label</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"><span class="number">80px</span></span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">8px</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
    <span class="rule"><span class="attribute">text-align</span>:<span class="value"> right</span></span>;
    <span class="rule"><span class="attribute">font</span>:<span class="value"> normal <span class="number">16px</span>/<span class="number">16px</span> arial,sans-serif</span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#333</span></span></span>;
}</span>
<span class="id">#register</span> <span class="tag">input</span><span class="rules">{
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">20px</span></span></span>;
}</span>
<span class="class">.inputErr</span><span class="rules">{
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid red</span></span>;
}</span>
<span class="id">#submitBtn</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">60px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> white</span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid transparent</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">4px</span></span></span>;
    <span class="rule"><span class="attribute">cursor</span>:<span class="value"> pointer</span></span>;
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#5cb85c</span></span></span>;
}</span>
<span class="id">#submitBtn</span><span class="pseudo">:hover</span><span class="rules">{
    <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#449d44</span></span></span>;
}</span>
<span class="class">.prompt</span><span class="rules">{
    <span class="rule"><span class="attribute">font</span>:<span class="value"> normal <span class="number">10px</span>/<span class="number">10px</span> arial,sans-serif</span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#999</span></span></span>;
}</span>
<span class="class">.checkErr</span><span class="rules">{
    <span class="rule"><span class="attribute">font</span>:<span class="value"> normal <span class="number">10px</span>/<span class="number">10px</span> arial,sans-serif</span></span>;
    <span class="rule"><span class="attribute">color</span>:<span class="value"> red</span></span>;
}</span>
<span class="class">.checkSucc</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">16px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">16px</span></span></span>;
    <span class="rule"><span class="attribute">vertical-align</span>:<span class="value"> middle</span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="function">url</span>(icon/check.png) no-repeat</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> inline-block</span></span>;
}</span>
<span class="class">.hidden</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
}</span>
</code></pre><p>对于检测，可以写一个检测工具类</p>
<pre><code><span class="comment">//表单检测工具包</span>
<span class="keyword">var</span> CheckUtil = {
    <span class="comment">//获取字符串长度</span>
    getLength : <span class="function"><span class="keyword">function</span><span class="params">(str)</span></span>{
        <span class="keyword">var</span> strLen = <span class="number">0</span>;
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=str.length;i&lt;len;i++){
            <span class="keyword">var</span> <span class="keyword">char</span> = str.charCodeAt(i);
            <span class="keyword">if</span>(<span class="keyword">char</span> &gt;=<span class="number">0</span> &amp;&amp; <span class="keyword">char</span> &lt;= <span class="number">128</span>){
                strLen += <span class="number">1</span>;
            }<span class="keyword">else</span>{
                strLen += <span class="number">2</span>;
            }
        }
        <span class="keyword">return</span> strLen;
    },
    <span class="comment">//检测用户名</span>
    checkName : <span class="function"><span class="keyword">function</span><span class="params">(input)</span></span>{
        <span class="keyword">var</span> <span class="keyword">parent</span> = input.parentNode;
        <span class="keyword">var</span> value = input.value;
        <span class="keyword">var</span> len = CheckUtil.getLength(value);
        <span class="keyword">if</span>(len &gt;=<span class="number">4</span> &amp;&amp; len &lt;=<span class="number">16</span>){
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }
    },
    <span class="comment">//检测密码</span>
    checkPwd : <span class="function"><span class="keyword">function</span><span class="params">(input)</span></span>{
        <span class="keyword">var</span> <span class="keyword">parent</span> = input.parentNode;
        <span class="keyword">var</span> value = input.value;
        <span class="keyword">var</span> len = CheckUtil.getLength(value);
        <span class="keyword">var</span> ns = get_nextsibling(<span class="keyword">parent</span>);
        <span class="keyword">var</span> nsValue = ns.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>].value;
        <span class="keyword">if</span>(value !== nsValue){
            console.log(ns);
            ns.querySelector(<span class="string">".checkErr"</span>).classList.remove(<span class="string">"hidden"</span>);
        }
        <span class="keyword">if</span>(len &gt;= <span class="number">6</span> &amp;&amp; len &lt;=<span class="number">16</span>){
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }
        <span class="function"><span class="keyword">function</span> <span class="title">get_nextsibling</span><span class="params">(n)</span></span>{
            <span class="keyword">var</span> x=n.nextSibling;
            <span class="keyword">while</span> (x.nodeType!=<span class="number">1</span>){
                x=x.nextSibling;
            }
            <span class="keyword">return</span> x;
        }
    },
    <span class="comment">//确认密码</span>
    confirmPwd : <span class="function"><span class="keyword">function</span><span class="params">(input)</span></span>{
        <span class="keyword">var</span> <span class="keyword">parent</span> = input.parentNode;
        <span class="keyword">var</span> value = input.value;
        <span class="keyword">var</span> ps = get_previoussibling(<span class="keyword">parent</span>);
        <span class="keyword">var</span> psValue = ps.getElementsByTagName(<span class="string">"input"</span>)[<span class="number">0</span>].value;
        <span class="keyword">if</span>((value !== psValue) || (value == <span class="string">""</span>)){
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }

        <span class="function"><span class="keyword">function</span> <span class="title">get_previoussibling</span><span class="params">(n)</span></span>{
            <span class="keyword">var</span> x=n.previousSibling;
            <span class="keyword">while</span> (x.nodeType!=<span class="number">1</span>){
                x=x.previousSibling;
            }
            <span class="keyword">return</span> x;
        }
    },
    <span class="comment">//检测email</span>
    checkMail : <span class="function"><span class="keyword">function</span><span class="params">(input)</span></span>{
        <span class="keyword">var</span> email = input.value.replace(/^\s+|\s+$/g,<span class="string">""</span>).toLowerCase();<span class="comment">//去除前后空格并转小写</span>
        <span class="keyword">var</span> reg=/^[a-z0-<span class="number">9</span>](\w|\.|-)*@([a-z0-<span class="number">9</span>]+-?[a-z0-<span class="number">9</span>]+\.){<span class="number">1</span>,<span class="number">3</span>}[a-z]{<span class="number">2</span>,<span class="number">4</span>}$/i;
        <span class="keyword">if</span>(email.match(reg) == <span class="keyword">null</span>){
            <span class="keyword">return</span> <span class="keyword">false</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">true</span>;
        }
    },
    <span class="comment">//检测手机号码</span>
    checkTel : <span class="function"><span class="keyword">function</span><span class="params">(input)</span></span>{
        <span class="keyword">var</span> phone = input.value;
        <span class="keyword">if</span>(!(/^<span class="number">1</span>[<span class="number">34578</span>]\d{<span class="number">9</span>}$/.test(phone))){ 
            <span class="keyword">return</span> <span class="keyword">false</span>; 
        }<span class="keyword">else</span>{
            <span class="keyword">return</span> <span class="keyword">true</span>;
        } 
    },
}
</code></pre><p>然后隐藏所有的提示</p>
<pre><code><span class="comment">//span初始化</span>
<span class="function"><span class="keyword">function</span> <span class="title">initSpan</span><span class="params">(node)</span>{</span>
    var spans = node.getElementsByTagName<span class="params">(<span class="string">"span"</span>)</span>;
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>,len=spans.length;i&lt;len;i++)</span>{
        spans[i].classList.add<span class="params">(<span class="string">"hidden"</span>)</span>;
    }
    var input = node.getElementsByTagName<span class="params">(<span class="string">"input"</span>)</span>[<span class="number">0</span>];
    input.classList.remove<span class="params">(<span class="string">"inputErr"</span>)</span>;
}
<span class="comment">//隐藏所有span</span>
initSpan<span class="params">($<span class="params">(<span class="string">"register"</span>)</span>)</span>;
</code></pre><p>并且为input添加focus和blur事件</p>
<pre><code>//input添加事件
<span class="keyword">var</span> inputs = $(<span class="string">"register"</span>).getElementsByTagName(<span class="string">"input"</span>);
<span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=inputs.length;i&lt;len;i++){
    //获得焦点时清除内容并且显示提示
    addHandler(inputs[i],<span class="string">"focus"</span>,function(e){
        e.target.value = <span class="string">""</span>;
        <span class="keyword">var</span> parent = e.target.parentNode;
        initSpan(parent);
        <span class="keyword">var</span> prompt = parent.querySelector(<span class="string">".prompt"</span>);
        prompt.classList.remove(<span class="string">"hidden"</span>);
    });
    //失去焦点时检测并提示
    addHandler(inputs[i],<span class="string">"blur"</span>,function(e){
        <span class="keyword">var</span> input = e.target;
        check(input);
    });
}
function check(input){
    <span class="keyword">var</span> parent = input.parentNode;
    <span class="keyword">var</span> <span class="literal">result</span> = null;
    initSpan(parent);
    switch(parent.id){
        <span class="keyword">case</span> <span class="string">"userName"</span>:<span class="literal">result</span> = <span class="type">CheckUtil</span>.checkName(input);<span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"pwd"</span>:<span class="literal">result</span> = <span class="type">CheckUtil</span>.checkPwd(input);<span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"confirmPwd"</span>:<span class="literal">result</span> = <span class="type">CheckUtil</span>.confirmPwd(input);<span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"email"</span>:<span class="literal">result</span> = <span class="type">CheckUtil</span>.checkMail(input);<span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">"tel"</span>:<span class="literal">result</span> = <span class="type">CheckUtil</span>.checkTel(input);<span class="keyword">break</span>;
    }
    <span class="keyword">if</span>(<span class="literal">result</span>){
        parent.querySelector(<span class="string">".checkSucc"</span>).classList.remove(<span class="string">"hidden"</span>);
    }<span class="keyword">else</span>{
        input.classList.add(<span class="string">"inputErr"</span>);
        parent.querySelector(<span class="string">".checkErr"</span>).classList.remove(<span class="string">"hidden"</span>);
    }
}
</code></pre><p>最后给button添加检测事件</p>
<pre><code>//提交按钮
addHandler($(<span class="string">"submitBtn"</span>),<span class="string">"click"</span>,function(){
    checkAll();
});
function checkAll(){
    <span class="keyword">var</span> inputs = $(<span class="string">"register"</span>).getElementsByTagName(<span class="string">"input"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=inputs.length;i&lt;len;i++){
        <span class="keyword">var</span> parent = inputs[i].parentNode;
        <span class="keyword">var</span> <span class="literal">result</span> = <span class="literal">true</span>;
        initSpan(parent);
        switch(parent.id){
            <span class="keyword">case</span> <span class="string">"userName"</span>:<span class="literal">result</span> = <span class="literal">result</span> &amp; <span class="type">CheckUtil</span>.checkName(inputs[i]);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"pwd"</span>:<span class="literal">result</span> = <span class="literal">result</span> &amp; <span class="type">CheckUtil</span>.checkPwd(inputs[i]);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"confirmPwd"</span>:<span class="literal">result</span> = <span class="literal">result</span> &amp; <span class="type">CheckUtil</span>.confirmPwd(inputs[i]);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"email"</span>:<span class="literal">result</span> = <span class="literal">result</span> &amp; <span class="type">CheckUtil</span>.checkMail(inputs[i]);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"tel"</span>:<span class="literal">result</span> = <span class="literal">result</span> &amp; <span class="type">CheckUtil</span>.checkTel(inputs[i]);<span class="keyword">break</span>;
        }
    }
    <span class="keyword">if</span>(<span class="literal">result</span>){
        alert(<span class="string">"成功"</span>);
    }<span class="keyword">else</span>{
        alert(<span class="string">"失败"</span>);
    }
}
</code></pre><blockquote>
<p>突然想起高中时代玩的网游aion，逛逛天族的风景 看看贝鲁斯兰的雪 听听幻影神圣所的静谧音乐</p>
</blockquote>
<hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task30.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task30.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>加强对JavaScript的掌握</li>
<li>熟悉常用表单处理逻辑</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中添加多个表单</li>
<li>要求:</li>
<li>表单获得焦点时，下方显示表单填写规则</li>
<li>表单失去焦点时校验表单内容</li>
<li>校验结果正确时，表单边框显示绿色，并在下方显示验证通过的描述文字</li>
<li>校验结果错误时，表单边框显示红色，并在下方显示验证错误的描述文字</li>
<li>点击提交按钮时，对页面中所有输入进行校验，校验结果显示方式同上。若所有表单校验通过，弹窗显示“提交成功”，否则显示“提交失败”</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 15]]></title>
    <link href="http://blog.supce.com/2016/11/27/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8022/"/>
    <id>http://blog.supce.com/2016/11/27/JavaScript之基础22/</id>
    <published>2016-11-26T16:00:00.000Z</published>
    <updated>2016-11-27T02:19:35.909Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript面向对象设计</li>
<li>实践一些基础的设计模式</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上一任务，我们继续改善</li>
<li>第二代宇宙飞船系统进步了很多，但是我们依然无法知道飞船的能源消耗情况，可能有的时候我们发出开始飞行的指令，但飞船早就没有能量了，所以我们再次进行升级，这次我们需要增加一个飞船状态的监视系统</li>
<li>我们为每个飞船增加一个信号发射器，飞船会通过BUS系统定时（比如每秒）广播自己的飞行状态。发送的时候，我们通过已经安装在飞船上的Adapter把状态数据翻译成二进制码形式，把飞船自身标示，飞行状态，能量编码成一个16位的二进制串，前四位用于飞船自身标示，接下来4位表示飞行状态，0010为停止，0001为飞行，1100表示即将销毁，后八位用于记录飞船剩余能源百分比</li>
<li>行星上有一个信号接收器，用于通过BUS系统接受各个飞船发送过来的信号</li>
<li>当信号接收器接收到飞船信号后，会把信息传给数据处理中心（DC），数据处理中心依然是调用Adapter模块，把这些二进制数据转为对象格式存储在DC中</li>
<li>实现一个行星上的监视大屏幕，用来显示所有飞船的飞行状态及能源情况，当数据处理中心飞船数据发生变化时，它会相应在监视器上做出变化</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>由于任务越来越多，这次把类重新聚合一下。</p>
<p>行星到宇宙飞船的信号是通过BUS传输的，利用单例模式实现一个BUS类，BUS类有一个接收信号的方法，该方法带有两个参数，一个参数是传输的信号，另一个表示端口号用于区别信号是从行星发往飞船还是飞船发往行星。</p>
<pre><code><span class="comment">//BUS 单例</span>
<span class="function"><span class="keyword">function</span> <span class="title">Bus</span><span class="params">()</span>{</span>
    var instance = this;
    Bus = <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        return instance;
    };
}
Bus.prototype = {
    <span class="comment">//port为1时表示从行星发往太空，port为2时表示从太空发往行星</span>
    receive : <span class="function"><span class="keyword">function</span><span class="params">(order,port)</span>{</span>
        <span class="keyword">if</span><span class="params">(port == <span class="string">"1"</span>)</span>{
            var timer = null;
            timer = setInterval<span class="params">(run,<span class="number">300</span>)</span>;
            <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
                var num = Math.<span class="built_in">floor</span><span class="params">(Math.random<span class="params">()</span>*<span class="number">10</span>+<span class="number">1</span>)</span>;
                <span class="keyword">if</span><span class="params">(num &gt; <span class="number">1</span>)</span>{
                    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;crafts.length;i++)</span>{
                        <span class="comment">// crafts[i].receiveCommond(order);</span>
                        crafts[i].Mediator.receive<span class="params">(order)</span>;
                    }
                    clearInterval<span class="params">(timer)</span>;
                }<span class="keyword">else</span>{
                    msgControl<span class="params">(<span class="string">"信息传递失败！正在重试，fight だよ！"</span>)</span>;
                }
            }
        }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(port == <span class="string">"2"</span>)</span>{
            <span class="comment">//得到行星上的信号收发器</span>
            var mediator = new Mediator<span class="params">()</span>;
            mediator.receive<span class="params">(order)</span>;
        }<span class="keyword">else</span>{
            msgControl<span class="params">(<span class="string">"该端口暂时还未开放"</span>)</span>;
        }
    }
}
</code></pre><p>在行星上有一个信号收发器，可以向飞船发送信息以及接收从飞船传递来的信息。在信号收发器上有一个信号适配器，用于对信号进行编码和解码，收发器收到信号后会对信号进行解码，然后传递给DC(数据控制中心)。</p>
<pre><code><span class="comment">//行星信号收发器</span>
<span class="function"><span class="keyword">function</span> <span class="title">Mediator</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> instance = <span class="keyword">this</span>;
    Mediator = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> instance;
    };
    <span class="comment">//收发器上的信号适配器</span>
    <span class="keyword">this</span>.Adapter = {
        <span class="comment">//信号编码器</span>
        encode : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
            <span class="keyword">var</span> str = <span class="string">""</span>;
            <span class="keyword">var</span> id = commond.id;
            <span class="keyword">var</span> order = commond.commond;
            <span class="keyword">switch</span>(id){
                <span class="keyword">case</span> <span class="string">'0'</span>:str += <span class="string">"00"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'1'</span>:str += <span class="string">"01"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'2'</span>:str += <span class="string">"10"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'3'</span>:str += <span class="string">"11"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(order){
                <span class="keyword">case</span> <span class="string">'start'</span>:str += <span class="string">"0001"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'stop'</span>:str += <span class="string">"0010"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'destroy'</span>:str += <span class="string">"1100"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">return</span> str;
        },
        <span class="comment">//信号解码器</span>
        decode : <span class="function"><span class="keyword">function</span>(<span class="params">signal</span>)</span>{
            <span class="keyword">var</span> id,engine,supply,state,power;
            <span class="keyword">switch</span>(signal.substring(<span class="number">0</span>,<span class="number">3</span>)){
                <span class="keyword">case</span> <span class="string">'000'</span>:id = <span class="string">"1"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'001'</span>:id = <span class="string">"2"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'010'</span>:id = <span class="string">"3"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'011'</span>:id = <span class="string">"4"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(signal.substring(<span class="number">3</span>,<span class="number">6</span>)){
                <span class="keyword">case</span> <span class="string">'000'</span>:engine = <span class="string">"用恨飞行"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'001'</span>:engine = <span class="string">"手摇飞行"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'010'</span>:engine = <span class="string">"电能飞行"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'011'</span>:engine = <span class="string">"核能飞行"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(signal.substring(<span class="number">6</span>,<span class="number">9</span>)){
                <span class="keyword">case</span> <span class="string">'000'</span>:supply = <span class="string">"用爱充能"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'001'</span>:supply = <span class="string">"手摇充能"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'010'</span>:supply = <span class="string">"燃料充能"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'011'</span>:supply = <span class="string">"核变充能"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(signal.substring(<span class="number">9</span>,<span class="number">13</span>)){
                <span class="keyword">case</span> <span class="string">'0001'</span>:state = <span class="string">"飞行"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'0010'</span>:state = <span class="string">"暂停"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'1100'</span>:state = <span class="string">"销毁"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'1111'</span>:state = <span class="string">"充能"</span>;<span class="keyword">break</span>;
            }
            power = <span class="built_in">parseInt</span>(signal.substring(<span class="number">13</span>));
            <span class="keyword">return</span> {
                id : id,
                engine : engine,
                supply : supply,
                state : state,
                power : power
            };
        }
    }
}
Mediator.prototype = {
    sendCommond : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
        <span class="keyword">var</span> commond = <span class="keyword">this</span>.Adapter.encode(commond);
        <span class="keyword">var</span> bus = <span class="keyword">new</span> Bus();
        bus.receive(commond,<span class="number">1</span>);
    },
    receive : <span class="function"><span class="keyword">function</span>(<span class="params">signal</span>)</span>{
        <span class="keyword">var</span> signal = <span class="keyword">this</span>.Adapter.decode(signal);
        <span class="comment">// console.log(signal);</span>
        <span class="keyword">var</span> dc = <span class="keyword">new</span> DC();
        dc.receive(signal);
    }
}
</code></pre><p>飞船升级后，在飞船上配备了信号收发器和信号适配器。能够通过BUS接收从行星发射的命令和向行星发送当前飞船的状态。</p>
<pre><code><span class="comment">//飞船类</span>
<span class="function"><span class="keyword">function</span> <span class="title">Craft</span>(<span class="params">id,engine,supply</span>)</span>{
    <span class="comment">//飞船id</span>
    <span class="keyword">this</span>.id = id;
    <span class="comment">//飞船引擎控制飞船速度</span>
    <span class="keyword">this</span>.engine = engine;
    <span class="comment">//飞船供能系统控制能量恢复速度</span>
    <span class="keyword">this</span>.supply = supply;
    <span class="comment">//飞船能量</span>
    <span class="keyword">this</span>.power = <span class="number">100</span>;
    <span class="comment">//飞船是否正在飞行</span>
    <span class="keyword">this</span>.state = <span class="string">"stop"</span>;
    <span class="comment">//控制飞船动力系统</span>
    <span class="keyword">this</span>.timer = <span class="literal">null</span>;
    <span class="comment">//飞船上的信号收发器</span>
    <span class="keyword">this</span>.Mediator = {
        <span class="comment">//接收从bus传入的信息</span>
        receive : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
            <span class="keyword">var</span> commond = <span class="keyword">this</span>.Adapter.decode(commond);
            <span class="keyword">if</span>(commond.id == <span class="keyword">this</span>.id){
                order = commond.commond;
                <span class="keyword">switch</span>(order){
                    <span class="keyword">case</span> <span class="string">'start'</span>:
                        msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                        <span class="keyword">this</span>.powerConsume();
                        <span class="keyword">this</span>.state = <span class="string">"start"</span>;
                        <span class="keyword">this</span>.start();
                        <span class="keyword">break</span>;
                    <span class="keyword">case</span> <span class="string">'stop'</span>:
                        msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                        <span class="keyword">this</span>.powerAdd();
                        <span class="keyword">this</span>.state = <span class="string">"stop"</span>;
                        <span class="keyword">this</span>.stop();
                        <span class="keyword">break</span>;
                    <span class="keyword">case</span> <span class="string">'destroy'</span>:
                        msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                        <span class="keyword">this</span>.destroy();
                        <span class="keyword">break</span>;
                }
            }
        }.bind(<span class="keyword">this</span>),
        <span class="comment">//向bus传送信息</span>
        send : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
            <span class="keyword">var</span> _this = <span class="keyword">this</span>;
            <span class="keyword">var</span> msg = {
                id : _this.id,
                engine : _this.engine,
                supply : _this.supply,
                state : _this.state,
                power : _this.power
            }
            <span class="keyword">var</span> signal = <span class="keyword">this</span>.Adapter.encode(msg);
            <span class="keyword">var</span> bus = <span class="keyword">new</span> Bus();
            <span class="comment">//从端口2发往行星</span>
            bus.receive(signal,<span class="number">2</span>);
        }.bind(<span class="keyword">this</span>)
    };
    <span class="comment">//飞船上的信号适配器</span>
    <span class="keyword">this</span>.Adapter = {
        <span class="comment">//对于收到的信息进行解码</span>
        decode : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
            <span class="keyword">var</span> str_id = <span class="string">""</span>,str_order = <span class="string">""</span>;
            <span class="keyword">switch</span>(commond.substring(<span class="number">0</span>,<span class="number">2</span>)){
                <span class="keyword">case</span> <span class="string">'00'</span>:
                    str_id = <span class="number">0</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'01'</span>:
                    str_id = <span class="number">1</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'10'</span>:
                    str_id = <span class="number">2</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'11'</span>:
                    str_id = <span class="number">3</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(commond.substring(<span class="number">2</span>)){
                <span class="keyword">case</span> <span class="string">'0001'</span>:
                    str_order = <span class="string">"start"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'0010'</span>:
                    str_order = <span class="string">"stop"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'1100'</span>:
                    str_order = <span class="string">"destroy"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">return</span> {
                id : str_id,
                commond : str_order
            }
        },
        <span class="comment">//对于发送的信息进行编码</span>
        encode : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
            <span class="comment">//id engine supply power各占3位，state占4位 共16位</span>
            <span class="keyword">var</span> str = <span class="string">""</span>;
            <span class="keyword">var</span> id=commond.id,engine=commond.engine,supply=commond.supply,
                state=commond.state,power=commond.power;
            <span class="keyword">switch</span>(id){
                <span class="keyword">case</span> <span class="number">0</span>:str += <span class="string">"000"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="number">1</span>:str += <span class="string">"001"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="number">2</span>:str += <span class="string">"010"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="number">3</span>:str += <span class="string">"011"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(engine){
                <span class="keyword">case</span> <span class="string">'speed_one'</span>:str += <span class="string">"000"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'speed_two'</span>:str += <span class="string">"001"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'speed_three'</span>:str += <span class="string">"010"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'speed_four'</span>:str += <span class="string">"011"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(supply){
                <span class="keyword">case</span> <span class="string">'900'</span>:str += <span class="string">"000"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'600'</span>:str += <span class="string">"001"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'300'</span>:str += <span class="string">"010"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'100'</span>:str += <span class="string">"011"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">switch</span>(state){
                <span class="keyword">case</span> <span class="string">'start'</span>:str += <span class="string">"0001"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'stop'</span>:str += <span class="string">"0010"</span>;<span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'destroy'</span>:str += <span class="string">"1100"</span>;<span class="keyword">break</span>;
                <span class="comment">//能量用完后暂停飞行开始充能</span>
                <span class="keyword">case</span> <span class="string">'charge'</span>:str += <span class="string">"1111"</span>;<span class="keyword">break</span>;
            }
            <span class="keyword">if</span>(<span class="number">0</span>&lt; power &lt;<span class="number">100</span>){
                power = <span class="string">"0"</span> + power;
                str += power;
            }<span class="keyword">else</span> <span class="keyword">if</span>(power == <span class="number">100</span>){
                str += <span class="string">"100"</span>;
            }<span class="keyword">else</span> <span class="keyword">if</span>(power == <span class="number">0</span>){
                str += <span class="string">"000"</span>;
            }
            <span class="keyword">return</span> str;
        }
    }
}
Craft.prototype = {
    constructor: Craft,
    start : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"Nozomi power注入! 嗨~ 噗咻!"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船已经起飞"</span>);
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.add(<span class="string">"craft_start"</span>);
        craftImg.classList.add(<span class="keyword">this</span>.engine);
        <span class="keyword">this</span>.Mediator.send();
    },
    stop : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"sa si su se so！"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船停止飞行"</span>);
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.remove(<span class="string">"craft_start"</span>); 
        <span class="keyword">this</span>.Mediator.send();
    },
    destroy : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"dame! dame!"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船被销毁了"</span>);
        <span class="comment">//先停止再销毁</span>
        <span class="keyword">var</span> id = <span class="keyword">this</span>.id;
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[id]);
        craftImg.classList.remove(<span class="string">"craft_start"</span>);
        clearInterval(<span class="keyword">this</span>.timer);
        <span class="comment">//销毁飞船</span>
        craftImg.classList.remove(<span class="keyword">this</span>.engine);
        craftImg.classList.remove(<span class="string">"craft_create"</span>);
        <span class="keyword">this</span>.state = <span class="string">"destroy"</span>;
        <span class="keyword">this</span>.power = <span class="number">0</span>;
        <span class="keyword">this</span>.Mediator.send();
        <span class="comment">//销毁控制板</span>
        <span class="built_in">document</span>.getElementById(id).classList.add(<span class="string">"li_hidden"</span>);
        <span class="comment">//将飞船从轨道撤下</span>
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=crafts.length;i&lt;len;i++){
            <span class="keyword">if</span>(crafts[i].id == id){
                crafts.splice(i,<span class="number">1</span>);
                <span class="keyword">break</span>;
            }
        }
    },
    powerConsume : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> speedMap = {
            speed_one : <span class="number">900</span>,
            speed_two : <span class="number">600</span>,
            speed_three : <span class="number">300</span>,
            speed_four : <span class="number">100</span> 
        };
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">if</span>(<span class="keyword">this</span>.timer){
            clearInterval(<span class="keyword">this</span>.timer);
        }
        <span class="keyword">this</span>.timer = setInterval(run,speedMap[<span class="keyword">this</span>.engine]);
        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{
            <span class="keyword">if</span>(_this.power&gt;<span class="number">0</span>){
                _this.power = _this.power - <span class="number">1</span>;
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[_this.id]);
                craftImg.innerHTML = _this.power + <span class="string">"%"</span>;
            }<span class="keyword">else</span>{
                _this.stop();
                _this.state = <span class="string">"charge"</span>;
                clearInterval(_this.timer);
                _this.powerAdd();
            }
            _this.Mediator.send();
        }
    },
    powerAdd : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">if</span>(<span class="keyword">this</span>.timer){
            clearInterval(<span class="keyword">this</span>.timer);
        }
        <span class="keyword">this</span>.timer = setInterval(run,<span class="built_in">parseInt</span>(<span class="keyword">this</span>.supply));
        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{
            <span class="keyword">if</span>(_this.power&lt;<span class="number">100</span>){
                _this.power = _this.power + <span class="number">1</span>;
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[_this.id]);
                craftImg.innerHTML = _this.power + <span class="string">"%"</span>;
            }<span class="keyword">else</span>{
                <span class="keyword">if</span>(_this.state == <span class="string">"charge"</span>){
                    _this.start();
                    _this.state = <span class="string">"start"</span>;
                    clearInterval(_this.timer);
                    _this.powerConsume();
                }<span class="keyword">else</span>{
                    clearInterval(_this.timer);
                }
            }
            _this.Mediator.send();
        }
    },
}
</code></pre><p>最后还需要增加一个DC，将飞船发送过来的信息展现在大屏幕上。</p>
<pre><code><span class="comment">//行星DC</span>
<span class="function"><span class="keyword">function</span> <span class="title">DC</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> instance = <span class="keyword">this</span>;
    DC = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">return</span> instance;
    };
}
DC.prototype = {
    receive : <span class="function"><span class="keyword">function</span>(<span class="params">signal</span>)</span>{
        <span class="comment">//console.log(signal);</span>
        <span class="keyword">var</span> screen;
        <span class="keyword">switch</span>(signal.id){
            <span class="keyword">case</span> <span class="string">"1"</span>:screen=$(<span class="string">"screen_one"</span>);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"2"</span>:screen=$(<span class="string">"screen_two"</span>);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"3"</span>:screen=$(<span class="string">"screen_three"</span>);<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">"4"</span>:screen=$(<span class="string">"screen_four"</span>);<span class="keyword">break</span>;
        }
        screen.innerHTML = <span class="string">"&lt;td&gt;飞船"</span>+signal.id+<span class="string">"号&lt;/td&gt;"</span>+<span class="string">"&lt;td&gt;"</span>+signal.engine+<span class="string">"&lt;/td&gt;"</span>+<span class="string">"&lt;td&gt;"</span>+signal.supply+<span class="string">"&lt;/td&gt;"</span>
        +<span class="string">"&lt;td&gt;"</span>+signal.state+<span class="string">"&lt;/td&gt;"</span>+<span class="string">"&lt;td&gt;"</span>+signal.power+<span class="string">"&lt;/td&gt;"</span>;
    }
}
</code></pre><p>是时候展现我的画伯技术了</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/craft.png" alt=""></p>
<hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/js/task28.js" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task28.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript面向对象设计</li>
<li>实践一些基础的设计模式</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上一任务，我们继续改善</li>
<li>第二代宇宙飞船系统进步了很多，但是我们依然无法知道飞船的能源消耗情况，可能有的时候我们发出开始飞行的指令，但飞船早就没有能量了，所以我们再次进行升级，这次我们需要增加一个飞船状态的监视系统</li>
<li>我们为每个飞船增加一个信号发射器，飞船会通过BUS系统定时（比如每秒）广播自己的飞行状态。发送的时候，我们通过已经安装在飞船上的Adapter把状态数据翻译成二进制码形式，把飞船自身标示，飞行状态，能量编码成一个16位的二进制串，前四位用于飞船自身标示，接下来4位表示飞行状态，0010为停止，0001为飞行，1100表示即将销毁，后八位用于记录飞船剩余能源百分比</li>
<li>行星上有一个信号接收器，用于通过BUS系统接受各个飞船发送过来的信号</li>
<li>当信号接收器接收到飞船信号后，会把信息传给数据处理中心（DC），数据处理中心依然是调用Adapter模块，把这些二进制数据转为对象格式存储在DC中</li>
<li>实现一个行星上的监视大屏幕，用来显示所有飞船的飞行状态及能源情况，当数据处理中心飞船数据发生变化时，它会相应在监视器上做出变化</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 14]]></title>
    <link href="http://blog.supce.com/2016/11/23/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8021/"/>
    <id>http://blog.supce.com/2016/11/23/JavaScript之基础21/</id>
    <published>2016-11-22T16:00:00.000Z</published>
    <updated>2016-11-23T08:51:25.312Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript面向对象设计</li>
<li>实践一些基础的设计模式</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，我们继续改善我们的任务</li>
<li>第一代宇宙飞船系统真是糟糕的实现，所以我们需要进行改进飞船自身，我们在几个部件进行了更多的组合可能性，在创建新飞船时可以自行选择</li>
<li>我们新增了几种动力系统，能够让飞船飞得更快，相应的能源消耗也会不同</li>
<li>我们新增了集中能源系统，能够让飞船能量补充能源速度越快</li>
<li>接下来改进的是指令的传播问题</li>
<li>我们发明了新一代的传播介质BUS，它的单次传播失败率降低到10%，传播速度提升到300ms，而且他增加了多次重试的功能，可以保证信息一定能够传递出去，请你实现这个可以通过多次重试保证在10%丢包率情况下顺利将信息传递出去的BUS传播介质</li>
<li>但BUS有个弱点，就是无法直接传递JSON格式，它只能传递二进制码，但指挥官并不能够直接下达二进制编码指令，所以我们需要在行星上的发射器部分增加一个模块Adapter，把原来的指令格式翻译成二进制码。同时还需要在飞船的接收器部分增加一个Adapter，用来把二进制码翻译成原来能够理解的指令格式</li>
<li>二进制码格式自定，可以参考的例子：前四位标示飞船编号，后四位标示具体指令（0001：开始飞行，0010：停止飞行，1100：自我销毁）</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>由于飞船能够设置飞行速度和能量恢复速度。所以在原来代码的基础上添加两个select</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"panel_base"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">id</span>=<span class="value">"panel_title"</span>&gt;</span>飞船操控板<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"info_label"</span>&gt;</span>飞船速度:<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selEngine"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"speed_one"</span>&gt;</span>用恨飞行<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"speed_two"</span>&gt;</span>手摇飞行<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"speed_three"</span>&gt;</span>电能飞行<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"speed_four"</span>&gt;</span>核能飞行<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="tag">&lt;<span class="title">label</span> <span class="attribute">class</span>=<span class="value">"info_label"</span>&gt;</span>充能速度:<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
    <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"selSupply"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"900"</span>&gt;</span>用爱充能<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"600"</span>&gt;</span>手摇充能<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"300"</span>&gt;</span>燃料充能<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
        <span class="tag">&lt;<span class="title">option</span> <span class="attribute">value</span>=<span class="value">"100"</span>&gt;</span>核变充能<span class="tag">&lt;/<span class="title">option</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
    <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"craft_creat"</span>&gt;</span>增加新飞船<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后将原来的CSS代码重新分类，设置不同的飞行速度</p>
<pre><code><span class="class">.speed_one</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">32s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">animation-play-state</span>:<span class="value">paused</span></span>;
}</span>
<span class="class">.speed_two</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">24s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">animation-play-state</span>:<span class="value">paused</span></span>;
}</span>
<span class="class">.speed_three</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">16s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">animation-play-state</span>:<span class="value">paused</span></span>;
}</span>
<span class="class">.speed_four</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">8s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">animation-play-state</span>:<span class="value">paused</span></span>;
}</span>
</code></pre><p>重新修改飞船类代码，添加飞船引擎属性和飞船动力恢复系统属性，并且重新修改原来的若干方法。</p>
<pre><code><span class="comment">//飞船类</span>
<span class="function"><span class="keyword">function</span> <span class="title">Craft</span>(<span class="params">id,engine,supply</span>)</span>{
    <span class="comment">//飞船id</span>
    <span class="keyword">this</span>.id = id;
    <span class="comment">//飞船引擎控制飞船速度</span>
    <span class="keyword">this</span>.engine = engine;
    <span class="comment">//飞船供能系统控制能量恢复速度</span>
    <span class="keyword">this</span>.supply = supply;
    <span class="comment">//飞船能量</span>
    <span class="keyword">this</span>.power = <span class="number">100</span>;
    <span class="comment">//飞船是否正在飞行</span>
    <span class="keyword">this</span>.state = <span class="string">"stop"</span>;
    <span class="comment">//控制飞船动力系统</span>
    <span class="keyword">this</span>.timer = <span class="literal">null</span>;
}
Craft.prototype = {
    constructor: Craft,
    receiveCommond : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
        <span class="keyword">var</span> adapter = <span class="keyword">new</span> Adapter();
        <span class="keyword">var</span> commond = adapter.decode(commond);
        <span class="keyword">if</span>(commond.id == <span class="keyword">this</span>.id){
            order = commond.commond;
            <span class="keyword">switch</span>(order){
                <span class="keyword">case</span> <span class="string">'start'</span>:
                    msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                    <span class="keyword">this</span>.powerConsume();
                    <span class="keyword">this</span>.state = <span class="string">"start"</span>;
                    <span class="keyword">this</span>.start();
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'stop'</span>:
                    msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                    <span class="keyword">this</span>.powerAdd();
                    <span class="keyword">this</span>.state = <span class="string">"stop"</span>;
                    <span class="keyword">this</span>.stop();
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'destroy'</span>:
                    msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                    <span class="keyword">this</span>.destroy();
                    <span class="keyword">break</span>;
            }
        }
    },
    start : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"Nozomi power注入! 嗨~ 噗咻!"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船已经起飞"</span>);
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.add(<span class="string">"craft_start"</span>);
        craftImg.classList.add(<span class="keyword">this</span>.engine);
    },
    stop : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"sa si su se so！"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船停止飞行"</span>);
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.remove(<span class="string">"craft_start"</span>); 
    },
    destroy : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"dame! dame!"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船被销毁了"</span>);
        <span class="comment">//先停止再销毁</span>
        <span class="keyword">var</span> id = <span class="keyword">this</span>.id;
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[id]);
        craftImg.classList.remove(<span class="string">"craft_start"</span>);
        clearInterval(<span class="keyword">this</span>.timer);
        <span class="comment">//销毁飞船</span>
        craftImg.classList.remove(<span class="keyword">this</span>.engine);
        craftImg.classList.remove(<span class="string">"craft_create"</span>);
        <span class="comment">//销毁控制板</span>
        <span class="built_in">document</span>.getElementById(id).classList.add(<span class="string">"li_hidden"</span>);
        <span class="comment">//将飞船从轨道撤下</span>
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=crafts.length;i&lt;len;i++){
            <span class="keyword">if</span>(crafts[i].id == id){
                crafts.splice(i,<span class="number">1</span>);
                <span class="keyword">break</span>;
            }
        }
    },
    powerConsume : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> speedMap = {
            speed_one : <span class="number">900</span>,
            speed_two : <span class="number">600</span>,
            speed_three : <span class="number">300</span>,
            speed_four : <span class="number">100</span> 
        };
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">if</span>(<span class="keyword">this</span>.timer){
            clearInterval(<span class="keyword">this</span>.timer);
        }
        <span class="keyword">this</span>.timer = setInterval(run,speedMap[<span class="keyword">this</span>.engine]);
        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{
            <span class="keyword">if</span>(_this.power&gt;<span class="number">0</span>){
                _this.power = _this.power - <span class="number">1</span>;
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[_this.id]);
                craftImg.innerHTML = _this.power + <span class="string">"%"</span>;
            }<span class="keyword">else</span>{
                _this.stop();
                _this.state = <span class="string">"charge"</span>;
                clearInterval(_this.timer);
                _this.powerAdd();
            }
        }
    },
    powerAdd : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">if</span>(<span class="keyword">this</span>.timer){
            clearInterval(<span class="keyword">this</span>.timer);
        }
        <span class="keyword">this</span>.timer = setInterval(run,<span class="built_in">parseInt</span>(<span class="keyword">this</span>.supply));
        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{
            <span class="keyword">if</span>(_this.power&lt;<span class="number">100</span>){
                _this.power = _this.power + <span class="number">1</span>;
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[_this.id]);
                craftImg.innerHTML = _this.power + <span class="string">"%"</span>;
            }<span class="keyword">else</span>{
                <span class="keyword">if</span>(_this.state == <span class="string">"charge"</span>){
                    _this.start();
                    _this.state = <span class="string">"start"</span>;
                    clearInterval(_this.timer);
                    _this.powerConsume();
                }<span class="keyword">else</span>{
                    clearInterval(_this.timer);
                }
            }
        }
    }
}
</code></pre><p>然后我们添加一个飞船工厂，用于创建不同的飞船</p>
<pre><code><span class="comment">//飞船工厂</span>
<span class="function"><span class="keyword">function</span> <span class="title">CraftFactory</span><span class="params">()</span>{</span>
}
CraftFactory.prototype = {
    createCraft : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        <span class="comment">//查询是否存在空闲轨道</span>
        var path = $<span class="params">(<span class="string">"control_panel"</span>)</span>.querySelector<span class="params">(<span class="string">".li_hidden"</span>)</span>;
        <span class="keyword">if</span><span class="params">(path)</span>{
            var id = path.getAttribute<span class="params">(<span class="string">"id"</span>)</span>;
            var engine = $<span class="params">(<span class="string">"selEngine"</span>)</span>.options[$<span class="params">(<span class="string">"selEngine"</span>)</span>.selectedIndex].value;
            var supply = $<span class="params">(<span class="string">"selSupply"</span>)</span>.options[$<span class="params">(<span class="string">"selSupply"</span>)</span>.selectedIndex].value;
            console.<span class="built_in">log</span><span class="params">(id + engine + supply)</span>;
            crafts.push<span class="params">(new Craft<span class="params">(id, engine, supply)</span>)</span>;
            <span class="comment">//使飞船送达预定轨道</span>
            var craftImg = document.querySelector<span class="params">(<span class="string">"."</span> + craftsMap[id])</span>;
            craftImg.classList.add<span class="params">(<span class="string">"craft_create"</span>)</span>;
            craftImg.innerHTML = <span class="string">"100%"</span>;
            <span class="comment">//创建panel</span>
            path.classList.remove<span class="params">(<span class="string">"li_hidden"</span>)</span>;
            var btns = path.getElementsByTagName<span class="params">('button')</span>;
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>,len=btns.length;i&lt;len;i++)</span>{
                addHandler<span class="params">(btns[i],<span class="string">"click"</span>,function<span class="params">(e)</span>{
                    btnHandler<span class="params">(e)</span>;
                })</span>;
            }
            msgControl<span class="params">(<span class="string">"飞船"</span> + <span class="params">(id+<span class="number">1</span>)</span> + <span class="string">"号已到达预定轨道，请发送下个命令撒~"</span>)</span>;
        }<span class="keyword">else</span>{
            msgControl<span class="params">(<span class="string">"部署失败，不存在空闲轨道"</span>)</span>;
        }
    }
}
</code></pre><p>重新信号发射器，设置该发射器可以通过多次重试保证在10%丢包率情况下顺利将信息传递</p>
<pre><code><span class="comment">//信号发射器类</span>
<span class="function"><span class="keyword">function</span> <span class="title">Mediator</span><span class="params">()</span>{</span>
}
Mediator.prototype = {
    sendCommond : <span class="function"><span class="keyword">function</span><span class="params">(commond)</span>{</span>
        var timer = null;
        var adapter = new Adapter<span class="params">()</span>;
        var commond = adapter.encode<span class="params">(commond)</span>;
        timer = setInterval<span class="params">(run,<span class="number">300</span>)</span>;
        <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
            var num = Math.<span class="built_in">floor</span><span class="params">(Math.random<span class="params">()</span>*<span class="number">10</span>+<span class="number">1</span>)</span>;
            <span class="keyword">if</span><span class="params">(num &gt; <span class="number">1</span>)</span>{
                <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;crafts.length;i++)</span>{
                    crafts[i].receiveCommond<span class="params">(commond)</span>;
                }
                clearInterval<span class="params">(timer)</span>;
            }<span class="keyword">else</span>{
                msgControl<span class="params">(<span class="string">"信息传递失败！正在重试，fight だよ！"</span>)</span>;
            }
        }
    }
}
</code></pre><p>由于发送的数据格式发生变化，需要写一个适配器，用于编码和解码。</p>
<pre><code><span class="comment">//适配器</span>
<span class="function"><span class="keyword">function</span> <span class="title">Adapter</span><span class="params">()</span></span>{
}
Adapter.prototype = {
    <span class="comment">//编码器</span>
    encode : <span class="function"><span class="keyword">function</span><span class="params">(commond)</span></span>{
        <span class="keyword">var</span> str = <span class="string">""</span>;
        <span class="keyword">var</span> id = commond.id;
        <span class="keyword">var</span> order = commond.commond;
        <span class="keyword">switch</span>(id){
            <span class="keyword">case</span> <span class="string">'0'</span>:
                str += <span class="string">"00"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'1'</span>:
                str += <span class="string">"01"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'2'</span>:
                str += <span class="string">"10"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'3'</span>:
                str += <span class="string">"11"</span>;
                <span class="keyword">break</span>;
        }
        <span class="keyword">switch</span>(order){
            <span class="keyword">case</span> <span class="string">'start'</span>:
                str += <span class="string">"0001"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'stop'</span>:
                str += <span class="string">"0010"</span>;
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'destroy'</span>:
                str += <span class="string">"1100"</span>;
                <span class="keyword">break</span>;
        }
        <span class="keyword">return</span> str;
    },
    <span class="comment">//解码器</span>
    decode : <span class="function"><span class="keyword">function</span><span class="params">(commond)</span></span>{
        <span class="keyword">var</span> str_id = <span class="string">""</span>,str_order = <span class="string">""</span>;
        <span class="keyword">switch</span>(commond.substring(<span class="number">0</span>,<span class="number">2</span>)){
            <span class="keyword">case</span> <span class="string">'00'</span>:
                str_id = <span class="number">0</span>;<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'01'</span>:
                str_id = <span class="number">1</span>;<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'10'</span>:
                str_id = <span class="number">2</span>;<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'11'</span>:
                str_id = <span class="number">3</span>;<span class="keyword">break</span>;
        }
        <span class="keyword">switch</span>(commond.substring(<span class="number">2</span>)){
            <span class="keyword">case</span> <span class="string">'0001'</span>:
                str_order = <span class="string">"start"</span>;<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'0010'</span>:
                str_order = <span class="string">"stop"</span>;<span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'1100'</span>:
                str_order = <span class="string">"destroy"</span>;<span class="keyword">break</span>;
        }
        <span class="keyword">return</span> {
            id : str_id,
            commond : str_order
        }
    }
}   
</code></pre><p>OK much nicer！</p>
<hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/js/task27.js" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task27.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript面向对象设计</li>
<li>实践一些基础的设计模式</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，我们继续改善我们的任务</li>
<li>第一代宇宙飞船系统真是糟糕的实现，所以我们需要进行改进飞船自身，我们在几个部件进行了更多的组合可能性，在创建新飞船时可以自行选择</li>
<li>我们新增了几种动力系统，能够让飞船飞得更快，相应的能源消耗也会不同</li>
<li>我们新增了集中能源系统，能够让飞船能量补充能源速度越快</li>
<li>接下来改进的是指令的传播问题</li>
<li>我们发明了新一代的传播介质BUS，它的单次传播失败率降低到10%，传播速度提升到300ms，而且他增加了多次重试的功能，可以保证信息一定能够传递出去，请你实现这个可以通过多次重试保证在10%丢包率情况下顺利将信息传递出去的BUS传播介质</li>
<li>但BUS有个弱点，就是无法直接传递JSON格式，它只能传递二进制码，但指挥官并不能够直接下达二进制编码指令，所以我们需要在行星上的发射器部分增加一个模块Adapter，把原来的指令格式翻译成二进制码。同时还需要在飞船的接收器部分增加一个Adapter，用来把二进制码翻译成原来能够理解的指令格式</li>
<li>二进制码格式自定，可以参考的例子：前四位标示飞船编号，后四位标示具体指令（0001：开始飞行，0010：停止飞行，1100：自我销毁）</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 13]]></title>
    <link href="http://blog.supce.com/2016/11/21/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8020/"/>
    <id>http://blog.supce.com/2016/11/21/JavaScript之基础20/</id>
    <published>2016-11-20T16:00:00.000Z</published>
    <updated>2016-11-21T11:27:24.880Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript面向对象设计</li>
<li>实践一些基础的设计模式</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>创建一个虚拟宇宙，包括一个行星和飞船</li>
<li>每个飞船由以下部分组成</li>
<li>动力系统，可以完成飞行和停止飞行两个行为，暂定所有飞船的动力系统飞行速度是一致的，比如每秒20px，飞行过程中会按照一定速率消耗能源（比如每秒减5%）</li>
<li>能源系统，提供能源，并且在宇宙中通过太阳能充电（比如每秒增加2%，具体速率自定）<br>信号接收处理系统，用于接收行星上的信号</li>
<li>自爆系统，用于自我销毁</li>
<li>每个飞船的能源是有限的，用一个属性来表示能源剩余量，这是一个百分比，表示还剩余多少能源。</li>
</ul>
<a id="more"></a>
<ul>
<li>能源耗尽时，飞船会自动停止飞行</li>
<li>飞船有两个状态：飞行中和停止，飞船的行为会改变这个属性状态</li>
<li>飞船的自我销毁方法会立即销毁飞船自身</li>
<li>行星上有一个指挥官（不需要在页面上表现出其形象），指挥官可以通过行星上的信号发射器发布如下命令</li>
<li>创建一个新的飞船进入轨道，最多可以创建4个飞船，刚被创建的飞船会停留在某一个轨道上静止不动</li>
<li>命令某个飞船开始飞行，飞行后飞船会围绕行星做环绕运动，需要模拟出这个动画效果</li>
<li>命令某个飞船停止飞行</li>
<li>命令某个飞船销毁，销毁后飞船消失、飞船标示可以用于下次新创建的飞船</li>
<li>你需要设计类似如下指令格式的数据格式<br><code>{id: 1,commond: &#39;stop&#39;}</code></li>
<li>指挥官通过信号发射器发出的命令是通过一种叫做Mediator的介质进行广播</li>
<li>Mediator是单向传播的，只能从行星发射到宇宙中，在发射过程中，有30%的信息传送失败（丢包）概率，你需要模拟这个丢包率，另外每次信息正常传送的时间需要1秒</li>
<li>指挥官并不知道自己的指令是不是真的传给了飞船，飞船的状态他是不知道的，他只能通过自己之前的操作来假设飞船当前的状态</li>
<li>每个飞船通过信号接收器，接受到通过Mediator传达过来的指挥官的广播信号，但因为是广播信号，所以每个飞船能接受到指挥官发出给所有飞船的所有指令，因此需要通过读取信息判断这个指令是不是发给自己的</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>首先是HTML框架，需要一个虚拟宇宙，一个指挥操控板，一个消息框。</p>
<pre><code>&lt;div id=<span class="string">"main"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"clear_fix"</span>&gt;
    &lt;div id=<span class="string">"universe"</span>&gt;
        &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"path path_four"</span>&gt;
            &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"craft craft_four"</span>&gt;&lt;/div&gt;
            &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"path path_three"</span>&gt;
                &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"craft craft_three"</span>&gt;&lt;/div&gt;
                &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"path path_two"</span>&gt;
                    &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"craft craft_two"</span>&gt;&lt;/div&gt;
                    &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"path path_one"</span>&gt;
                        &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"craft craft_one"</span>&gt;&lt;/div&gt;
                        &lt;div <span class="class"><span class="keyword">class</span>=</span><span class="string">"planet"</span>&gt;用爱发电&lt;/div&gt;  
                    &lt;/div&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
    &lt;div id=<span class="string">"messager"</span>&gt;
        &lt;h1&gt;消息窗&lt;/h1&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div id=<span class="string">"control_panel"</span>&gt;
    &lt;ul&gt;
        &lt;li <span class="class"><span class="keyword">class</span>=</span><span class="string">"li_hidden"</span> id=<span class="string">"0"</span>&gt;
            &lt;label&gt;轨道一: &lt;/label&gt; 
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"start"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_start"</span>&gt;开始&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"stop"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_stop"</span>&gt;暂停&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"destroy"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_destroy"</span>&gt;销毁&lt;/button&gt;
        &lt;/li&gt;
        &lt;li <span class="class"><span class="keyword">class</span>=</span><span class="string">"li_hidden"</span> id=<span class="string">"1"</span>&gt;
            &lt;label&gt;轨道二: &lt;/label&gt; 
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"start"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_start"</span>&gt;开始&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"stop"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_stop"</span>&gt;暂停&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"destroy"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_destroy"</span>&gt;销毁&lt;/button&gt;
        &lt;/li&gt;
        &lt;li <span class="class"><span class="keyword">class</span>=</span><span class="string">"li_hidden"</span> id=<span class="string">"2"</span>&gt;
            &lt;label&gt;轨道三: &lt;/label&gt; 
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"start"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_start"</span>&gt;开始&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"stop"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_stop"</span>&gt;暂停&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"destroy"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_destroy"</span>&gt;销毁&lt;/button&gt;
        &lt;/li&gt;
        &lt;li <span class="class"><span class="keyword">class</span>=</span><span class="string">"li_hidden"</span> id=<span class="string">"3"</span>&gt;
            &lt;label&gt;轨道四: &lt;/label&gt; 
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"start"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_start"</span>&gt;开始&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"stop"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_stop"</span>&gt;暂停&lt;/button&gt;
            &lt;button <span class="class"><span class="keyword">type</span>=</span><span class="string">"button"</span> value=<span class="string">"destroy"</span> <span class="class"><span class="keyword">class</span>=</span><span class="string">"btn_destroy"</span>&gt;销毁&lt;/button&gt;
        &lt;/li&gt;
    &lt;/ul&gt;
    &lt;label id=<span class="string">"panel_title"</span>&gt;飞船操控板&lt;/label&gt;
    &lt;button id=<span class="string">"craft_creat"</span>&gt;增加新飞船&lt;/button&gt;
&lt;/div&gt;
</code></pre><p>然后需要创建一个飞船类，有飞船id，飞船能量，飞船状态，飞船能量控制四个属性、还有飞船启动，停止，销毁三个方法和飞船能量消耗，能量增加两个方法。</p>
<pre><code><span class="comment">//飞船类</span>
<span class="function"><span class="keyword">function</span> <span class="title">Craft</span>(<span class="params">craftId,onPath</span>)</span>{
    <span class="comment">//飞船id</span>
    <span class="keyword">this</span>.id = craftId;
    <span class="comment">//飞船是否部署到预定轨道</span>
    <span class="keyword">this</span>.onPath = onPath;
    <span class="comment">//飞船能量</span>
    <span class="keyword">this</span>.power = <span class="number">100</span>;
    <span class="comment">//飞船是否正在飞行</span>
    <span class="keyword">this</span>.state = <span class="string">"stop"</span>;
    <span class="comment">//控制飞船动力系统</span>
    <span class="keyword">this</span>.timer = <span class="literal">null</span>;
}
Craft.prototype = {
    constructor: Craft,
    receiveCommond : <span class="function"><span class="keyword">function</span>(<span class="params">commond</span>)</span>{
        <span class="keyword">if</span>(commond.id == <span class="keyword">this</span>.id){
            order = commond.commond;
            <span class="keyword">switch</span>(order){
                <span class="keyword">case</span> <span class="string">'start'</span>:
                    msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                    <span class="keyword">this</span>.powerConsume();
                    <span class="keyword">this</span>.state = <span class="string">"start"</span>;
                    <span class="keyword">this</span>.start();
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'stop'</span>:
                    msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                    <span class="keyword">this</span>.powerAdd();
                    <span class="keyword">this</span>.state = <span class="string">"stop"</span>;
                    <span class="keyword">this</span>.stop();
                    <span class="keyword">break</span>;
                <span class="keyword">case</span> <span class="string">'destroy'</span>:
                    msgControl(<span class="string">"有嘎达~ 信息传递成功！"</span>);
                    <span class="keyword">this</span>.destroy();
                    <span class="keyword">break</span>;
            }
        }
    },
    start : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"Nozomi power注入! 嗨~ 噗咻!"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船已经起飞"</span>);
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.add(<span class="string">"craft_start"</span>);
    },
    stop : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"sa si su se so！"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船停止飞行"</span>);
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.remove(<span class="string">"craft_start"</span>); 
    },
    destroy : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        msgControl(<span class="string">"dame! dame!"</span> + (<span class="keyword">this</span>.id+<span class="number">1</span>) + <span class="string">"号飞船被销毁了"</span>);
        <span class="comment">//先停止再销毁</span>
        <span class="comment">// this.stop();</span>
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[<span class="keyword">this</span>.id]);
        craftImg.classList.remove(<span class="string">"craft_start"</span>);
        clearInterval(<span class="keyword">this</span>.timer);
        <span class="keyword">var</span> id = <span class="keyword">this</span>.id;
        <span class="comment">//销毁飞船</span>
        <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[id]);
        craftImg.classList.remove(<span class="string">"craft_create"</span>);
        <span class="comment">//销毁控制板</span>
        <span class="built_in">document</span>.getElementById(id).classList.add(<span class="string">"li_hidden"</span>);
        <span class="comment">//将飞船从轨道撤下</span>
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=crafts.length;i&lt;len;i++){
            <span class="keyword">if</span>(crafts[i].id == id){
                crafts[i].onPath = <span class="string">"off"</span>;
                crafts[i].power = <span class="number">100</span>;
                crafts[i].state = <span class="string">"stop"</span>;
            }
        }
    },
    powerConsume : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">if</span>(<span class="keyword">this</span>.timer){
            clearInterval(<span class="keyword">this</span>.timer);
        }
        <span class="keyword">this</span>.timer = setInterval(run,<span class="number">100</span>);
        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{
            <span class="keyword">if</span>(_this.power&gt;<span class="number">0</span>){
                _this.power = _this.power - <span class="number">1</span>;
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[_this.id]);
                craftImg.innerHTML = _this.power + <span class="string">"%"</span>;
            }<span class="keyword">else</span>{
                _this.stop();
                _this.state = <span class="string">"charge"</span>;
                clearInterval(_this.timer);
                _this.powerAdd();
            }
        }
    },
    powerAdd : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">var</span> _this = <span class="keyword">this</span>;
        <span class="keyword">if</span>(<span class="keyword">this</span>.timer){
            clearInterval(<span class="keyword">this</span>.timer);
        }
        <span class="keyword">this</span>.timer = setInterval(run,<span class="number">300</span>);
        <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"></span>)</span>{
            <span class="keyword">if</span>(_this.power&lt;<span class="number">100</span>){
                _this.power = _this.power + <span class="number">1</span>;
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[_this.id]);
                craftImg.innerHTML = _this.power + <span class="string">"%"</span>;
            }<span class="keyword">else</span>{
                <span class="keyword">if</span>(_this.state == <span class="string">"charge"</span>){
                    _this.start();
                    _this.state = <span class="string">"start"</span>;
                    clearInterval(_this.timer);
                    _this.powerConsume();
                }<span class="keyword">else</span>{
                    clearInterval(_this.timer);
                }
            }
        }
    }
}
</code></pre><p>然后需要一个指挥官类，可以创建飞船和指挥飞船</p>
<pre><code><span class="comment">//指挥官类</span>
<span class="function"><span class="keyword">function</span> <span class="title">Commonder</span>(<span class="params"></span>)</span>{
    <span class="keyword">this</span>.craftId = <span class="number">0</span>;
}
Commonder.prototype = {
    createCommond : <span class="function"><span class="keyword">function</span>(<span class="params">id,order</span>)</span>{
        <span class="keyword">return</span> {
            id: id,
            commond: order
        };
    },
    createCraft : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{
        <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=crafts.length;i&lt;len;i++){
            <span class="keyword">if</span>(crafts[i].onPath == <span class="string">"off"</span>){
                <span class="keyword">var</span> id = crafts[i].id;
                crafts[i].onPath = <span class="string">"on"</span>;
                <span class="comment">//使飞船送达预定轨道</span>
                <span class="keyword">var</span> craftImg = <span class="built_in">document</span>.querySelector(<span class="string">"."</span> + craftsMap[id]);
                craftImg.classList.add(<span class="string">"craft_create"</span>);
                craftImg.innerHTML = crafts[i].power + <span class="string">"%"</span>;
                <span class="comment">//创建panel</span>
                <span class="keyword">var</span> panel = <span class="built_in">document</span>.getElementById(id);
                panel.classList.remove(<span class="string">"li_hidden"</span>);
                <span class="keyword">var</span> btns = panel.getElementsByTagName(<span class="string">'button'</span>);
                <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>,len=btns.length;i&lt;len;i++){
                    addHandler(btns[i],<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
                        btnHandler(e);
                    });
                }
                msgControl(<span class="string">"飞船"</span> + (id+<span class="number">1</span>) + <span class="string">"号已到达预定轨道，请发送下个命令撒~"</span>);
                <span class="keyword">break</span>;
            }
        }
    }
}
</code></pre><p>最后是一个消息发射器，负责信号的发送。这里每次会给所有飞船发送信号</p>
<pre><code><span class="comment">//信号发射器类</span>
<span class="function"><span class="keyword">function</span> <span class="title">Mediator</span><span class="params">()</span>{</span>
}
Mediator.prototype = {
    sendCommond : <span class="function"><span class="keyword">function</span><span class="params">(commond)</span>{</span>
        var num = Math.<span class="built_in">floor</span><span class="params">(Math.random<span class="params">()</span>*<span class="number">10</span>+<span class="number">1</span>)</span>;
        <span class="keyword">if</span><span class="params">(num &gt; <span class="number">3</span>)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>,len=crafts.length;i&lt;len;i++)</span>{
            <span class="keyword">if</span><span class="params">(crafts[i].onPath == <span class="string">"on"</span>)</span>{   
                crafts[i].receiveCommond<span class="params">(commond)</span>;
            }
        }
        }<span class="keyword">else</span>{
            msgControl<span class="params">(<span class="string">"信息传递失败！再试一次，fight だよ！"</span>)</span>;
        }
    },
}
</code></pre><p>对了，还有一个信号显示器，负责消息的显示</p>
<pre><code><span class="comment">//信号显示器</span>
<span class="function"><span class="keyword">function</span> <span class="title">msgControl</span><span class="params">(str)</span>{</span>
    var msg = $<span class="params">(<span class="string">"messager"</span>)</span>;
    msg.innerHTML += <span class="string">"&lt;p&gt;"</span> + <span class="built_in">str</span> + <span class="string">"&lt;/p&gt;"</span>;
    msg.scrollTop = msg.scrollHeight;
    console.<span class="built_in">log</span><span class="params">(str)</span>;
}
</code></pre><p>飞船的飞行效果是利用animation实现的，当飞船能量消耗完毕后，会自动暂停恢复能量。如果期间收到起飞命令，会起飞，否则会在能量到达100%时自动启动。</p>
<hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task26.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task26.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>练习JavaScript面向对象设计</li>
<li>实践一些基础的设计模式</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>创建一个虚拟宇宙，包括一个行星和飞船</li>
<li>每个飞船由以下部分组成</li>
<li>动力系统，可以完成飞行和停止飞行两个行为，暂定所有飞船的动力系统飞行速度是一致的，比如每秒20px，飞行过程中会按照一定速率消耗能源（比如每秒减5%）</li>
<li>能源系统，提供能源，并且在宇宙中通过太阳能充电（比如每秒增加2%，具体速率自定）<br>信号接收处理系统，用于接收行星上的信号</li>
<li>自爆系统，用于自我销毁</li>
<li>每个飞船的能源是有限的，用一个属性来表示能源剩余量，这是一个百分比，表示还剩余多少能源。</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 12]]></title>
    <link href="http://blog.supce.com/2016/11/17/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8019/"/>
    <id>http://blog.supce.com/2016/11/17/JavaScript之基础19/</id>
    <published>2016-11-16T16:00:00.000Z</published>
    <updated>2016-11-17T12:08:59.269Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上几个任务，实现一个树形组件，样式自定义，不做限制</li>
<li>要求有以下功能：</li>
<li>节点的折叠与展开</li>
<li>允许增加节点与删除节点</li>
<li>按照内容进行节点查找，并且把找到的节点进行特殊样式呈现，如果找到的节点处于被父节点折叠隐藏的状态，则需要做对应的展开</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>印象中最早遇见的树形组件是在xp系统中的文件系统，能够在窗口左侧显示文件夹的展开树。<br>这里，我们用一个列表来实现一个树形组件，并且增加一个查询按钮和文本输入框。</p>
<pre><code><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"menu"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>无可奉告<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">ul</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>闷声大发财<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>无可奉告<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>爱慕安格瑞<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>听风是雨<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>天气晴朗<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
        <span class="tag">&lt;<span class="title">ul</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>跑得快<span class="tag">&lt;/<span class="title">label</span>&gt;</span>
                <span class="tag">&lt;<span class="title">ul</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>弄个大新闻<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
                    <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>硬点<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
                <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>作为长者<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
            <span class="tag">&lt;<span class="title">li</span>&gt;</span><span class="tag">&lt;<span class="title">label</span>&gt;</span>人生经验<span class="tag">&lt;/<span class="title">label</span>&gt;</span><span class="tag">&lt;/<span class="title">li</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">li</span>&gt;</span>
<span class="tag">&lt;/<span class="title">ul</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"searchContainer"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"searchText"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"btnSearch"</span>&gt;</span>搜索<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后设置基本的样式</p>
<pre><code><span class="tag">ul</span><span class="rules">{
    <span class="rule"><span class="attribute">list-style</span>:<span class="value"> none</span></span>;
}</span>
<span class="tag">li</span><span class="rules">{
    <span class="rule"><span class="attribute">margin-top</span>:<span class="value"> <span class="number">8px</span></span></span>;
}</span>
<span class="tag">label</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
}</span>
<span class="class">.glyphicon</span><span class="rules">{
    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> <span class="number">5px</span></span></span>;
}</span>
<span class="class">.hidden</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
}</span>
<span class="id">#menu</span> <span class="tag">label</span> <span class="tag">span</span><span class="rules">{
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">5px</span></span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> none</span></span>;
}</span>
<span class="id">#menu</span> <span class="rule"><span class="attribute">label</span>:<span class="value">hover span{
    display: inline</span></span>;
}
<span class="class">.searched</span><span class="rules">{
    <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#fb3</span></span></span>;
}</span>
</code></pre><p>如果节点存在孩子节点，则在该节点前面添加一个箭头icon，当箭头朝下时展开该节点下的子节点。当箭头朝右时，隐藏该节点下的所有子节点。通过给箭头添加点击事件来控制这两个状态。<br>下面是给列表添加icon和icon点击事件的函数</p>
<pre><code><span class="comment">//添加icon</span>
<span class="function"><span class="keyword">function</span> <span class="title">initIcon</span><span class="params">()</span>{</span>
    var lists = document.getElementsByTagName<span class="params">(<span class="string">"li"</span>)</span>;
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>,len=lists.length;i&lt;len;i++)</span>{
        <span class="keyword">if</span><span class="params">(lists[i].getElementsByTagName<span class="params">(<span class="string">"ul"</span>)</span>.length)</span>{
            var node = document.createElement<span class="params">(<span class="string">"span"</span>)</span>;
            node.className = <span class="string">"glyphicon glyphicon-chevron-down"</span>;
            lists[i].insertBefore<span class="params">(node,lists[i].firstChild)</span>;
        }
    }
}

<span class="comment">//给Icon添加点击事件</span>
<span class="function"><span class="keyword">function</span> <span class="title">clickEvent</span><span class="params">()</span>{</span>
    var node = event.target;
    <span class="keyword">if</span><span class="params">(node)</span>{
        var nodeClass = node.classList;
        <span class="keyword">if</span><span class="params">(nodeClass.contains<span class="params">(<span class="string">"glyphicon-chevron-down"</span>)</span>)</span>{
            nodeClass.remove<span class="params">(<span class="string">"glyphicon-chevron-down"</span>)</span>;
            nodeClass.add<span class="params">(<span class="string">"glyphicon-chevron-right"</span>)</span>;
            node.parentNode.lastElementChild.classList.add<span class="params">(<span class="string">"hidden"</span>)</span>;
        }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(nodeClass.contains<span class="params">(<span class="string">"glyphicon-chevron-right"</span>)</span>)</span>{
            nodeClass.remove<span class="params">(<span class="string">"glyphicon-chevron-right"</span>)</span>;
            nodeClass.add<span class="params">(<span class="string">"glyphicon-chevron-down"</span>)</span>;
            node.parentNode.lastElementChild.classList.remove<span class="params">(<span class="string">"hidden"</span>)</span>;
        }
    }
}
</code></pre><p>然后，我们给列表添加增加和删除按钮，当鼠标hover某个列表时，会显示这两个按钮，增加的节点会成为鼠标正在hover节点的子节点</p>
<pre><code><span class="comment">//渲染添加和删除按钮</span>
<span class="function"><span class="keyword">function</span> <span class="title">render</span><span class="params">(label)</span>{</span>
    var addSpan = document.createElement<span class="params">(<span class="string">"span"</span>)</span>;
    addSpan.classList.add<span class="params">(<span class="string">"addSpan"</span>)</span>;
    addSpan.innerHTML = <span class="string">"+"</span>;
    addHandler<span class="params">(addSpan,<span class="string">"click"</span>,addNode)</span>;
    var delSpan = document.createElement<span class="params">(<span class="string">"span"</span>)</span>;
    delSpan.classList.add<span class="params">(<span class="string">"delSpan"</span>)</span>;
    delSpan.innerHTML = <span class="string">"x"</span>;
    addHandler<span class="params">(delSpan,<span class="string">"click"</span>,delNode)</span>
    label.appendChild<span class="params">(addSpan)</span>;
    label.appendChild<span class="params">(delSpan)</span>;
}
</code></pre><p>在删除节点的时候，需要进行判断，如果该节点存在兄弟节点，可以直接删除，如果该节点没有兄弟节点，则需要将父节点前面的icon一起删除</p>
<pre><code><span class="comment">//返回指定元素的子元素节点的个数</span>
<span class="function"><span class="keyword">function</span> <span class="title">elementChildCount</span><span class="params">(node)</span>{</span>
    var num = <span class="number">0</span>;
    var <span class="built_in">children</span> = node.childNodes;
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>,len=children.length;i&lt;len;i++)</span>{
        <span class="keyword">if</span><span class="params">(children[i].nodeType == <span class="number">1</span>)</span>{
            num ++;
        }
    }
    return num;
}

<span class="comment">//删除指定节点</span>
<span class="function"><span class="keyword">function</span> <span class="title">delNode</span><span class="params">()</span>{</span>
    node = event.target.parentNode.parentNode;
    <span class="comment">// console.log(node);</span>
    <span class="comment">//用了children不返回文本节点，可能有兼容问题，最好自己写一个返回</span>
    <span class="comment">// if(node.parentNode.children.length&gt;1){</span>
    <span class="comment">//  node.parentNode.removeChild(node);</span>
    <span class="comment">// }</span>
    <span class="keyword">if</span><span class="params">(elementChildCount<span class="params">(node.parentNode)</span>&gt;<span class="number">1</span>)</span>{
        node.parentNode.removeChild<span class="params">(node)</span>;
    }<span class="keyword">else</span>{
        node = node.parentNode;
        node.parentNode.removeChild<span class="params">(node.parentNode.firstElementChild)</span>;
        node.parentNode.removeChild<span class="params">(node)</span>;
    }
}
</code></pre><p>添加节点也分两种情况，如果该节点下已经存在子节点，直接添加即可，如果不存在子节点，需要在添加子节点的同时，给父元素添加一个icon，不能忘记给icon添加点击事件以及新节点的添加和删除功能</p>
<pre><code><span class="comment">//添加节点</span>
<span class="function"><span class="keyword">function</span> <span class="title">addNode</span><span class="params">()</span>{</span>
    var node = event.target.parentNode.parentNode;
    var childUl = node.getElementsByTagName<span class="params">(<span class="string">"ul"</span>)</span>[<span class="number">0</span>];
    <span class="keyword">if</span><span class="params">(childUl)</span>{
        var name = prompt<span class="params">(<span class="string">"请输入名称"</span>,<span class="string">""</span>)</span>;
        <span class="keyword">if</span><span class="params">(name &amp;&amp; name != <span class="string">""</span>)</span>{
            var li = document.createElement<span class="params">(<span class="string">"li"</span>)</span>;
            var label = document.createElement<span class="params">(<span class="string">"label"</span>)</span>;
            label.innerHTML = name;
            <span class="comment">//添加删除和增加按钮</span>
            <span class="built_in">render</span><span class="params">(label)</span>;
            li.appendChild<span class="params">(label)</span>;
            childUl.appendChild<span class="params">(li)</span>;
        }
    }<span class="keyword">else</span>{
        var name = prompt<span class="params">(<span class="string">"请输入名称"</span>,<span class="string">""</span>)</span>;
        <span class="keyword">if</span><span class="params">(name &amp;&amp; name != <span class="string">""</span>)</span>{
            var ul = document.createElement<span class="params">(<span class="string">"ul"</span>)</span>;
            var li = document.createElement<span class="params">(<span class="string">"li"</span>)</span>;
            var label = document.createElement<span class="params">(<span class="string">"label"</span>)</span>;
            label.innerHTML = name;
            <span class="built_in">render</span><span class="params">(label)</span>;
            li.appendChild<span class="params">(label)</span>;
            ul.appendChild<span class="params">(li)</span>
            node.appendChild<span class="params">(ul)</span>;
            var span = document.createElement<span class="params">(<span class="string">"span"</span>)</span>;
            span.className = <span class="string">"glyphicon glyphicon-chevron-down"</span>;  <span class="comment">//setAttribute</span>
            addHandler<span class="params">(span,<span class="string">"click"</span>,clickEvent)</span>;
            node.insertBefore<span class="params">(span,node.firstChild)</span>;
        }
    }
}
</code></pre><p>最后，还需要给整个树添加查询功能。如果查到该节点，并且该节点的长辈节点有折叠的状态，则需要将其展开。</p>
<pre><code><span class="comment">//查询node函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">searchNode</span><span class="params">()</span>{</span>
    var <span class="built_in">text</span> = document.getElementById<span class="params">('searchText')</span>.value;
    var menu = document.getElementById<span class="params">('menu')</span>;
    <span class="keyword">if</span><span class="params">(text)</span>{
        var label = document.getElementsByTagName<span class="params">('label')</span>;
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>,len=label.length;i&lt;len;i++)</span>{
            <span class="keyword">if</span><span class="params">(text == label[i].childNodes[<span class="number">0</span>].nodeValue)</span>{
                <span class="comment">//设置特殊样式</span>
                label[i].setAttribute<span class="params">(<span class="string">"class"</span>,<span class="string">"searched"</span>)</span>;
                <span class="comment">//如果父节点折叠则展开</span>
                var ul = label[i].parentNode.parentNode;
                while<span class="params">(ul != menu)</span>{
                    <span class="comment">// console.log(ul);</span>
                    <span class="keyword">if</span><span class="params">(ul.classList.contains<span class="params">(<span class="string">"hidden"</span>)</span>)</span>{
                        ul.parentNode.firstElementChild.classList.remove<span class="params">(<span class="string">"glyphicon-chevron-right"</span>)</span>;
                        ul.parentNode.firstElementChild.classList.add<span class="params">(<span class="string">"glyphicon-chevron-down"</span>)</span>;
                        ul.classList.remove<span class="params">(<span class="string">"hidden"</span>)</span>;
                    }
                    ul = ul.parentNode.parentNode;
                }
            }
        }
    }   
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task25.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task25.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上几个任务，实现一个树形组件，样式自定义，不做限制</li>
<li>要求有以下功能：</li>
<li>节点的折叠与展开</li>
<li>允许增加节点与删除节点</li>
<li>按照内容进行节点查找，并且把找到的节点进行特殊样式呈现，如果找到的节点处于被父节点折叠隐藏的状态，则需要做对应的展开</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 11]]></title>
    <link href="http://blog.supce.com/2016/11/15/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8018/"/>
    <id>http://blog.supce.com/2016/11/15/JavaScript之基础18/</id>
    <published>2016-11-14T16:00:00.000Z</published>
    <updated>2016-11-15T11:46:09.092Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个<a href="http://blog.supce.com/2016/11/13/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8017/">任务</a>，添加节点的选择、增加与删除的功能</li>
<li>点击某个节点元素，则该节点元素呈现一个特殊被选中的样式</li>
<li>增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉</li>
<li>增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节点内容为输入框中内容，插入在其子节点的最后一个位置<a id="more"></a>
</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>首先在原来的页面中增加两个button用于增加和删除节点，同时添加一个input获取用户添加节点的名称。</p>
<pre><code><span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"searchValue"</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"dlr"</span>&gt;</span>深度优先模拟前序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"ldr"</span>&gt;</span>深度优先模拟中序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"lrd"</span>&gt;</span>深度优先模拟后序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"bfs"</span>&gt;</span>广度优先遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>文本框为空时只进行遍历。如果需要搜索，请在文本框中输入要查询的内容<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
<span class="tag">&lt;<span class="title">br</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"delNode"</span>&gt;</span>删除选中的节点<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"newNode"</span> <span class="attribute">value</span>=<span class="value">"新节点"</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"addNode"</span>&gt;</span>点击增加节点<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
</code></pre><p>然后给页面中的所有节点添加点击事件，用于标注哪个节点被用户选中。</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">clickHandler</span><span class="params">()</span>{</span>
    <span class="comment">//清除上一个</span>
    <span class="keyword">if</span><span class="params">(clickedNode)</span>{
        clickedNode.classList.remove<span class="params">(<span class="string">"clicked"</span>)</span>;
    }
    var e = event.target;
    <span class="keyword">if</span><span class="params">(e)</span>{
        e.classList.add<span class="params">(<span class="string">"clicked"</span>)</span>;
        clickedNode = e;
    }
}
<span class="comment">//给所有节点添加点击事件</span>
<span class="function"><span class="keyword">function</span> <span class="title">nodeClick</span><span class="params">()</span>{</span>
    var tree = $<span class="params">(<span class="string">"#tree_wrap"</span>)</span>;
    addHandler<span class="params">(tree,<span class="string">"click"</span>,clickHandler)</span>;
}
</code></pre><p>当用户点击删除按钮后，调用删除函数即可</p>
<pre><code><span class="comment">//删除节点</span>
<span class="function"><span class="keyword">function</span> <span class="title">delNode</span><span class="params">()</span></span>{
    <span class="keyword">var</span> node = $(<span class="string">".clicked"</span>);
    <span class="keyword">if</span>(node){
        <span class="keyword">var</span> <span class="keyword">parent</span> = node.parentNode;
        <span class="keyword">parent</span>.removeChild(node);
    }
}
</code></pre><p>如果用于点击添加按钮，调用添加函数，将新增的节点作为被选中节点的子节点添加到节点树中</p>
<pre><code><span class="comment">//增加节点</span>
<span class="function"><span class="keyword">function</span> <span class="title">addNode</span><span class="params">()</span>{</span>
    var newNodeText = $<span class="params">(<span class="string">"#newNode"</span>)</span>.value.trim<span class="params">()</span>;
    var node = $<span class="params">(<span class="string">".clicked"</span>)</span>;
    <span class="keyword">if</span><span class="params">(newNodeText &amp;&amp; node)</span>{
        var newNode = document.createElement<span class="params">(<span class="string">"div"</span>)</span>;
        var <span class="built_in">text</span> = document.createTextNode<span class="params">(newNodeText)</span>;
        newNode.appendChild<span class="params">(text)</span>;
        node.appendChild<span class="params">(newNode)</span>;
    }
}
</code></pre><p>其他函数：</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span>{</span>
    var value = $<span class="params">(<span class="string">"#searchValue"</span>)</span>.value.trim<span class="params">()</span>;
    <span class="comment">//清除颜色</span>
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;nodeArray.length;i++)</span>{
        <span class="comment">// nodeArray[i].style.color = "#000";</span>
        nodeArray[i].classList.remove<span class="params">(<span class="string">"searched"</span>)</span>;
    }
    var timer = null,i=<span class="number">0</span>,isSeached = <span class="literal">false</span>;
    timer = setInterval<span class="params">(run,<span class="number">500</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        isRun = <span class="literal">true</span>;
        <span class="keyword">if</span><span class="params">(i&lt;nodeArray.length)</span>{
            <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                <span class="comment">// nodeArray[i-1].className = "";</span>
                nodeArray[i-<span class="number">1</span>].classList.remove<span class="params">(<span class="string">"selected"</span>)</span>;
            }
            <span class="comment">// nodeArray[i].className = "selected";</span>
            nodeArray[i].classList.add<span class="params">(<span class="string">"selected"</span>)</span>;
            <span class="keyword">if</span><span class="params">(value)</span>{
                var nodeValue = nodeArray[i].firstChild.nodeValue.trim<span class="params">()</span>;
                <span class="keyword">if</span><span class="params">(value == nodeValue)</span>{
                    <span class="comment">// nodeArray[i].style.color = "red";</span>
                    nodeArray[i].classList.add<span class="params">(<span class="string">"searched"</span>)</span>;
                    isSeached = <span class="literal">true</span>;
                }
            }
            i++;
        }<span class="keyword">else</span>{
            <span class="comment">//清除最一个节点的背景色</span>
            <span class="comment">// nodeArray[i-1].className = "";</span>
            nodeArray[i-<span class="number">1</span>].classList.remove<span class="params">(<span class="string">"selected"</span>)</span>;
            <span class="comment">//判断是否被找到</span>
            <span class="keyword">if</span><span class="params">(value &amp;&amp; !isSeached)</span>{
                alert<span class="params">(<span class="string">"没有找到"</span>)</span>;
            }
            nodeArray = [];
            isRun = <span class="literal">false</span>;
            clearInterval<span class="params">(timer)</span>;
            return;
        }
    }
}

<span class="comment">//按钮handler</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandler</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(isRun)</span>{
        alert<span class="params">(<span class="string">"等会儿"</span>)</span>;
    }<span class="keyword">else</span>{
        var tree = $<span class="params">(<span class="string">"#tree_wrap"</span>)</span>;
        var id = event.target.id;
        switch<span class="params">(id)</span>{
            case 'dlr':
                dlr<span class="params">(tree)</span>;
                break;
            case 'ldr':
                ldr<span class="params">(tree)</span>;
                break;
            case 'lrd':
                lrd<span class="params">(tree)</span>;
                break;
            case 'bfs':
                bfs<span class="params">(tree)</span>;
                break;
        }
        renderData<span class="params">()</span>;
    }

}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task24.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task24.html" target="_blank" rel="external">demo</a></p>
<p><em>忙。。。时间太宝贵了</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个<a href="http://blog.supce.com/2016/11/13/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8017/">任务</a>，添加节点的选择、增加与删除的功能</li>
<li>点击某个节点元素，则该节点元素呈现一个特殊被选中的样式</li>
<li>增加一个删除按钮，当选中某个节点元素后，点击删除按钮，则将该节点及其所有子节点删除掉</li>
<li>增加一个输入框及一个“添加”按钮当选中某个节点元素后，点击增加按钮，则在该节点下增加一个子节点，节点内容为输入框中内容，插入在其子节点的最后一个位置]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 10]]></title>
    <link href="http://blog.supce.com/2016/11/13/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8017/"/>
    <id>http://blog.supce.com/2016/11/13/JavaScript之基础17/</id>
    <published>2016-11-12T16:00:00.000Z</published>
    <updated>2016-11-13T11:34:41.849Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将二叉树变成了多叉树，并且每一个节点中带有内容</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点</li>
<li>增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="整体思路">整体思路</h1><p>这里首先也采用面向过程的思路，实现对多叉树的遍历，这里利用深度优先模拟了前中后序遍历，同时也实现了广度优先遍历，也可以利用这四种方式进行查询。</p>
<p>首先是利用div模拟多叉树，同时添加四个按钮和一个文本框用来进行不同的遍历和查询。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tree_wrap"</span>&gt;</span>
    Super
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        Cat
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Apple
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Pear<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Pig<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Cola<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Soccer<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Phone
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Book<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>School<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        Note
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Human
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Code<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Operate<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Man<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            Program
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>
                Bement  
                <span class="tag">&lt;<span class="title">div</span>&gt;</span>Cat<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span>Glass<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        Fish
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"searchValue"</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"dlr"</span>&gt;</span>深度优先模拟前序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"ldr"</span>&gt;</span>深度优先模拟中序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"lrd"</span>&gt;</span>深度优先模拟后序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"bfs"</span>&gt;</span>广度优先遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">span</span>&gt;</span>文本框为空时只进行遍历。如果需要搜索，请在文本框中输入要查询的内容<span class="tag">&lt;/<span class="title">span</span>&gt;</span>
</code></pre><p>把上面提到的四种遍历算法写出来，在进行广度遍历时，添加一个临时数组，模拟队列进行广度遍历。</p>
<pre><code><span class="comment">//深度优先模拟前序</span>
<span class="function"><span class="keyword">function</span> <span class="title">dlr</span><span class="params">(node)</span>{</span>
    <span class="comment">// console.log(node.children[0]);</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        nodeArray.push<span class="params">(node)</span>;
        <span class="keyword">if</span><span class="params">(node.children)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;node.children.length;i++)</span>{
                dlr<span class="params">(node.children[i])</span>;
            }
        }
    }
}
<span class="comment">//深度优先模拟中序</span>
<span class="function"><span class="keyword">function</span> <span class="title">ldr</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        ldr<span class="params">(node.firstElementChild)</span>;
        nodeArray.push<span class="params">(node)</span>;
        <span class="keyword">for</span><span class="params">(var i=<span class="number">1</span>;i&lt;node.children.length;i++)</span>{
            ldr<span class="params">(node.children[i])</span>;
        }
    }
}
<span class="comment">//深度优先模拟后序</span>
<span class="function"><span class="keyword">function</span> <span class="title">lrd</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node.children)</span>{
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;node.children.length;i++)</span>{
            lrd<span class="params">(node.children[i])</span>;
        }
    }
    nodeArray.push<span class="params">(node)</span>;
}
<span class="comment">//广度优先</span>
<span class="function"><span class="keyword">function</span> <span class="title">bfs</span><span class="params">(node)</span>{</span>
    var temp = [];
    <span class="keyword">if</span><span class="params">(node)</span>{
        temp.push<span class="params">(node)</span>;
    }
    while<span class="params">(temp.length)</span>{
        node = temp.shift<span class="params">()</span>;
        nodeArray.push<span class="params">(node)</span>;
        <span class="keyword">if</span><span class="params">(node.children)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;node.children.length;i++)</span>{
                temp.push<span class="params">(node.children[i])</span>;
            }
        }
    }
}
</code></pre><p>然后把按钮与不同的算法相关联</p>
<pre><code><span class="comment">//按钮handler</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandler</span>(<span class="params"></span>)</span>{
    <span class="keyword">if</span>(isRun){
        alert(<span class="string">"等会儿"</span>);
    }<span class="keyword">else</span>{
        <span class="keyword">var</span> tree = $(<span class="string">"#tree_wrap"</span>);
        <span class="keyword">var</span> id = event.target.id;
        <span class="keyword">switch</span>(id){
            <span class="keyword">case</span> <span class="string">'dlr'</span>:
                dlr(tree);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'ldr'</span>:
                ldr(tree);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'lrd'</span>:
                lrd(tree);
                <span class="keyword">break</span>;
            <span class="keyword">case</span> <span class="string">'bfs'</span>:
                bfs(tree);
                <span class="keyword">break</span>;
        }
        renderData();
    }

}
<span class="comment">//初始化函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        addHandler(btns[i],<span class="string">"click"</span>,btnHandler);
    }
    <span class="keyword">var</span> searchInput = $(<span class="string">"#searchValue"</span>);
    searchInput.addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });

}
</code></pre><p>在最后的渲染函数中，在原来的基础上，根据input中是否为空来判断是否需要查询。</p>
<pre><code>var isRun = <span class="literal">false</span>;
<span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span>{</span>
    var value = $<span class="params">(<span class="string">"#searchValue"</span>)</span>.value.trim<span class="params">()</span>;
    <span class="comment">//清除查询标记的颜色</span>
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;nodeArray.length;i++)</span>{
        <span class="comment">// nodeArray[i].style.color = "#000";</span>
        nodeArray[i].classList.remove<span class="params">(<span class="string">"searched"</span>)</span>;
    }
    var timer = null,i=<span class="number">0</span>,isSeached = <span class="literal">false</span>;
    timer = setInterval<span class="params">(run,<span class="number">500</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        isRun = <span class="literal">true</span>;
        <span class="keyword">if</span><span class="params">(i&lt;nodeArray.length)</span>{
            <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                <span class="comment">// nodeArray[i-1].className = "";</span>
                nodeArray[i-<span class="number">1</span>].classList.remove<span class="params">(<span class="string">"selected"</span>)</span>;
            }
            <span class="comment">// nodeArray[i].className = "selected";</span>
            nodeArray[i].classList.add<span class="params">(<span class="string">"selected"</span>)</span>;
            <span class="comment">//判断是否在进行查询</span>
            <span class="keyword">if</span><span class="params">(value)</span>{
                var nodeValue = nodeArray[i].firstChild.nodeValue.trim<span class="params">()</span>;
                <span class="keyword">if</span><span class="params">(value == nodeValue)</span>{
                    <span class="comment">// nodeArray[i].style.color = "red";</span>
                    nodeArray[i].classList.add<span class="params">(<span class="string">"searched"</span>)</span>;
                    isSeached = <span class="literal">true</span>;
                }
            }
            i++;
        }<span class="keyword">else</span>{
            <span class="comment">//清除最一个节点的背景色</span>
            <span class="comment">// nodeArray[i-1].className = "";</span>
            nodeArray[i-<span class="number">1</span>].classList.remove<span class="params">(<span class="string">"selected"</span>)</span>;
            <span class="comment">//判断是否被找到</span>
            <span class="keyword">if</span><span class="params">(value &amp;&amp; !isSeached)</span>{
                alert<span class="params">(<span class="string">"没有找到"</span>)</span>;
            }
            nodeArray = [];
            isRun = <span class="literal">false</span>;
            clearInterval<span class="params">(timer)</span>;
            return;
        }
    }
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task23.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task23.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将二叉树变成了多叉树，并且每一个节点中带有内容</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点</li>
<li>增加一个输入框及一个“查询”按钮，点击按钮时，开始在树中以动画形式查找节点内容和输入框中内容一致的节点，找到后以特殊样式显示该节点，找不到的话给出找不到的提示。查询过程中的展示过程和遍历过程保持一致</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 09 (二)]]></title>
    <link href="http://blog.supce.com/2016/11/11/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8016/"/>
    <id>http://blog.supce.com/2016/11/11/JavaScript之基础16/</id>
    <published>2016-11-10T16:00:00.000Z</published>
    <updated>2016-11-11T10:57:51.204Z</updated>
    <content type="html"><![CDATA[<hr>
<p>在上一文章中，用面向过程的思想实现了对二叉树的三种遍历。这篇采用面向对象实现了一下。<br>定义一个Node类，把遍历好的node节点保存在对象的属性中，把三种遍历方法和渲染方法作为对象的方法。<br>Node类代码如下：<br><a id="more"></a></p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">Node</span><span class="params">()</span>{</span>
    this.nodeArray = [];
}
Node.prototype = {
    <span class="comment">//前序</span>
    dlr : <span class="function"><span class="keyword">function</span><span class="params">(root)</span>{</span>
        <span class="keyword">if</span><span class="params">(root)</span>{
            this.nodeArray.push<span class="params">(root)</span>;
            this.dlr<span class="params">(root.firstElementChild)</span>;
            this.dlr<span class="params">(root.lastElementChild)</span>;
        }
    },
    <span class="comment">//中序</span>
    ldr : <span class="function"><span class="keyword">function</span><span class="params">(root)</span>{</span>
        <span class="keyword">if</span><span class="params">(root)</span>{
            this.ldr<span class="params">(root.firstElementChild)</span>;
            this.nodeArray.push<span class="params">(root)</span>;
            this.ldr<span class="params">(root.lastElementChild)</span>;
        }
    },
    <span class="comment">//后序</span>
    lrd : <span class="function"><span class="keyword">function</span><span class="params">(root)</span>{</span>
        <span class="keyword">if</span><span class="params">(root)</span>{
            this.lrd<span class="params">(root.firstElementChild)</span>;
            this.lrd<span class="params">(root.lastElementChild)</span>;
            this.nodeArray.push<span class="params">(root)</span>;
        }
    },
    <span class="comment">//可视化遍历</span>
    <span class="built_in">render</span> : <span class="function"><span class="keyword">function</span><span class="params">()</span>{</span>
        var timer = null,len = this.nodeArray.length,i = <span class="number">0</span>;
        var nodeArray = this.nodeArray;
        timer = setInterval<span class="params">(run,<span class="number">500</span>)</span>;
        <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
            <span class="keyword">if</span><span class="params">(i &lt; len)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                    nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
                }
                nodeArray[i].className = <span class="string">"selected"</span>;
                i++;
            }<span class="keyword">else</span>{
                <span class="comment">//清除最一个节点的背景色</span>
                nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
                clearInterval<span class="params">(timer)</span>;
            }
        }
        this.nodeArray = [];
    }
}
</code></pre><p>然后我们只需要给button添加下点击事件就可以了</p>
<pre><code><span class="comment">//根据不同的按钮调用不同的排序算法</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandle</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> id = event.target.id;
    <span class="keyword">var</span> root = $(<span class="string">'tree_wrap'</span>);
    <span class="keyword">var</span> tree = <span class="keyword">new</span> Node();
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'dlr'</span>:
            tree.dlr(root);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'ldr'</span>:
            tree.ldr(root);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'lrd'</span>:
            tree.lrd(root);
            <span class="keyword">break</span>;
    }
    tree.render();
}
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        addHandler(btns[i],<span class="string">"click"</span>,btnHandle);
    }
}
init();
</code></pre><hr>
<p><a href="https://github.com/byvector/code-monkey/blob/master/task22_2.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task22_2.html" target="_blank" rel="external">demo</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<p>在上一文章中，用面向过程的思想实现了对二叉树的三种遍历。这篇采用面向对象实现了一下。<br>定义一个Node类，把遍历好的node节点保存在对象的属性中，把三种遍历方法和渲染方法作为对象的方法。<br>Node类代码如下：<br>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 09]]></title>
    <link href="http://blog.supce.com/2016/11/10/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8015/"/>
    <id>http://blog.supce.com/2016/11/10/JavaScript之基础15/</id>
    <published>2016-11-09T16:00:00.000Z</published>
    <updated>2016-11-10T11:57:29.931Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中展现一颗二叉树的结构</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示</li>
<li>增加多个按钮，每个按钮对应不同的算法）</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点<a id="more"></a>
</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>二叉树还是容易的，直接利用div在页面展现一个二叉树结构，然后放上三个变量按钮</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tree_wrap"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
            <span class="tag">&lt;<span class="title">div</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
        <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"dlr"</span>&gt;</span>前序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"ldr"</span>&gt;</span>中序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"lrd"</span>&gt;</span>后序遍历<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
</code></pre><p>由于题目要求能够对遍历可视化，这里就把遍历后的节点保存在一个数组中，这样既记录了节点，又保存了节点的变量顺序，最后对数组进行可视化遍历即可。</p>
<p>首先给button添加点击事件</p>
<pre><code><span class="comment">//根据不同的按钮调用不同的排序算法</span>
<span class="function"><span class="keyword">function</span> <span class="title">btnHandle</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> id = event.target.id;
    <span class="keyword">var</span> tree = $(<span class="string">"tree_wrap"</span>);
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'dlr'</span>:
            dlr(tree);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'ldr'</span>:
            ldr(tree);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'lrd'</span>:
            lrd(tree);
            <span class="keyword">break</span>;
    }
    renderData();
}
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        addHandler(btns[i],<span class="string">"click"</span>,btnHandle);
    }
}
init();
</code></pre><p>用递归把三种遍历函数写出来</p>
<pre><code><span class="comment">//前序遍历</span>
<span class="function"><span class="keyword">function</span> <span class="title">dlr</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        nodeArray.push<span class="params">(node)</span>;
        dlr<span class="params">(node.firstElementChild)</span>;
        dlr<span class="params">(node.lastElementChild)</span>;
    }
}
<span class="comment">//中序遍历</span>
<span class="function"><span class="keyword">function</span> <span class="title">ldr</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        ldr<span class="params">(node.firstElementChild)</span>;
        nodeArray.push<span class="params">(node)</span>;
        ldr<span class="params">(node.lastElementChild)</span>;
    }
}
<span class="comment">//后序遍历</span>
<span class="function"><span class="keyword">function</span> <span class="title">lrd</span><span class="params">(node)</span>{</span>
    <span class="keyword">if</span><span class="params">(node)</span>{
        lrd<span class="params">(node.firstElementChild)</span>;
        lrd<span class="params">(node.lastElementChild)</span>;
        nodeArray.push<span class="params">(node)</span>;
    }
}
</code></pre><p>最后利用 <code>setInterval</code> 函数把遍历过程渲染出来，这里可以写一个renderData函数</p>
<pre><code><span class="comment">//存储遍历后的节点</span>
var nodeArray = [];
<span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span>{</span>
    var timer = null,i=<span class="number">0</span>;
    timer =setInterval<span class="params">(run,<span class="number">500</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        <span class="keyword">if</span><span class="params">(i&lt;nodeArray.length)</span>{
            <span class="keyword">if</span><span class="params">(i-<span class="number">1</span> &gt; -<span class="number">1</span>)</span>{
                <span class="comment">//清除上一个节点的背景色</span>
                nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
            }
            nodeArray[i].className = <span class="string">"selected"</span>;
            i++;
        }<span class="keyword">else</span>{
            <span class="comment">//清除最一个节点的背景色</span>
            nodeArray[i-<span class="number">1</span>].className = <span class="string">""</span>;
            clearInterval<span class="params">(timer)</span>;
            nodeArray = [];
            return;
        }
    }
    console.<span class="built_in">log</span><span class="params">(nodeArray)</span>;
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task22.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task22.html" target="_blank" rel="external">演示效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>熟练JavaScript</li>
<li>学习树这种数据结构的基本知识</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>在页面中展现一颗二叉树的结构</li>
<li>提供一个按钮，显示开始遍历，点击后，以动画的形式呈现遍历的过程</li>
<li>二叉树的遍历算法和方式自定，前序中序后序皆可，但推荐可以提供多种算法的展示</li>
<li>增加多个按钮，每个按钮对应不同的算法）</li>
<li>当前被遍历到的节点做一个特殊显示（比如不同的颜色）</li>
<li>每隔一段时间（500ms，1s等时间自定）再遍历下一个节点]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 08]]></title>
    <link href="http://blog.supce.com/2016/11/08/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8014/"/>
    <id>http://blog.supce.com/2016/11/08/JavaScript之基础14/</id>
    <published>2016-11-07T16:00:00.000Z</published>
    <updated>2016-11-08T11:41:09.642Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践JavaScript的基本语法、语言特性</li>
<li>练习使用JavaScript实现拖拽功能</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将任务的代码进行抽象、封装，然后在此基础上实现如图中的两个需求：Tag输入和兴趣爱好输入</li>
<li>实现一个tag输入框</li>
<li>要求遇到用户输入空格，逗号，回车时，都自动把当前输入的内容作为一个tag放在输入框下面。</li>
<li>Tag不能有重复的，遇到重复输入的Tag，自动忽视。</li>
<li>每个Tag请做trim处理</li>
<li>最多允许10个Tag，多于10个时，按照录入的先后顺序，把最前面的删掉</li>
<li>当鼠标悬停在tag上时，tag前增加删除二字，点击tag可删除<a id="more"></a></li>
<li>实现一个兴趣爱好输入的功能</li>
<li>通过一个Textarea进行兴趣爱好的输入，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为间隔。</li>
<li>当点击“确认兴趣爱好”的按钮时，将textarea中的输入按照你设定的间隔符，拆解成一个个的爱好，显示在textarea下方</li>
<li>爱好不能重复，所以在下方呈现前，需要做一个去重</li>
<li>每个爱好内容需要做trim处理</li>
<li>最多允许10个兴趣爱好，多于10个时，按照录入的先后顺序，把最前面的删掉</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>依然是按照要求首先写出HTML代码</p>
<pre><code><span class="tag">&lt;<span class="title">label</span>&gt;</span>Tag: <span class="tag">&lt;/<span class="title">label</span>&gt;</span>
<span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"user_tag"</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"tags_wrap"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"hobby_input"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
<span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"hobby_btn"</span>&gt;</span>确认兴趣爱好<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"hobby_wrap"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后给相应的元素绑定事件</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">addHandler</span><span class="params">(element,type,handler)</span>{</span>
    <span class="keyword">if</span><span class="params">(element.addEventListener)</span>{
        element.addEventListener<span class="params">(type,handler,<span class="literal">false</span>)</span>;
    }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(element.attachEvent)</span>{
        element.attachEvent<span class="params">(<span class="string">"on"</span> + type,handler)</span>;
    }<span class="keyword">else</span>{
        element[<span class="string">"on"</span> + type] = handler;
    }
}
<span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span>{</span>
    var tag = $<span class="params">(<span class="string">"#user_tag"</span>)</span>;
    var hobby_btn = $<span class="params">(<span class="string">"#hobby_btn"</span>)</span>;
    var tags_wrap = $<span class="params">(<span class="string">"#tags_wrap"</span>)</span>;
    var hobby_wrap = $<span class="params">(<span class="string">"#hobby_wrap"</span>)</span>;
    addHandler<span class="params">(tag,<span class="string">"keyup"</span>,addTag)</span>;
    addHandler<span class="params">(hobby_btn,<span class="string">"click"</span>,addHobby)</span>;
}
init<span class="params">()</span>;
</code></pre><p>这里，我们用两个数组，分别用来保存Tag和Hobby。为了能够在添加Tag和Hobby时共用渲染数据函数，可以设置一个标志参数，用来标志是否需要添加点击删除事件</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">(element,data,isDel)</span>{</span>
    var <span class="built_in">text</span> = <span class="string">""</span>;
    <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;data.length;i++)</span>{
        <span class="built_in">text</span> += '&lt;div&gt;' + data[i] + '&lt;/div&gt;';
    }
    element.innerHTML = <span class="built_in">text</span>;
    <span class="keyword">if</span><span class="params">(isDel)</span>{
        tagsEvent<span class="params">()</span>;
    }
}
</code></pre><p>然后根据题目要求，将添加Tag和Bobby函数写出来，其实就是对用户输入的数据进行检测和处理</p>
<pre><code><span class="comment">//添加tag</span>
<span class="function"><span class="keyword">function</span> <span class="title">addTag</span><span class="params">()</span>{</span>
    var value = $<span class="params">(<span class="string">"#user_tag"</span>)</span>.value;
    <span class="keyword">if</span><span class="params">(textCheck<span class="params">(value)</span> || event.keyCode == <span class="number">13</span>)</span>{
        value = value.trim<span class="params">()</span>.replace<span class="params">(/[，, ]/, '')</span>;
        <span class="keyword">if</span><span class="params">(value)</span>{
            <span class="keyword">if</span><span class="params">(!contains<span class="params">(tags,value)</span>)</span>{
                <span class="keyword">if</span><span class="params">(tags.length&lt;<span class="number">10</span>)</span>{
                    tags.push<span class="params">(value)</span>;
                }<span class="keyword">else</span>{
                    tags.shift<span class="params">()</span>;
                    tags.push<span class="params">(value)</span>;
                }
            }
            $<span class="params">(<span class="string">"#user_tag"</span>)</span>.value = <span class="string">""</span>;
        }
    }
    renderData<span class="params">(tags_wrap,tags,<span class="literal">true</span>)</span>;
}
<span class="comment">//添加兴趣</span>
<span class="function"><span class="keyword">function</span> <span class="title">addHobby</span><span class="params">()</span>{</span>
    var str_hobby = $<span class="params">(<span class="string">"#hobby_input"</span>)</span>.value.trim<span class="params">()</span>;
    <span class="keyword">if</span><span class="params">(str_hobby)</span>{
        var hobbyWord = str_hobby.split<span class="params">(/[^<span class="number">0</span>-<span class="number">9</span>a-zA-Z\u4e00-\u9fa5]+/)</span>;
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;hobbyWord.length;i++)</span>{
            <span class="keyword">if</span><span class="params">(!contains<span class="params">(hobby,hobbyWord[i])</span>)</span>{
                <span class="keyword">if</span><span class="params">(hobby.length&lt;<span class="number">10</span>)</span>{
                    hobby.push<span class="params">(hobbyWord[i])</span>;
                }<span class="keyword">else</span>{
                    hobby.shift<span class="params">()</span>;
                    hobby.push<span class="params">(hobbyWord[i])</span>;
                }
            }
        }
    renderData<span class="params">(hobby_wrap,hobby,<span class="literal">false</span>)</span>;
    $<span class="params">(<span class="string">"#hobby_input"</span>)</span>.value = <span class="string">""</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"请输入兴趣"</span>)</span>;
    }
}
</code></pre><p>最后只需把点击删除函数补充完整即可</p>
<pre><code><span class="comment">//给每个tag添加mouse和click事件</span>
<span class="function"><span class="keyword">function</span> <span class="title">tagsEvent</span><span class="params">()</span></span>{
    <span class="keyword">var</span> eles = tags_wrap.children;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;eles.length;i++){
        eles[i].addEventListener(<span class="string">"mouseover"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            e.target.firstChild.insertData(<span class="number">0</span>,<span class="string">'点击删除 '</span>);
        });
        eles[i].addEventListener(<span class="string">"mouseout"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            e.target.firstChild.deleteData(<span class="number">0</span>,<span class="number">4</span>);
        });
        eles[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            <span class="keyword">var</span> node = e.target;
            <span class="comment">//获取当前div在数组中的索引</span>
            <span class="keyword">var</span> index = [].indexOf.call(node.parentNode.children,node);
            tags.splice(index,<span class="number">1</span>);
            <span class="comment">//渲染数据</span>
            renderData(tags_wrap,tags,<span class="literal">true</span>);
        });
    }
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task21.html" target="_blank" rel="external">最终代码</a><br><a href="http://ife.supce.com/task21.html" target="_blank" rel="external">演示地址</a></p>
<blockquote>
<p>时间确实不够用，也没有对页面进行美美的修饰 有时间的话一定补上</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践JavaScript的基本语法、语言特性</li>
<li>练习使用JavaScript实现拖拽功能</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于上个任务，将任务的代码进行抽象、封装，然后在此基础上实现如图中的两个需求：Tag输入和兴趣爱好输入</li>
<li>实现一个tag输入框</li>
<li>要求遇到用户输入空格，逗号，回车时，都自动把当前输入的内容作为一个tag放在输入框下面。</li>
<li>Tag不能有重复的，遇到重复输入的Tag，自动忽视。</li>
<li>每个Tag请做trim处理</li>
<li>最多允许10个Tag，多于10个时，按照录入的先后顺序，把最前面的删掉</li>
<li>当鼠标悬停在tag上时，tag前增加删除二字，点击tag可删除]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 07]]></title>
    <link href="http://blog.supce.com/2016/11/07/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8013/"/>
    <id>http://blog.supce.com/2016/11/07/JavaScript之基础13/</id>
    <published>2016-11-06T16:00:00.000Z</published>
    <updated>2016-11-07T11:50:56.301Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>实践JavaScript数组、字符串相关操作</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于 Task05 进行升级</li>
<li>将新元素输入框从input改为textarea</li>
<li>允许一次批量输入多个内容，格式可以为数字、中文、英文等，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为不同内容的间隔</li>
<li>增加一个查询文本输入框，和一个查询按钮，当点击查询时，将查询词在各个元素内容中做模糊匹配，将匹配到的内容进行特殊标识，如文字颜色等。举例，内容中有abcd，查询词为ab或bc，则该内容需要标识<a id="more"></a>
</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p>首先根据题目要求将HTML写出来，一个div用来存放textarea、input和button。一个div用以最终数据的显示。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"myForm"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">textarea</span> <span class="attribute">id</span>=<span class="value">"data-input"</span> <span class="attribute">class</span>=<span class="value">"form-control"</span> <span class="attribute">rows</span>=<span class="value">"3"</span>&gt;</span><span class="tag">&lt;/<span class="title">textarea</span>&gt;</span>
    <span class="comment">&lt;!-- &lt;input type="text" id="data-input"&gt; --&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"btn-container"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"left-in"</span> <span class="attribute">class</span>=<span class="value">"btn btn-success"</span>&gt;</span>左侧入<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"right-in"</span> <span class="attribute">class</span>=<span class="value">"btn btn-success"</span>&gt;</span>右侧入<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"left-out"</span> <span class="attribute">class</span>=<span class="value">"btn btn-danger"</span>&gt;</span>左侧出<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"right-out"</span> <span class="attribute">class</span>=<span class="value">"btn btn-danger"</span>&gt;</span>右侧出<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"search"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">input</span> <span class="attribute">type</span>=<span class="value">"text"</span> <span class="attribute">id</span>=<span class="value">"search-input"</span> <span class="attribute">class</span>=<span class="value">"form-control"</span>&gt;</span>
        <span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"search"</span> <span class="attribute">class</span>=<span class="value">"btn btn-primary"</span>&gt;</span>查询<span class="tag">&lt;/<span class="title">button</span>&gt;</span>
    <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"list-wrap"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>然后给页面的各个元素添加事件监听器</p>
<pre><code><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        btns[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
            btnHandle(e.target);
        });
    }
    $(<span class="string">"data-input"</span>).addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });
    $(<span class="string">"search-input"</span>).addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });
}
init();
</code></pre><p>写一个btnhandler用以处理不同的事件，针对不同的元素事件调用对应的函数</p>
<pre><code><span class="comment">//点击按钮时的处理逻辑</span>
<span class="function">function <span class="title">btnHandle</span><span class="params">(<span class="keyword">target</span>)</span></span>{
    var id = <span class="keyword">target</span>.id;
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'left-in'</span>:
            dataIn(<span class="string">"left"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-in'</span>:
            dataIn(<span class="string">"right"</span>);
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'left-out'</span>:
            leftOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-out'</span>:
            rightOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'search'</span>:
            search();
            <span class="keyword">break</span>;
    }
    renderData();
}
</code></pre><p>然后就是完成数据的输入和输出函数</p>
<pre><code><span class="comment">//输入数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">dataIn</span><span class="params">(tag)</span>{</span>
    var <span class="built_in">str</span> = $<span class="params">(<span class="string">"data-input"</span>)</span>.value.trim<span class="params">()</span>;
    var dataWord = <span class="built_in">str</span>.split<span class="params">(/[^<span class="number">0</span>-<span class="number">9</span>a-zA-Z\u4e00-\u9fa5]+/)</span>;
    <span class="keyword">if</span><span class="params">(tag == <span class="string">"left"</span>)</span>{
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;dataWord.length;i++)</span>{
            data.unshift<span class="params">(dataWord[i])</span>;
        }
    }<span class="keyword">else</span> <span class="keyword">if</span><span class="params">(tag == <span class="string">"right"</span>)</span>{
        <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;dataWord.length;i++)</span>{
            data.push<span class="params">(dataWord[i])</span>;
        }
    }<span class="keyword">else</span>{
        return;
    }

}
<span class="comment">//左出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">leftOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.shift<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
<span class="comment">//右出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">rightOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.pop<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
</code></pre><p>由于新增了查询功能，所以需要写一个函数用以标记哪些数据被查询，将被包含被查询数据的下标存储在一个数组里</p>
<pre><code><span class="comment">//模糊匹配函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">search</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length)</span>{
        indexs = [];
        var <span class="built_in">str</span> = $<span class="params">(<span class="string">"search-input"</span>)</span>.value.trim<span class="params">()</span>;
        <span class="keyword">if</span><span class="params">(str)</span>{
            <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;data.length;i++)</span>{
                <span class="keyword">if</span><span class="params">(data[i].indexOf<span class="params">(str)</span> != -<span class="number">1</span>)</span>{
                    indexs.push<span class="params">(i)</span>;
                }
            }
            <span class="comment">// console.log(indexs);</span>
        }
    <span class="comment">// console.log(str);</span>
    renderData<span class="params">()</span>;
    }
}
</code></pre><p>最后是数据的渲染函数</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span></span>{
    <span class="keyword">var</span> text = <span class="string">''</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++){
        <span class="keyword">if</span>(isSearched(i)){
            text += <span class="string">'&lt;div class="selected"&gt;'</span> + data[i] + <span class="string">'&lt;/div&gt;'</span>;
        }<span class="keyword">else</span>{
            text += <span class="string">'&lt;div class="list"&gt;'</span> + data[i] + <span class="string">'&lt;/div&gt;'</span>;
        }
    }
    <span class="keyword">var</span> <span class="keyword">list</span> = $(<span class="string">"list-wrap"</span>);
    <span class="keyword">list</span>.innerHTML = text;
    <span class="comment">//给list-wrap中的div添加点击删除事件</span>
    <span class="comment">// var lists = document.getElementsByClassName("list");</span>
    <span class="keyword">var</span> lists = <span class="keyword">list</span>.children;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lists.length;i++){
        lists[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            <span class="keyword">var</span> node = e.target;
            <span class="comment">//获取当前div在数组中的索引</span>
            <span class="keyword">var</span> index = [].indexOf.call(node.parentNode.children,node);
            data.splice(index,<span class="number">1</span>);
            <span class="comment">//更新查询标记数组</span>
            search();
            <span class="comment">//渲染数据</span>
            renderData();
        })
    }
}
</code></pre><p>数据渲染函数在进行数据渲染时，使用了一个函数来检测该数据是否是被检测到的数据</p>
<pre><code><span class="comment">//是否被匹配函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">isSearched</span>(<span class="params">value</span>)</span>{
    <span class="keyword">var</span> flag = <span class="literal">false</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;indexs.length;i++){
        <span class="keyword">if</span>(value == <span class="built_in">parseInt</span>(indexs[i])){
            flag = <span class="literal">true</span>;
            <span class="keyword">return</span> flag;
        }
    }
    <span class="keyword">return</span> flag;
}
</code></pre><hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task20.html" target="_blank" rel="external">代码</a><br><a href="http://ife.supce.com/task20.html" target="_blank" rel="external">演示地址</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>实践JavaScript数组、字符串相关操作</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><ul>
<li>基于 Task05 进行升级</li>
<li>将新元素输入框从input改为textarea</li>
<li>允许一次批量输入多个内容，格式可以为数字、中文、英文等，可以通过用回车，逗号（全角半角均可），顿号，空格（全角半角、Tab等均可）等符号作为不同内容的间隔</li>
<li>增加一个查询文本输入框，和一个查询按钮，当点击查询时，将查询词在各个元素内容中做模糊匹配，将匹配到的内容进行特殊标识，如文字颜色等。举例，内容中有abcd，查询词为ab或bc，则该内容需要标识]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 05&06]]></title>
    <link href="http://blog.supce.com/2016/11/05/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%8012/"/>
    <id>http://blog.supce.com/2016/11/05/JavaScript之基础12/</id>
    <published>2016-11-04T16:00:00.000Z</published>
    <updated>2016-11-05T09:29:01.519Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>初步了解 JavaScript 的事件是什么</li>
<li>初步了解 JavaScript 中的DOM是什么</li>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>练习使用 JavaScript 实现简单的排序算法</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><h2 id="05">05</h2><ul>
<li>模拟一个队列,队列的每个元素是一个数字，初始队列为空</li>
<li>有一个input输入框，以及4个操作按钮</li>
<li>点击”左侧入”,将input中输入的数字从左侧插入队列中；</li>
<li>点击”右侧入”,将input中输入的数字从右侧插入队列中；</li>
<li>点击”左侧出”,读取并删除队列左侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击”右侧出”,读取并删除队列又侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击队列中任何一个元素,则该元素会被从队列中删除<a id="more"></a>
</li>
</ul>
<h2 id="06">06</h2><ul>
<li>基于上个任务</li>
<li>限制输入的数字在10-100</li>
<li>队列元素数量最多限制为60个，当超过60个时，添加元素时alert出提示</li>
<li>队列展现方式变化如图，直接用高度表示数字大小</li>
<li>实现一个简单的排序功能，如冒泡排序（不限制具体算法），用可视化的方法表达出来</li>
</ul>
<hr>
<h1 id="整体思路">整体思路</h1><p><em>第二个任务基于第一个任务，就把两个和一起来写吧</em><br>首先根据任务的要求，将HTML写出来，只需要一个input和若干button用以用户触发不同的事件。</p>
<pre><code>&lt;<span class="tag">input</span> type=<span class="string">"text"</span> id=<span class="string">"data-input"</span>&gt;
&lt;<span class="tag">button</span> id=<span class="string">"left-in"</span>&gt;左侧入&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"right-in"</span>&gt;右侧入&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"left-out"</span>&gt;左侧出&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"right-out"</span>&gt;右侧出&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"sort"</span>&gt;冒泡排序&lt;/button&gt;
&lt;<span class="tag">button</span> id=<span class="string">"random"</span>&gt;随机生成一组数据&lt;/button&gt;

&lt;<span class="tag">div</span> id=<span class="string">"list-wrap"</span>&gt;&lt;/div&gt;
</code></pre><p>然后给相应的元素绑定点击事件</p>
<pre><code><span class="comment">//初始化 添加事件监听器</span>
<span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>{
    <span class="keyword">var</span> btns = <span class="built_in">document</span>.getElementsByTagName(<span class="string">"button"</span>);
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;btns.length;i++){
        btns[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
            btnHandle(e.target);
        });
    }
    $(<span class="string">"data-input"</span>).addEventListener(<span class="string">"focus"</span>,<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>{
        e.target.value = <span class="string">""</span>;
    });
}
init();
</code></pre><p>添加事件监听器后，需要根据事件调用对应的数据处理函数，处理之后将数据渲染到页面上</p>
<pre><code><span class="comment">//点击按钮时的处理逻辑</span>
<span class="function">function <span class="title">btnHandle</span><span class="params">(<span class="keyword">target</span>)</span></span>{
    var id = <span class="keyword">target</span>.id;
    <span class="keyword">switch</span>(id){
        <span class="keyword">case</span> <span class="string">'left-in'</span>:
            leftIn();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-in'</span>:
            rightIn();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'left-out'</span>:
            leftOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'right-out'</span>:
            rightOut();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'random'</span>:
            randomData();
            <span class="keyword">break</span>;
        <span class="keyword">case</span> <span class="string">'sort'</span>:
            sortData();
            <span class="keyword">break</span>;
    }
    <span class="comment">//渲染数据</span>
    renderData()
}
</code></pre><p>对于数据，只需要一个数组来模拟队列，所以下面四个输入输出函数都是对数组的操作，当然也可以将他们整合一下，变成一个函数或者两个函数(一个输入一个输出，整合的代码在最终代码中查看)</p>
<pre><code><span class="comment">//左入数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">leftIn</span><span class="params">()</span>{</span>
    var num = parseInt<span class="params">($<span class="params">(<span class="string">"data-input"</span>)</span>.value)</span>;
    <span class="keyword">if</span><span class="params">(isNaN<span class="params">(num)</span> || num &lt;<span class="number">10</span> || num &gt; <span class="number">100</span>)</span>{
            alert<span class="params">(<span class="string">"请输入10-100之间的数字"</span>)</span>;
        }<span class="keyword">else</span>{
            <span class="keyword">if</span><span class="params">(data.length&lt;<span class="number">60</span>)</span>{
                data.unshift<span class="params">(num)</span>;
            }<span class="keyword">else</span>{
                alert<span class="params">(<span class="string">"最多添加60个"</span>)</span>;
            }
    }   
}
<span class="comment">//右入数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">rightIn</span><span class="params">()</span>{</span>
    var num = parseInt<span class="params">($<span class="params">(<span class="string">"data-input"</span>)</span>.value)</span>;
    <span class="keyword">if</span><span class="params">(isNaN<span class="params">(num)</span> || num &lt;<span class="number">10</span> || num &gt; <span class="number">100</span>)</span>{
            alert<span class="params">(<span class="string">"请输入10-100之间的数字"</span>)</span>;
    }<span class="keyword">else</span>{
        <span class="keyword">if</span><span class="params">(data.length&lt;<span class="number">60</span>)</span>{
            data.push<span class="params">(num)</span>;
        }<span class="keyword">else</span>{
            alert<span class="params">(<span class="string">"最多添加60个"</span>)</span>;
        }
    }
}
<span class="comment">//左出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">leftOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.shift<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
<span class="comment">//右出数据处理函数</span>
<span class="function"><span class="keyword">function</span> <span class="title">rightOut</span><span class="params">()</span>{</span>
    <span class="keyword">if</span><span class="params">(data.length &gt; <span class="number">0</span>)</span>{
        var item = data.pop<span class="params">()</span>;
        alert<span class="params">(item)</span>;
    }<span class="keyword">else</span>{
        alert<span class="params">(<span class="string">"目前为空，请先输入"</span>)</span>;
    }
}
</code></pre><p>最后需要将处理过的数据渲染到页面上，根据要求，我们将每个div的高度设置为对应的数字，单位为像素。然后对每个div添加点击删除事件，这里有个技巧，利用call函数来获取数组的索引值，调用splice函数，根据索引值将数组中的数据删除，最后再次渲染数据。</p>
<pre><code><span class="comment">//渲染数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderData</span><span class="params">()</span></span>{
    <span class="keyword">var</span> text = <span class="string">''</span>;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++){
        text += <span class="string">'&lt;div class="list" style="height:'</span>+data[i]+<span class="string">'px;line-height:'</span>+data[i]+<span class="string">'px"&gt;'</span> + data[i] + <span class="string">'&lt;/div&gt;'</span>;
    }
    <span class="keyword">var</span> <span class="keyword">list</span> = $(<span class="string">"list-wrap"</span>);
    <span class="keyword">list</span>.innerHTML = text;
    <span class="comment">//给list-wrap中的div添加点击删除事件</span>
    <span class="comment">// var lists = document.getElementsByClassName("list");</span>
    <span class="keyword">var</span> lists = <span class="keyword">list</span>.children;
    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;lists.length;i++){
        lists[i].addEventListener(<span class="string">"click"</span>,<span class="function"><span class="keyword">function</span><span class="params">(e)</span></span>{
            <span class="keyword">var</span> node = e.target;
            <span class="comment">//获取当前div在数组中的索引</span>
            <span class="keyword">var</span> index = [].indexOf.call(node.parentNode.children,node);
            data.splice(index,<span class="number">1</span>);
            renderData();
        })
    }
}
</code></pre><p>最后题目要求能够可视化的将排序算法展示出来，这种情景，可以利用<code>setInterval</code>函数，指定每次周期的时间间隔，将排序算法写在run函数中。在执行过程中，每排一次序，就将数据渲染一次，最终实现了排序的可视化。</p>
<pre><code><span class="comment">//冒泡排序</span>
<span class="function"><span class="keyword">function</span> <span class="title">sortData</span><span class="params">()</span>{</span>
    var i=<span class="number">0</span>,j=<span class="number">1</span>,temp,len=data.length,timer=null;
    timer = setInterval<span class="params">(run,<span class="number">15</span>)</span>;
    <span class="function"><span class="keyword">function</span> <span class="title">run</span><span class="params">()</span>{</span>
        <span class="keyword">if</span><span class="params">(i&lt;len)</span>{
            <span class="keyword">if</span><span class="params">(j&lt;len)</span>{
                <span class="keyword">if</span><span class="params">(data[i]&gt;data[j])</span>{
                    temp = data[i];
                    data[i] = data[j];
                    data[j] = temp;
                    renderData<span class="params">()</span>;
                }
                j++;
            }<span class="keyword">else</span>{
                i++;
                j = i + <span class="number">1</span>;
            }
        }<span class="keyword">else</span>{
            clearInterval<span class="params">(timer)</span>;
            return;
        }
    }
}
</code></pre><p>最后的最后，给页面添加简单的样式就可以了。当然为了便于演示，也添加了一个随机生成数据的按钮。</p>
<hr>
<h1 id="最终代码">最终代码</h1><p><a href="https://github.com/byvector/code-monkey/blob/master/task18.html" target="_blank" rel="external">代码</a><br><a href="http://ife.supce.com/task18.html" target="_blank" rel="external">演示效果</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="任务目的">任务目的</h1><ul>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>初步了解 JavaScript 的事件是什么</li>
<li>初步了解 JavaScript 中的DOM是什么</li>
<li>学习与实践 JavaScript 的基本语法、语言特性</li>
<li>练习使用 JavaScript 实现简单的排序算法</li>
</ul>
<hr>
<h1 id="任务描述">任务描述</h1><h2 id="05">05</h2><ul>
<li>模拟一个队列,队列的每个元素是一个数字，初始队列为空</li>
<li>有一个input输入框，以及4个操作按钮</li>
<li>点击”左侧入”,将input中输入的数字从左侧插入队列中；</li>
<li>点击”右侧入”,将input中输入的数字从右侧插入队列中；</li>
<li>点击”左侧出”,读取并删除队列左侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击”右侧出”,读取并删除队列又侧第一个元素，并弹窗显示元素中数值；</li>
<li>点击队列中任何一个元素,则该元素会被从队列中删除]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[IFE Task 04]]></title>
    <link href="http://blog.supce.com/2016/11/03/JavaScript%E4%B9%8B%E5%9F%BA%E7%A1%804/"/>
    <id>http://blog.supce.com/2016/11/03/JavaScript之基础4/</id>
    <published>2016-11-02T16:00:00.000Z</published>
    <updated>2016-11-03T12:02:03.392Z</updated>
    <content type="html"><![CDATA[<h1 id="任务目的">任务目的</h1><hr>
<ul>
<li>在上一任务基础上继续JavaScript的体验</li>
<li>接触更加复杂的表单对象</li>
<li>实现页面上的一个完整交互功能</li>
<li>用DOM实现一个柱状图图表</li>
</ul>
<a id="more"></a>
<h1 id="任务描述">任务描述</h1><ul>
<li>参考以下示例代码，原始数据包含几个城市的空气质量指数数据</li>
<li>用户可以选择查看不同的时间粒度，以选择要查看的空气质量指数是以天为粒度还是以周或月为粒度</li>
<li>天：显示每天的空气质量指数</li>
<li>周：以自然周（周一到周日）为粒度，统计一周7天的平均数为这一周的空气质量数值，如果数据中缺少一个自然周的几天，则按剩余天进行计算</li>
<li>月：以自然月为粒度，统一一个月所有天的平均数为这一个月的空气质量数值</li>
<li>用户可以通过select切换城市</li>
<li>通过在”aqi-chart-wrap”里添加DOM，来模拟一个柱状图图表，横轴是时间，纵轴是空气质量指数，参考图（点击打开）。天、周、月的数据只根据用户的选择显示一种。</li>
<li>天：每天的数据是一个很细的矩形</li>
<li>周：每周的数据是一个矩形</li>
<li>月：每周的数据是一个很粗的矩形</li>
<li>鼠标移动到柱状图的某个柱子时，用title属性提示这个柱子的具体日期和数据</li>
</ul>
<h1 id="整体思路">整体思路</h1><p>首先给相应的表单元素添加事件监听器，当事件触发时，判断选项是否发生了变化，如果发生变化则调用相应的处理函数，否则返回。</p>
<p>在处理函数中，首先根据用户选择的选项对数据进行操作，最后将数据渲染为图表。</p>
<h1 id="最终代码">最终代码</h1><h2 id="html">html</h2><pre><code><span class="tag">&lt;<span class="title">fieldset</span> <span class="attribute">id</span>=<span class="value">"form-gra-time"</span>&gt;</span>
   <span class="tag">&lt;<span class="title">legend</span>&gt;</span>请选择日期粒度：<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span>&gt;</span>日<span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"gra-time"</span> <span class="attribute">value</span>=<span class="value">"day"</span> <span class="attribute">type</span>=<span class="value">"radio"</span> <span class="attribute">checked</span>=<span class="value">"checked"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span>&gt;</span>周<span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"gra-time"</span> <span class="attribute">value</span>=<span class="value">"week"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
   <span class="tag">&lt;<span class="title">label</span>&gt;</span>月<span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">"gra-time"</span> <span class="attribute">value</span>=<span class="value">"month"</span> <span class="attribute">type</span>=<span class="value">"radio"</span>&gt;</span><span class="tag">&lt;/<span class="title">label</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
 <span class="tag">&lt;<span class="title">fieldset</span>&gt;</span>
   <span class="tag">&lt;<span class="title">legend</span>&gt;</span>请选择查看的城市：<span class="tag">&lt;/<span class="title">legend</span>&gt;</span>
   <span class="tag">&lt;<span class="title">select</span> <span class="attribute">id</span>=<span class="value">"city-select"</span>&gt;</span>
   <span class="tag">&lt;/<span class="title">select</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">fieldset</span>&gt;</span>
 <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"aqi-chart-wrap"</span>&gt;</span>
 <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
 <span class="tag">&lt;<span class="title">script</span> <span class="attribute">src</span>=<span class="value">"js/task17.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
</code></pre><h2 id="js">js</h2><pre><code><span class="comment">/* 数据格式演示
var aqiSourceData = {
  "北京": {
    "2016-01-01": 10,
    "2016-01-02": 10,
    "2016-01-03": 10,
    "2016-01-04": 10
  }
};
*/</span>
var $ = <span class="function"><span class="keyword">function</span><span class="params">(id)</span>{</span>
  return document.getElementById<span class="params">(id)</span>;
}
<span class="function"><span class="keyword">function</span> <span class="title">getRadioValue</span><span class="params">(name)</span>{</span>
  var obj = document.getElementsByName<span class="params">(name)</span>;
  <span class="keyword">for</span><span class="params">(i=<span class="number">0</span>;i&lt;obj.length;i++)</span>{
    <span class="keyword">if</span><span class="params">(obj[i].checked)</span>{
      return obj[i].value;
    }
  }
  return <span class="string">"undefined"</span>;
}
<span class="comment">// 以下两个函数用于随机模拟生成测试数据</span>
<span class="function"><span class="keyword">function</span> <span class="title">getDateStr</span><span class="params">(dat)</span> {</span>
  var y = dat.getFullYear<span class="params">()</span>;
  var m = dat.getMonth<span class="params">()</span> + <span class="number">1</span>;
  m = m &lt; <span class="number">10</span> ? '<span class="number">0</span>' + m : m;
  var d = dat.getDate<span class="params">()</span>;
  d = d &lt; <span class="number">10</span> ? '<span class="number">0</span>' + d : d;
  return y + '-' + m + '-' + d;
}
<span class="function"><span class="keyword">function</span> <span class="title">randomBuildData</span><span class="params">(seed)</span> {</span>
  var returnData = {};
  var dat = new Date<span class="params">(<span class="string">"2016-01-01"</span>)</span>;
  var datStr = '';
  <span class="keyword">for</span> <span class="params">(var i = <span class="number">1</span>; i &lt; <span class="number">92</span>; i++)</span> {
    datStr = getDateStr<span class="params">(dat)</span>;
    returnData[datStr] = Math.<span class="built_in">ceil</span><span class="params">(Math.random<span class="params">()</span> * seed)</span>;
    dat.setDate<span class="params">(dat.getDate<span class="params">()</span> + <span class="number">1</span>)</span>;
  }
  return returnData;
}
var aqiSourceData = {
  <span class="string">"北京"</span>: randomBuildData<span class="params">(<span class="number">500</span>)</span>,
  <span class="string">"上海"</span>: randomBuildData<span class="params">(<span class="number">300</span>)</span>,
  <span class="string">"广州"</span>: randomBuildData<span class="params">(<span class="number">200</span>)</span>,
  <span class="string">"深圳"</span>: randomBuildData<span class="params">(<span class="number">100</span>)</span>,
  <span class="string">"成都"</span>: randomBuildData<span class="params">(<span class="number">300</span>)</span>,
  <span class="string">"西安"</span>: randomBuildData<span class="params">(<span class="number">500</span>)</span>,
  <span class="string">"福州"</span>: randomBuildData<span class="params">(<span class="number">100</span>)</span>,
  <span class="string">"厦门"</span>: randomBuildData<span class="params">(<span class="number">100</span>)</span>,
  <span class="string">"沈阳"</span>: randomBuildData<span class="params">(<span class="number">500</span>)</span>
};
<span class="comment">// console.log(aqiSourceData);</span>
<span class="comment">// 用于渲染图表的数据</span>
var chartData = {};
<span class="comment">// 记录当前页面的表单选项</span>
var pageState = {
  nowSelectCity: <span class="string">"北京"</span>,
  nowGraTime: <span class="string">"day"</span>
}
<span class="comment">/**
 * 渲染图表
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">renderChart</span><span class="params">()</span> {</span>
  var <span class="built_in">text</span> = <span class="string">""</span>;
  <span class="keyword">for</span><span class="params">(item in chartData)</span>{
    var <span class="built_in">color</span> = <span class="string">"#"</span> + Math.<span class="built_in">floor</span><span class="params">(Math.random<span class="params">()</span> * <span class="number">0</span>xFFFFFF)</span>.toString<span class="params">(<span class="number">16</span>)</span>;
    <span class="built_in">text</span> += '&lt;div title=<span class="string">"'+item+"</span> : <span class="string">"+chartData[item]+'"</span> style=<span class="string">"height:'+chartData[item]+'px;background-color:'+color+'"</span>&gt;&lt;/div&gt;';
  }
  var aqiChartWrap = document.getElementsByClassName<span class="params">(<span class="string">"aqi-chart-wrap"</span>)</span>[<span class="number">0</span>];
  <span class="comment">// console.log(text);</span>
  aqiChartWrap.innerHTML = <span class="built_in">text</span>;
}
<span class="comment">/**
 * 日、周、月的radio事件点击时的处理函数
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">graTimeChange</span><span class="params">()</span> {</span>
  <span class="comment">// 确定是否选项发生了变化 </span>
  var time = getRadioValue<span class="params">(<span class="string">"gra-time"</span>)</span>;
  <span class="keyword">if</span><span class="params">(time == pageState[<span class="string">"nowGraTime"</span>])</span>{
    return;
  }<span class="keyword">else</span>{
    <span class="comment">// console.log(time);</span>
    pageState[<span class="string">"nowGraTime"</span>] = time;
  }

  <span class="comment">// 设置对应数据</span>
  initAqiChartData<span class="params">()</span>;
  <span class="comment">// 调用图表渲染函数</span>
  renderChart<span class="params">()</span>;
}
<span class="comment">/**
 * select发生变化时的处理函数
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">citySelectChange</span><span class="params">(target)</span> {</span>
  <span class="comment">// 确定是否选项发生了变化 </span>
  var citySelect = target.options[target.selectedIndex].value;
  <span class="keyword">if</span><span class="params">(citySelect == pageState[<span class="string">"nowSelectCity"</span>])</span>{
    return;
  }<span class="keyword">else</span>{
    <span class="comment">// console.log(citySelect);</span>
    pageState[<span class="string">"nowSelectCity"</span>] = citySelect;
  }
  <span class="comment">// 设置对应数据</span>
  initAqiChartData<span class="params">()</span>;
  <span class="comment">// 调用图表渲染函数</span>
  renderChart<span class="params">()</span>;
}
<span class="comment">/**
 * 初始化日、周、月的radio事件，当点击时，调用函数graTimeChange
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">initGraTimeForm</span><span class="params">()</span> {</span>
  var form = $<span class="params">(<span class="string">"form-gra-time"</span>)</span>;
  var times = form.elements[<span class="string">"gra-time"</span>];
  <span class="keyword">for</span><span class="params">(var i=<span class="number">0</span>;i&lt;times.length;i++)</span>{
    times[i].addEventListener<span class="params">(<span class="string">"change"</span>,graTimeChange,<span class="literal">false</span>)</span>;
  }
}
<span class="comment">/**
 * 初始化城市Select下拉选择框中的选项
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">initCitySelector</span><span class="params">()</span> {</span>
  <span class="comment">// 读取aqiSourceData中的城市，然后设置id为city-select的下拉列表中的选项</span>
  <span class="keyword">for</span><span class="params">(items in aqiSourceData)</span>{
    $<span class="params">(<span class="string">"city-select"</span>)</span>.innerHTML += <span class="string">"&lt;option&gt;"</span>+items+<span class="string">"&lt;/option&gt;"</span>;
  }
  <span class="comment">// 给select设置事件，当选项发生变化时调用函数citySelectChange</span>
  $<span class="params">(<span class="string">"city-select"</span>)</span>.addEventListener<span class="params">(<span class="string">"change"</span>,function<span class="params">(e)</span>{
    citySelectChange<span class="params">(e.target)</span>;
  })</span>;
}
<span class="comment">/**
 * 初始化图表需要的数据格式
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">initAqiChartData</span><span class="params">()</span> {</span>
  <span class="comment">// 将原始的源数据处理成图表需要的数据格式</span>
  nowCityData = aqiSourceData[pageState.nowSelectCity];
  switch<span class="params">(pageState.nowGraTime)</span>{
    case <span class="string">"day"</span>:
      chartData = nowCityData;
      <span class="comment">// console.log("day");</span>
      break;
    case <span class="string">"week"</span>:
      chartData = {};
      var dataSum = <span class="number">0</span>,daySum = <span class="number">0</span>,week = <span class="number">0</span>;
      <span class="keyword">for</span><span class="params">(item in nowCityData)</span>{
        dataSum += nowCityData[item];
        daySum++;
        <span class="keyword">if</span><span class="params">(new Date<span class="params">(item)</span>.getDay<span class="params">()</span> == <span class="number">6</span>)</span>{  <span class="comment">//以自然周统计</span>
          week++;
          chartData[<span class="string">"第"</span>+week+<span class="string">"周"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
          dataSum = <span class="number">0</span>;
          daySum = <span class="number">0</span>;
        }
      }
      <span class="comment">//如果最后不满一周，则按剩余天数计算</span>
      <span class="keyword">if</span><span class="params">(daySum != <span class="number">0</span>)</span>{
        week++;
        chartData[<span class="string">"第"</span>+week+<span class="string">"周"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
      }
      <span class="comment">// console.log("week");</span>
      break;
    case <span class="string">"month"</span>:
      chartData = {};
      var dataSum=<span class="number">0</span>,daySum=<span class="number">0</span>,curMonth = -<span class="number">1</span>;
      <span class="keyword">for</span><span class="params">(var item in nowCityData)</span>{
        var date = new Date<span class="params">(item)</span>;
        var month = date.getMonth<span class="params">()</span>;
        <span class="keyword">if</span><span class="params">(month !== curMonth)</span>{
          <span class="keyword">if</span><span class="params">(daySum &gt; <span class="number">0</span>)</span>{
            chartData[curMonth + <span class="number">1</span> +<span class="string">"月份"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
          }
          curMonth = month;
          daySum = <span class="number">0</span>;
          dataSum = <span class="number">0</span>;
        }
        dataSum += nowCityData[item];
        daySum++;
      }
      <span class="comment">//最后一月按实际天数计算</span>
      <span class="keyword">if</span><span class="params">(daySum &gt; <span class="number">0</span>)</span>{
        chartData[month + <span class="number">1</span> +<span class="string">"月份"</span>] = Math.<span class="built_in">floor</span><span class="params">(dataSum/daySum)</span>;
      }
      console.<span class="built_in">log</span><span class="params">(chartData)</span>;
      break;
  }
}
<span class="comment">/**
 * 初始化函数
 */</span>
<span class="function"><span class="keyword">function</span> <span class="title">init</span><span class="params">()</span> {</span>
  initGraTimeForm<span class="params">()</span>
  initCitySelector<span class="params">()</span>;
  initAqiChartData<span class="params">()</span>;
  renderChart<span class="params">()</span>;
}
init<span class="params">()</span>;
</code></pre><h2 id="CSS">CSS</h2><pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
  <span class="class">.aqi-chart-wrap</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> flex</span></span>;
    <span class="rule"><span class="attribute">justify-content</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">align-items</span>:<span class="value"> flex-end</span></span>;
    <span class="rule"><span class="attribute">align-content</span>:<span class="value"> center</span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">20px</span> auto</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span> <span class="number">10px</span></span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">90%</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">600px</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#333</span></span></span>;
  }</span>
  <span class="class">.aqi-chart-wrap</span> <span class="tag">div</span><span class="rules">{
    <span class="rule"><span class="attribute">flex</span>:<span class="value"> <span class="number">1</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#000</span></span></span>;
    <span class="rule"><span class="attribute">border-bottom</span>:<span class="value"> none</span></span>;
    <span class="rule"><span class="attribute">margin-right</span>:<span class="value"><span class="number">3px</span></span></span>;
  }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>最终效果:<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/ife-task-17.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="任务目的">任务目的</h1><hr>
<ul>
<li>在上一任务基础上继续JavaScript的体验</li>
<li>接触更加复杂的表单对象</li>
<li>实现页面上的一个完整交互功能</li>
<li>用DOM实现一个柱状图图表</li>
</ul>]]>
    
    </summary>
    
      <category term="JavaScript" scheme="http://blog.supce.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[HTTP之概述]]></title>
    <link href="http://blog.supce.com/2016/10/21/HTTP%E4%B9%8B%E6%A6%82%E8%BF%B0/"/>
    <id>http://blog.supce.com/2016/10/21/HTTP之概述/</id>
    <published>2016-10-20T16:00:00.000Z</published>
    <updated>2016-10-21T11:59:41.365Z</updated>
    <content type="html"><![CDATA[<hr>
<blockquote>
<p>去看瓷器古董的时候，如果卖家直接把瓷器递给买家，容易失手掉下去，也不好判定到底是谁的责任。于是有了这样一条规矩：卖家会把瓷器放在桌子上，离手之后，买家再去拿。这样既保证了瓷器在传递过程中的安全性，也容易分辨是谁失手打碎的瓷器。</p>
</blockquote>
<h1 id="Web客户端和服务器">Web客户端和服务器</h1><p>上面这条规矩规定了贵重瓷器是如何在买家与卖家之间传递而不被破坏的。大家都知道Web内容都是存在Web服务器上的。那么Web客户端(最常见的是浏览器)与服务器之间的信息什么时候传递、如何传递、具体传递什么，并且能够保证数据在传输过程中不会被损坏或产生混乱？于是就有了HTTP。</p>
<p>HTTP是超文本传输协议的英文缩写。既然要保证传输过程中数据不被损坏，说明HTTP是一种可靠的数据传输协议。当我们想浏览某个页面时，浏览器会向服务器发送一个HTTP请求。服务器会寻找所期望的对象，如果存在，就将对象、对象类型。对象长度以及其他的一些信息放在HTTP响应中发送给客户端。</p>
<p>下图可能会更加直观：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http1.png" alt=""></p>
<a id="more"></a>
<p>上图可以发现，要想浏览一个页面，最主要的是HTTP请求和HTTP响应。现实中，如果我们想去张三家，首先得知道他的家庭住址。HTTP请求也是一样，在发送请求时，必须知道请求的资源具体在哪，这就需要借助URL。URL是统一资源定位符的英文缩写，它描述了一台特定服务器上某个资源的特定位置。一个具体的URL实例如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http2.png" alt=""></p>
<p>下面就具体看看一次HTTP请求和响应是怎样的。比如，我们想要访问Baidu的首页，借助chrome，首先查看请求头：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http3.png" alt=""></p>
<p>第一行为：<code>GET / HTTP/1.1</code> HTTP支持几种不同的请求命令，这些命令被称为HTTP Method。每条HTTP请求都包含一个方法，这个方法会告诉服务器具体执行什么动作。下图是五种常见的HTTP方法：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http4.png" alt=""></p>
<p>对于<code>HTTP/1.1</code>是现在使用的HTTP协议的版本。</p>
<p>第二行host是这次请求的主机。</p>
<p>第三行<code>Connection: keep-alive</code> keep-alive功能使客户端到服务器端的连接持续有效,当出现对服务器的后继请求时，keep-alive功能避免了建立或者重新建立连接。</p>
<p>下一行为<code>Cache-Control: max-age=0</code> Cache-Control指定请求和响应遵循的缓存机制。在请求消息或响应消息中设置Cache-Control并不会修改另一个消息处理过程中的缓存处理过程。请求时的缓存指令包括no-cache、no-store、max-age、max-stale、min-fresh、only-if-cached。其中，max-age指示客户机可以接收生存期不大于指定时间（以秒为单位）的响应。</p>
<p>然后是<code>Upgrade-Insecure-Requests: 1</code> 这个是和https有关。服务器的响应头有时候可能会有<code>Content-Security-Policy: upgrade-insecure-requests</code>，该指令用于让浏览器自动升级请求从http到https,用于大量包含http资源的http网页直接升级到https而不会报错。简洁的来讲,就相当于在http和https之间起的一个过渡作用。而对于请求头的<code>Upgrade-Insecure-Requests:1</code>，则是告诉服务器，自己支持这种操作，也就是我能读懂你服务器发过来的上面这条信息，并且在以后发请求的时候不用http而用https。</p>
<blockquote>
<p>具体可以参考小胡子哥的一篇<a href="http://www.cnblogs.com/hustskyking/archive/2015/08/21/upgrade-insecure-requests.html" target="_blank" rel="external">blog</a>。</p>
</blockquote>
<p>再往下是<code>User-Agent</code>，它包含了发出请求的用户信息，通常是用户操作系统、浏览器版本、内核等。</p>
<p>再下面三个是客户端希望接收的数据类型、数据编码方式和支持的语言。</p>
<p>最后则是我们的Cookie。</p>
<p>下面再来分析下响应头，具体的响应头如下图</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http5.png" alt=""></p>
<p>第一行为：<code>200 OK</code> 我们把它称为状态码。每条HTTP响应报文返回时都会携带一个状态码，状态码是一个三位数的代码，告知客户端请求是否成功，或者采取其他的动作。下图为几种常用的状态码：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http6.png" alt=""></p>
<blockquote>
<p>有些人访问Google，说404了，其实是不正确的。</p>
</blockquote>
<p>第二行为：<code>Server: bfe/1.0.8.18</code> Server响应头包含处理请求的原始服务器的软件信息。BFE全称是Baidu Front End，是百度自己研发的一套前端接入系统。查看网易官网是 <code>Server:nginx</code>。</p>
<p>再往下是Date头域，它表示消息发送的时间，时间的描述格式由rfc822定义。例如，Date:Mon,31Dec200104:25:57GMT。Date描述的时间表示世界标准时，换算成本地时间，需要知道用户所在的时区。</p>
<p>之后是<code>Content-Type: text/html;charset=utf-8</code>，浏览器会根据Content-Type来决定如何显示返回的消息体内容。HTML格式的文本文档由<code>text/html</code>类型来标记。其他常用类型如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http7.png" alt=""></p>
<p>然后再看<code>Cache-Control: private</code>，和请求头不太一样，对于响应消息中的指令，具体包括public、private、no-cache、no-store、no-transform、must-revalidate、proxy-revalidate、max-age。Private指示对于单个用户的整个或部分响应消息，不能被共享缓存处理。这允许服务器仅仅描述当前用户的部分响应消息，此响应消息对于其他用户的请求无效。</p>
<p><code>X-UA-Compatible: IE=Edge,chrome=1</code> 这里是设置浏览器的兼容模式，强制浏览器按照特定的版本标准进行渲染。百度这里设置IE渲染模式是照最高的标准模式解析页面，chrome=1则可以激活Chrome Frame。</p>
<p>然后是<code>Strict-Transport-Security: max-age=604800</code>，trict Transport Security(通常简称为HSTS)是一个安全功能，它告诉浏览器只能通过HTTPS访问当前资源,禁止HTTP方式。</p>
<p>最后是我们的响应主体，也就是网页的具体内容：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http8.png" alt=""></p>
<hr>
<h1 id="TCP/IP">TCP/IP</h1><p>上面主要是浏览器发送请求，然后服务器做出响应，浏览器解析完响应后把内容呈现。但是，从服务器到浏览器这一过程的信息又是如何传递的呢？这就需要祭出计算机网络课程里的一张图了：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http9.png" alt=""></p>
<p>由上图可以看出，HTTP是个应用层的协议。HTTP并不关心网络通信的具体细节，它把联网的细节都交给了通用、可靠的TCP/IP协议。简单来说HTTP协议位于TCP/IP的上层，浏览器与服务器之间是HTTP使用TCP来传输数据。至于TCP/IP的详细内容以后再专门拿一篇文章来讲。这里主要说的还是浏览器与服务器通信的一个大致过程。</p>
<p>最后用一张图再来解释一下浏览器与服务器的连接与处理：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http10.png" alt=""></p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<blockquote>
<p>去看瓷器古董的时候，如果卖家直接把瓷器递给买家，容易失手掉下去，也不好判定到底是谁的责任。于是有了这样一条规矩：卖家会把瓷器放在桌子上，离手之后，买家再去拿。这样既保证了瓷器在传递过程中的安全性，也容易分辨是谁失手打碎的瓷器。</p>
</blockquote>
<h1 id="Web客户端和服务器">Web客户端和服务器</h1><p>上面这条规矩规定了贵重瓷器是如何在买家与卖家之间传递而不被破坏的。大家都知道Web内容都是存在Web服务器上的。那么Web客户端(最常见的是浏览器)与服务器之间的信息什么时候传递、如何传递、具体传递什么，并且能够保证数据在传输过程中不会被损坏或产生混乱？于是就有了HTTP。</p>
<p>HTTP是超文本传输协议的英文缩写。既然要保证传输过程中数据不被损坏，说明HTTP是一种可靠的数据传输协议。当我们想浏览某个页面时，浏览器会向服务器发送一个HTTP请求。服务器会寻找所期望的对象，如果存在，就将对象、对象类型。对象长度以及其他的一些信息放在HTTP响应中发送给客户端。</p>
<p>下图可能会更加直观：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/http1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="HTTP" scheme="http://blog.supce.com/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[关于编码(一)]]></title>
    <link href="http://blog.supce.com/2016/10/19/%E5%85%B3%E4%BA%8E%E7%BC%96%E7%A0%81(%E4%B8%80)/"/>
    <id>http://blog.supce.com/2016/10/19/关于编码(一)/</id>
    <published>2016-10-18T16:00:00.000Z</published>
    <updated>2016-10-19T13:21:01.737Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="从英文单词和汉字说起">从英文单词和汉字说起</h1><p>世有万物，人类为了区分，给万物冠以不同的名称。英文单词由26个字母组成，对于天空，人们用字母s，k，y表示，即：sky；对于猫用c，a，t，表示，即cat；对于狗用d,o,t表示，即：dog。</p>
<p>这些名字都是随意的，没有什么原因说明为什么不把猫称为狗或不把狗称为猫。因此可以说英语词汇就是一种用26个符号(字母)进行的编码。<br>刚开始可以用几个字母，很短的单词来命名事物。随着已经约定事物的单词越来越多，后期事物的单词也越来越长。估计这也是很多自然事物的单词比较短，而一些近现代词汇比较长的原因吧。<br>汉字和英文单词有些不同。汉字最初是象形文字。通过模拟物体的形状来表示某一类物品。</p>
<p>随着不断的模拟，又从这些最初的象形文字归纳提炼出“点”、“横”、“竖”、“撇”、“捺”等笔画。然后再利用这些笔画进行组合，创立出不同的文字，用这些文字标记不同的物品。所以，也可以说汉字也是一种编码，甚至要比英文单词更加复杂，能够创立更多的组合。<br>比如下面表示太阳的“日”字。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma1.png" alt=""></p>
<a id="more"></a>
<hr>
<h1 id="由摩斯密码、盲文到二元编">由摩斯密码、盲文到二元编</h1><p>由于应用场景的不同，人们对于信息的表示有着不同需求。字母可以通过写在纸上进行信息的传递，但是在有些场景不适合，比如说盲人或者电报机是无法识别纸质上的文字的。</p>
<p>摩尔斯电码（又译为摩斯密码，Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。它的代码包括五种： 点、划、点和划之间的停顿、每个字符间短的停顿（在点和划之间）、每个词之间中等的停顿以及句子之间长的停顿。</p>
<p><em>点（.）和划（-），或叫“滴”（Dit）和“答”（Dah）</em></p>
<p>英文字母可以用下图表示:</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma2.png" alt=""></p>
<p>为了便于识别(译码)，树状图可能会更清晰：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma3.jpg" alt=""></p>
<p>摩尔斯电码被称为二元码（binary code），因为编码中仅含“滴”和“嗒”。这与一个硬<br>币很相似，硬币着地时只可能是正面或反面。二元事物（例如硬币）、二元编码（例如摩尔斯电码）常常用2的乘方来描述。</p>
<p>下面来解析下盲文，来看看它是如何工作的。我们并不是要真的学习布莱叶盲文，而且也无须刻意记住什么关于它的内容。我们仅仅希望从中窥探到编码的一些本质。</p>
<p>在布莱叶盲文中，每个在书写文字中用到的符号——具体来说就是字母、数字和标点符号——都被编码成为2×3的点码单元中的一个或者多个凸起的点。这个点码单元包含的点通常使用1到6的数字来编号。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma4.jpg" alt=""></p>
<blockquote>
<p>下面我们约定：大点表示这是一个凸起的点，小点则表示其对应的位置是平的</p>
</blockquote>
<p>对于6个位置，我们可以由2的6次方=64种组合。</p>
<p>对于26个字母表示法如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma5.jpg" alt=""></p>
<p>甚至可以区分大小写————规定6号凸点为大写标识符，如果表示大写“B”，如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma6.png" alt=""></p>
<p>大写字母标识符表示紧随它的字母（而且仅仅是紧随它的字母）应该被译为大写。类似这样的编码被称为“逃逸码”（escape codes）。逃逸码让你“逃离”对编码串单调的、一成不变的解析，而转入一种新的解析方式中。</p>
<hr>
<h1 id="二进制数">二进制数</h1><p>二进制数是由0，1两个数码表示数的。</p>
<p>让我们再回头看看之前提到的由点、划组成其间用空格分开的摩尔斯电码。摩尔斯电码看上去不像是由0和1组成的，但它确实是。</p>
<p>下面回忆一下摩尔斯电码的编码规则：划的长度等于点长度的三倍；单个的点或划之间用长度与点的长度相等的空格分开；单词内的各个字母之间用长度等于划的长度的空格分隔；各单词之间由长度等于两倍的划长度的空格分开。</p>
<p>为使分析更加简单，我们假设划的长度是点长度的两倍而不是3倍。也就是说，一个点是一个值为1的比特位，一个划是两个值为1的比特位，空格是值为0的比特位。</p>
<blockquote>
<p>“bit (比特)”这个词被创造出来代表“binary digit”，它的确是新造的和计算机相关的最可爱的词之一。当然，“bit”有其通常的意义：“一小部分，程度很低或数量很少”。这个意义用来表示比特是非常精确的，因为1比特,一个二进制数字位确实是一个非常小的量。–《Code》</p>
</blockquote>
<p>下面是之前的摩尔斯电码基本表：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma2.png" alt=""></p>
<p>我们可以将它转换为比特形式：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma7.png" alt=""></p>
<p>注意，所有的编码都以 1开头，以两个0结束。结尾处的两个零代表单词中各个字母之间的空格，单词之间的空格用另外的一对0来表示。</p>
<p>对于”code”这个单词，可以用11010110100110110110011010100100表示</p>
<p>用比特的形式表示布莱叶盲文比表示摩尔斯电码容易得多。例如，单词“code”可以用布莱叶盲文这样表示：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma8.png" alt=""></p>
<p>如果突起的点是1，平坦的点是0，则布莱叶盲文中的每一个符号都可以用6个比特的二进制代码表示。单词”code”中的四个布莱叶字母符号就可以简单地写成:</p>
<p>100100 101010 100110 100010</p>
<p><em>最左边的一位对应编号为1的位置，最右边的一位对应编码为 6的位置。</em></p>
<p>正如上面的例子，比特可以代表任何信息。但是，最基本的一点是：比特是数字。</p>
<p>当用比特表示信息时只要将可能情况的数目数清楚就可以了，这样就决定了需要多少个比特位(四个数目用两个比特位即可)，从而使得各种可能的情况都能分配到一个编号。</p>
<p>比特在哲学和数学的奇怪混合物 — 逻辑 — 中发挥作用。逻辑最基本的目标是证明某个语句是否正确，而正确与否也可以用1和0来表示。</p>
<blockquote>
<p>以上这些恰好是信息可以通过电信号进行传递的前提！</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="从英文单词和汉字说起">从英文单词和汉字说起</h1><p>世有万物，人类为了区分，给万物冠以不同的名称。英文单词由26个字母组成，对于天空，人们用字母s，k，y表示，即：sky；对于猫用c，a，t，表示，即cat；对于狗用d,o,t表示，即：dog。</p>
<p>这些名字都是随意的，没有什么原因说明为什么不把猫称为狗或不把狗称为猫。因此可以说英语词汇就是一种用26个符号(字母)进行的编码。<br>刚开始可以用几个字母，很短的单词来命名事物。随着已经约定事物的单词越来越多，后期事物的单词也越来越长。估计这也是很多自然事物的单词比较短，而一些近现代词汇比较长的原因吧。<br>汉字和英文单词有些不同。汉字最初是象形文字。通过模拟物体的形状来表示某一类物品。</p>
<p>随着不断的模拟，又从这些最初的象形文字归纳提炼出“点”、“横”、“竖”、“撇”、“捺”等笔画。然后再利用这些笔画进行组合，创立出不同的文字，用这些文字标记不同的物品。所以，也可以说汉字也是一种编码，甚至要比英文单词更加复杂，能够创立更多的组合。<br>比如下面表示太阳的“日”字。</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/bianma1.png" alt=""></p>]]>
    
    </summary>
    
      <category term="编程" scheme="http://blog.supce.com/tags/%E7%BC%96%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS Secret 读书笔记之沿环形路径转动的动画]]></title>
    <link href="http://blog.supce.com/2016/10/13/CSS%20Secret%20%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E4%B9%8B%E6%B2%BF%E7%8E%AF%E5%BD%A2%E8%B7%AF%E5%BE%84%E5%B9%B3%E7%A7%BB%E7%9A%84%E5%8A%A8%E7%94%BB/"/>
    <id>http://blog.supce.com/2016/10/13/CSS Secret 读书笔记之沿环形路径平移的动画/</id>
    <published>2016-10-12T16:00:00.000Z</published>
    <updated>2016-10-13T13:36:56.429Z</updated>
    <content type="html"><![CDATA[<hr>
<h1 id="沿环形路径转动的动画">沿环形路径转动的动画</h1><p>今天利用CSS实现一种沿着环形路径转动的动画。为了便于演示，我们让一个头像图片沿着环形路径转动。<br>首先是一个img标签，用来保存头像图片，外面嵌套一个div用来设置背景。</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;img src=<span class="string">"test.jpg"</span> <span class="type">class</span>=<span class="string">"avatar"</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><a id="more"></a>
<p>然后设置基本的样式：</p>
<pre><code><span class="class">.path</span><span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">200px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"><span class="number">20px</span> auto</span></span>;
    <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#fb3</span></span></span>;
}</span>
<span class="class">.avatar</span>,<span class="rules">{
    <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">40px</span></span></span>;
    <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">40px</span></span></span>;
    <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span> auto</span></span>;
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">50%</span></span></span>;
    <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> dashed black</span></span>; <span class="comment">/*为了便于观察旋转，添加虚线边框*/</span>
    <span class="rule"><span class="attribute">overflow</span>:<span class="value"> hidden</span></span>;
}</span>
<span class="class">.avatar-a</span>&gt;<span class="tag">img</span><span class="rules">{
    <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
    <span class="rule"><span class="attribute">width</span>:<span class="value"> inherit</span></span>;
}</span>
</code></pre><p>最后为图片添加旋转动画：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin</span>{
    <span class="tag">to</span> <span class="rules">{ <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">1turn</span>)</span></span>; }</span>
}
<span class="class">.avatar</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">6s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">50%</span> <span class="number">100px</span></span></span>;
}</span>
</code></pre><p>刷新页面：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-01.gif" alt=""></p>
<p>虽然图片已经能够沿着环形路径转动了，但是图片自身也在旋转。为了让图片能够沿着环形转动，同时保证图片保持原来的朝向，可以用下面这两种方式：</p>
<p>既然图片本身也在旋转，那可以尝试在图片的外层嵌套一个div，然后让这个div反向旋转，从而把内层的图片旋转效果给抵消掉。这也是之前经常用到的一种方法。</p>
<p>修改HTML代码结构：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"avatar-a"</span>&gt;
        &lt;img src=<span class="string">"test.jpg"</span>&gt;
    &lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>下面就利用到上篇文章提到的<code>animation-direction</code>，图片外层的div保持旋转，然后设置内部img的<code>animation-direction</code>为相同的动画特效，但是最后让<code>animation-direction</code>反转。</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin</span>{
    <span class="tag">to</span> <span class="rules">{ <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">1turn</span>)</span></span>; }</span>
}
<span class="class">.avatar-a</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">6s</span> spin infinite linear</span></span>;
    <span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">50%</span> <span class="number">100px</span></span></span>;
}</span>
<span class="class">.avatar-a</span>&gt;<span class="tag">img</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> inherit</span></span>;
    <span class="rule"><span class="attribute">animation-direction</span>:<span class="value"> reverse</span></span>;
}</span>
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-02.gif" alt=""></p>
<p>much nicer！</p>
<p>问题虽然得到解决，但是修改了HTML结构。下面这种方式能够在保持原来HTML代码结构不变的情况下解决自身旋转问题。在提出这种方法之前，要首先了解下<code>transform-origin</code>。其实：</p>
<p><em>每个<code>transform-origin</code>都可以被两个<code>translate()</code>模拟出来</em></p>
<p>比如下面这个两端代码是等效的：</p>
<pre><code><span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">rotate</span>(<span class="number">30deg</span>)</span></span>;
<span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">100px</span> <span class="number">50px</span></span></span>;

<span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">100px</span>,<span class="number">50px</span>),
           <span class="function">rotate</span>(<span class="number">30deg</span>),
           <span class="function">translate</span>(-<span class="number">100px</span>,-<span class="number">50px</span>)</span></span>;
<span class="rule"><span class="attribute">transform-origin</span>:<span class="value"> <span class="number">0</span> <span class="number">0</span></span></span>;
</code></pre><p>具体过程如下图：</p>
<p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-03.jpg" alt=""></p>
<p>于是，我们可以把刚才的spin动画拆分：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframe</span> spin</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)</span></span>;
    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)</span></span>;
    }</span>
}
</code></pre><p>对于自身的反向旋转进行拆分：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframe</span> spin</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
}
</code></pre><p>然后把img外部嵌套的div去掉，把这两个动画合并，直接用在img上，这样既保持了原有的HTML代码结构，也解决了图片的自旋转问题。最终代码如下：</p>
<p>HTML：</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;img src=<span class="string">"test.jpg"</span> <span class="type">class</span>=<span class="string">"avatar-b"</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>CSS:</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin-b</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)
                   <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">100px</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">100px</span>)
                   <span class="function">translate</span>(<span class="number">50%</span>,<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translate</span>(-<span class="number">50%</span>,-<span class="number">50%</span>)</span></span>;
    }</span>
}
<span class="class">.avatar-b</span><span class="rules">{
    <span class="rule"><span class="attribute">animation</span>:<span class="value"> <span class="number">6s</span> spin-b infinite linear</span></span>;
}</span>
</code></pre><p>也可以把一个关键帧的水平位移抵消，以精简代码：</p>
<pre><code><span class="at_rule">@<span class="keyword">keyframes</span> spin-b</span>{
    <span class="tag">from</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">100px</span>) <span class="function">translateY</span>(-<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)
                   <span class="function">translateY</span>(-<span class="number">100px</span>) <span class="function">translateY</span>(<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)</span></span>;

    }</span>
    <span class="tag">to</span><span class="rules">{
        <span class="rule"><span class="attribute">transform</span>:<span class="value"> <span class="function">translateY</span>(<span class="number">100px</span>) <span class="function">translateY</span>(-<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">1turn</span>)
                   <span class="function">translateY</span>(-<span class="number">100px</span>) <span class="function">translateY</span>(<span class="number">50%</span>)
                   <span class="function">rotate</span>(<span class="number">0turn</span>)</span></span>;
    }</span>
}
</code></pre><p><img src="http://7xqkrz.com1.z0.glb.clouddn.com/secret-21-04.gif" alt=""></p>
<p>much nicer！</p>
]]></content>
    <summary type="html">
    <![CDATA[<hr>
<h1 id="沿环形路径转动的动画">沿环形路径转动的动画</h1><p>今天利用CSS实现一种沿着环形路径转动的动画。为了便于演示，我们让一个头像图片沿着环形路径转动。<br>首先是一个img标签，用来保存头像图片，外面嵌套一个div用来设置背景。</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"path"</span>&gt;
    &lt;img src=<span class="string">"test.jpg"</span> <span class="type">class</span>=<span class="string">"avatar"</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
</code></pre>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://blog.supce.com/tags/CSS/"/>
    
  </entry>
  
</feed>
