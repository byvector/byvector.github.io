<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[vector's blog]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://yoursite.com/"/>
  <updated>2016-04-14T02:37:25.144Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name><![CDATA[vector]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[CSS基础之两列页面布局（一）]]></title>
    <link href="http://yoursite.com/2016/04/13/CSS%E4%B9%8B%E4%B8%A4%E5%88%97%E5%B8%83%E5%B1%80(1)/"/>
    <id>http://yoursite.com/2016/04/13/CSS之两列布局(1)/</id>
    <published>2016-04-12T16:00:00.000Z</published>
    <updated>2016-04-14T02:37:25.144Z</updated>
    <content type="html"><![CDATA[<p><em>今天比较忙，但还是挤时间把今天的博客写出来了，下面就赶紧进入正题了 ヾ(=^▽^=)ノ</em></p>
<h1 id="一、两列定宽的页面布局">一、两列定宽的页面布局</h1><hr>
<p>两列的页面布局是我们经常看见的一种页面结构，（蛤？我的博客首页！）这种布局方式在内容体现上可分为主要内容区域和侧边栏。首先让我们先把HTML的骨架搭好。</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"header"</span>&gt;这里是头&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"container"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"mainBox"</span>&gt;这里是主要内容区域&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"sideBox"</span>&gt;这里是侧边栏&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"footer"</span>&gt;这里是脚（ps:没脚气，不臭）&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>好了，骨架已经搭好了，下面开始用我们的CSS给骨架上贴肉了。就从最简单的两列定宽开始吧。在这里两列定宽主要是指将mainBox和sideBox这两个div的宽度值固定。再将它们分别放在内容区域的两侧。我们将container的宽度值设置为950px，高度为250px,上下外边距为10px。mainBox的宽度值设置为680px，高度为250px。sideBox的宽度值设置为270px，高度也为250px。<br><a id="more"></a></p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">    
    *<span class="rules">{
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
    }</span>
    <span class="id">#header</span>, <span class="id">#footer</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">950px</span></span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#E8E8E8</span></span></span>;
    }</span>
    <span class="id">#container</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">950px</span></span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span> <span class="number">0</span></span></span>;
    }</span>
    <span class="class">.mainBox</span><span class="rules">{
        <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">680px</span></span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">250px</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#333333</span></span></span>;
    }</span>
    <span class="class">.sideBox</span><span class="rules">{
        <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">270px</span></span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#999999</span></span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>效果如下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju.jpg" alt="两列定宽"><br>通过float，一个最简单的两列定宽布局就这么实现了，但是我们在mainBox中添加更多的行呢？<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju2.jpg" alt="多行两列"><br>结果，内容超出了容器范围，我们可以用overflow将多余的内容隐藏，但是，我们更想实现高度自适应，高度随着内容而改变。可以把CSS修改成这样：</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    ……
    <span class="id">#container</span><span class="rules">{
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">950px</span></span></span>;
            <span class="comment">/*height: 250px;*/</span>
            <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span> <span class="number">0px</span></span></span>;
        }</span>
        <span class="class">.mainBox</span><span class="rules">{
            <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">680px</span></span></span>;
            <span class="comment">/*height: 250px;*/</span>
            <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#333333</span></span></span>;
        }</span>
        <span class="class">.sideBox</span><span class="rules">{
            <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">270px</span></span></span>;
            <span class="comment">/*height: 250px;*/</span>
            <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#999999</span></span></span>;
        }</span>
        <span class="id">#footer</span><span class="rules">{
            <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;
        }</span>
    ……
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><blockquote>
<p>由于float将div从文档流中脱离，我们给footer添加了清除浮动的效果，使用float脱离文档流时，其他盒子会无视这个元素，但其他盒子内的文本依然会为这个元素让出位置，环绕在周围。而对于使用absolute，positioning脱离文档流的元素，其他盒子与其他盒子内的文本都会无视它。更多关于清除浮动的问题会在后面写一篇文章专门介绍。</p>
</blockquote>
<p>未添加清除浮动的效果如下图，可以看出，footer这个盒子虽然无视了浮动的元素，但是盒子中的文本还是为浮动的元素让出了位置。<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju3.jpg" alt=""><br>添加清除浮动的效果如下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju4.jpg" alt=""><br>但是我们发现底部的外边距却没有了，这是由于container中元素浮动导致container的高度为0，并没有自适应，如下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju5.jpg" alt=""><br>我们对container清除浮动</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    ……
    <span class="comment">/*
        #footer{
                clear: both;
            }
    */</span>
    <span class="id">#container</span><span class="pseudo">:after</span><span class="rules">{
        <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
        <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;
        <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;
        <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><blockquote>
<p>更多关于清除浮动的问题会在后面写一篇文章专门介绍。</p>
</blockquote>
<p>此时的效果如下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju6.jpg" alt=""><br>这个时候两列好像是没什么问题了，但是，两列不是等高啊。如果我们将mainBox的宽度增加，会发现出现错位现象：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju7.jpg" alt=""><br>由此可见，两列定宽的布局方式一个前提要求是，两列的盒模型宽度相加不能超过父级元素的宽度，否则会导致页面发生错位。<br>如果我们将外边距设置成负值，可以修复这个问题</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    ……
    <span class="class">.sideBox</span><span class="rules">{
        <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">270px</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#999999</span></span></span>;
        <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">100px</span></span></span>;
    }</span>
    ……
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju8.jpg" alt=""><br>侧边栏回到了原来的位置，（是不是很神奇 O(∩_∩)O）但覆盖了主要内容区域，这并不是我们想要的效果，于是我们利用两列自适应结构来满足我们的要求。</p>
<h1 id="二、两列自适应结构">二、两列自适应结构</h1><hr>
<p>两列自适应的页面布局方式其实将宽度属性以百分比的形式计算，但该宽度并不是盒模型的总宽度，而是盒模型的内容区域的宽度。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
        *<span class="rules">{
            <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;
            <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
        }</span>
        <span class="id">#header</span>, <span class="id">#footer</span><span class="rules">{
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">100%</span></span></span>;
            <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;
            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#E8E8E8</span></span></span>;
        }</span>
        <span class="id">#container</span><span class="rules">{
            <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span> <span class="number">0px</span></span></span>;
        }</span>
        <span class="class">.mainBox</span><span class="rules">{
            <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">70%</span></span></span>;
            <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#333333</span></span></span>;
        }</span>
        <span class="class">.sideBox</span><span class="rules">{
            <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">30%</span></span></span>;
            <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
            <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#999999</span></span></span>;
            <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> -<span class="number">100px</span></span></span>;
        }</span>
        <span class="id">#container</span><span class="pseudo">:after</span><span class="rules">{
            <span class="rule"><span class="attribute">display</span>:<span class="value"> block</span></span>;
            <span class="rule"><span class="attribute">visibility</span>:<span class="value"> hidden</span></span>;
            <span class="rule"><span class="attribute">font-size</span>:<span class="value"> <span class="number">0</span></span></span>;
            <span class="rule"><span class="attribute">line-height</span>:<span class="value"> <span class="number">0</span></span></span>;
            <span class="rule"><span class="attribute">clear</span>:<span class="value"> both</span></span>;
            <span class="rule"><span class="attribute">content</span>:<span class="value"> <span class="string">""</span></span></span>;
        }</span>
    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>这样就得到我们想要的结果了，具体效果如下：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/buju9.jpg" alt=""><br>两页布局就先介绍到这里，今天实在是没时间，就把文章分成两部分，明天填第二部分的坑。先这样吧 ↖(^ω^)↗<br><em>ps:昨晚网络出了点问题，今天上午才传上来</em></p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>今天比较忙，但还是挤时间把今天的博客写出来了，下面就赶紧进入正题了 ヾ(=^▽^=)ノ</em></p>
<h1 id="一、两列定宽的页面布局">一、两列定宽的页面布局</h1><hr>
<p>两列的页面布局是我们经常看见的一种页面结构，（蛤？我的博客首页！）这种布局方式在内容体现上可分为主要内容区域和侧边栏。首先让我们先把HTML的骨架搭好。</p>
<pre><code>&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"header"</span>&gt;这里是头&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"container"</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"mainBox"</span>&gt;这里是主要内容区域&lt;/<span class="keyword">div</span>&gt;
    &lt;<span class="keyword">div</span> <span class="type">class</span>=<span class="string">"sideBox"</span>&gt;这里是侧边栏&lt;/<span class="keyword">div</span>&gt;
&lt;/<span class="keyword">div</span>&gt;
&lt;<span class="keyword">div</span> <span class="property">id</span>=<span class="string">"footer"</span>&gt;这里是脚（ps:没脚气，不臭）&lt;/<span class="keyword">div</span>&gt;
</code></pre><p>好了，骨架已经搭好了，下面开始用我们的CSS给骨架上贴肉了。就从最简单的两列定宽开始吧。在这里两列定宽主要是指将mainBox和sideBox这两个div的宽度值固定。再将它们分别放在内容区域的两侧。我们将container的宽度值设置为950px，高度为250px,上下外边距为10px。mainBox的宽度值设置为680px，高度为250px。sideBox的宽度值设置为270px，高度也为250px。<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS基础之容器的位置]]></title>
    <link href="http://yoursite.com/2016/04/12/CSS%E4%B9%8B%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2016/04/12/CSS之容器/</id>
    <published>2016-04-11T16:00:00.000Z</published>
    <updated>2016-04-14T02:34:55.946Z</updated>
    <content type="html"><![CDATA[<h1 id="一、准备工作">一、准备工作</h1><hr>
<p>首先，我们准备一个存放诗句的div容器放在body中。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"poemBox"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>《采桑子·长者》<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
    <span class="tag">&lt;<span class="title">address</span>&gt;</span>当代·无名氏<span class="tag">&lt;/<span class="title">address</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>人间易老他不老，时刻一秒<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>今又一秒，香江怒斥分外好<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>苟利国家生死以，不若代表<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>更若代表，西方国家谁未到<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>其效果如下图所示：<br><a id="more"></a><br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/rongqi.jpg" alt="未添加CSS样式"></p>
<h1 id="二、容器居中显示">二、容器居中显示</h1><p>我们添加下面这段CSS样式代码：</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">body</span><span class="rules">{
        <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>此时的诗句效果如下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/rongqi1.jpg" alt="居中后的诗"><br>内容虽然居中了，但是我们想看下div元素是否也是居中了。我们对div元素添加浅色背景,并且给div添加宽度。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">body</span><span class="rules">{
        <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
    }</span>
    <span class="class">.poemBox</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#E8E8E8</span></span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>效果如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/rongqi2.jpg" alt=""><br>定义宽度和背景色的div并没有居中显示，但div中的内容是居中显示的。我们想要让容器居中，可以设置容器的左右外边距为左右自适应。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
        <span class="tag">body</span><span class="rules">{
            <span class="rule"><span class="attribute">text-align</span>:<span class="value"> center</span></span>;
        }</span>
        <span class="class">.poemBox</span><span class="rules">{
            <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;
            <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#E8E8E8</span></span></span>;
            <span class="rule"><span class="attribute">margin-left</span>:<span class="value"> auto</span></span>;
            <span class="rule"><span class="attribute">margin-right</span>:<span class="value"> auto</span></span>;
        }</span>
    </span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>此时的诗句效果是这样的：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/rongqi3.jpg" alt="居中的诗句"></p>
<h1 id="三、容器居右显示">三、容器居右显示</h1><hr>
<p>1、利用浮动方式将容器居右显示</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="class">.poemBox</span><span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#E8E8E8</span></span></span>;
        <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><blockquote>
<p>注意：利用浮动会带来清除浮动问题，这个问题会在后面专门介绍。</p>
</blockquote>
<p>2、利用定位方式将容器居右显示</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="class">.poemBox</span><span class="rules">{
        <span class="rule"><span class="attribute">position</span>:<span class="value"> absolute</span></span>;
        <span class="rule"><span class="attribute">right</span>:<span class="value"> <span class="number">0px</span></span></span>;
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span></span></span>;
        <span class="rule"><span class="attribute">background</span>:<span class="value"> <span class="hexcolor">#E8E8E8</span></span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><h2 id="&gt;关于absolute的有关内容会在后面有更多的介绍">&gt;关于absolute的有关内容会在后面有更多的介绍</h2><p>通过上面几个实验，关容器位置的一些内容就先简单介绍到这里吧。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、准备工作">一、准备工作</h1><hr>
<p>首先，我们准备一个存放诗句的div容器放在body中。</p>
<pre><code><span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"poemBox"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">h1</span>&gt;</span>《采桑子·长者》<span class="tag">&lt;/<span class="title">h1</span>&gt;</span>
    <span class="tag">&lt;<span class="title">address</span>&gt;</span>当代·无名氏<span class="tag">&lt;/<span class="title">address</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>人间易老他不老，时刻一秒<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>今又一秒，香江怒斥分外好<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>苟利国家生死以，不若代表<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
    <span class="tag">&lt;<span class="title">p</span>&gt;</span>更若代表，西方国家谁未到<span class="tag">&lt;/<span class="title">p</span>&gt;</span>
<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>其效果如下图所示：<br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[CSS基础之盒模型]]></title>
    <link href="http://yoursite.com/2016/04/11/CSS%E4%B9%8B%E7%9B%92%E6%A8%A1%E5%9E%8B/"/>
    <id>http://yoursite.com/2016/04/11/CSS之盒模型/</id>
    <published>2016-04-10T16:00:00.000Z</published>
    <updated>2016-04-11T04:19:03.667Z</updated>
    <content type="html"><![CDATA[<h1 id="一、盒模型的组成">一、盒模型的组成</h1><hr>
<p>盒模型是CSS布局的最基本组成部分，它是指定页面元素如何显示及在某种方式上如何相互交互。在页面上的每个元素都是以一个矩形的表现形式存在的，每个矩形是由元素的内容、内边距(padding)、边框(border)、外边距(margin)组成的，如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box.jpg" alt="盒模型的基本组成"><br><a id="more"></a><br>从上图可以清楚的理解任何一个元素的内容区域都是被内边距(padding)、边框(border)、外边距(margin)这3个属性所包含。一个元素的盒模型有多大，那么该元素在页面中占用的空间也将会有多大。</p>
<blockquote>
<p>注意: 如果给某元素加上背景色或者背景图片，那么该元素的背景色或者背景图片也将出现在内边距(padding)之中。</p>
</blockquote>
<h1 id="二、盒模型实验">二、盒模型实验</h1><hr>
<p>1、<br>为了更好的理解这三个属性对元素内容的影响，我们通过一个简单的实验步骤来体会一下盒模型。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">div</span> <span class="rules">{
        <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">200px</span></span></span>;
        <span class="rule"><span class="attribute">height</span>:<span class="value"> <span class="number">30px</span></span></span>;
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">0</span> none</span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
        <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#FFFFFF</span></span></span>;
        <span class="rule"><span class="attribute">background-color</span>:<span class="value"> <span class="hexcolor">#000000</span></span></span>;
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>我是第一个div<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>那我是第二个div<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;<span class="title">div</span>&gt;</span>(╯﹏╰)b我是第三个div<span class="tag">&lt;/<span class="title">div</span>&gt;</span>
</code></pre><p>前面提到盒模型中元素内容区域被内边距(padding)、边框(border)、外边距(margin)这3个属性所包含，因此先将这3个属性都设置为0，不让它们在盒模型中出现。效果如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box1.jpg" alt="3个属性值为0的盒模型"><br>2、<br>修改内边距的属性，将其属性值改为20px后，会发现文字内容的空间增大了，但背景色还都混在一起，仿佛是在一个div标签中添加了背景。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">div</span> <span class="rules">{
        ……
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">0</span> none</span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
        ……
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>效果如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box2.jpg" alt="padding属性值为20px"><br>3、<br>正如前面所提到的，背景色或者背景图片都是现实在内边距(padding)及内容区域的。为了将每个div标签区分，在添加内补丁(padding)属性值的基础上修改边框(border)属性的属性值，将其修改为边框粗细为5px、颜色为红色的实线边框。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">div</span> <span class="rules">{
        ……
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid <span class="hexcolor">#FF0000</span></span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">0</span></span></span>;
        ……
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>效果如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box3.jpg" alt="添加padding和border后的效果"><br>4、<br>边框将3个div分开，但是带来了一个问题，那就是边框都紧挨在一起。这样的结果并不是我们想要的。此时我们就可以利用外边距的功效，给每个div的添加10px的外边距底边。</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">div</span> <span class="rules">{
        ……
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid <span class="hexcolor">#FF0000</span></span></span>;
        <span class="rule"><span class="attribute">margin-bottom</span>:<span class="value"> : <span class="number">10px</span></span></span>;
        ……
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>效果如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box4.jpg" alt="最终效果"><br>四个实验过程讲述了盒模型的基本构造。</p>
<h1 id="三、外边距的合并">三、外边距的合并</h1><p>我们刚才设置div的外边距底边为10px，此时，我们修改为：</p>
<pre><code><span class="tag">&lt;<span class="title">style</span> <span class="attribute">type</span>=<span class="value">"text/css"</span>&gt;</span><span class="css">
    <span class="tag">div</span> <span class="rules">{
        ……
        <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">20px</span></span></span>;
        <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">5px</span> solid <span class="hexcolor">#FF0000</span></span></span>;
        <span class="rule"><span class="attribute">margin</span>:<span class="value"> <span class="number">10px</span></span></span>;
        ……
    }</span>
</span><span class="tag">&lt;/<span class="title">style</span>&gt;</span>
</code></pre><p>刷新页面，我们发现div之间的外边距还是10px。如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box5.jpg" alt="设置margin为10px"><br>但是第一个div的底部margin加上第二个div的顶部margin不应是是20px吗，google发现，原来我们的外边距发生了合并。参照W3C如下：<br>外边距合并（叠加）是一个相当简单的概念。但是，在实践中对网页进行布局时，它会造成许多混淆。<br>简单地说，外边距合并指的是，当两个垂直外边距相遇时，它们将形成一个外边距。合并后的外边距的高度等于两个发生合并的外边距的高度中的较大者。<br>当一个元素出现在另一个元素上面时，第一个元素的下外边距与第二个元素的上外边距会发生合并。请看下图：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box6.jpg" alt="外边距合并"><br>外边距合并初看上去可能有点奇怪，但是实际上，它是有意义的。以由几个段落组成的典型文本页面为例。第一个段落上面的空间等于段落的上外边距。如果没有外边距合并，后续所有段落之间的外边距都将是相邻上外边距和下外边距的和。这意味着段落之间的空间是页面顶部的两倍。如果发生外边距合并，段落之间的上外边距和下外边距就合并在一起，这样各处的距离就一致了。<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box7.jpg" alt=""></p>
<blockquote>
<p>注意：只有普通文档流中块框的垂直外边距才会发生外边距合并。行内框、浮动框或绝对定位之间的外边距不会合并。</p>
</blockquote>
<hr>
<p>盒模型就先写到这里，以后有坑再慢慢填吧 ↖(^ω^)↗</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、盒模型的组成">一、盒模型的组成</h1><hr>
<p>盒模型是CSS布局的最基本组成部分，它是指定页面元素如何显示及在某种方式上如何相互交互。在页面上的每个元素都是以一个矩形的表现形式存在的，每个矩形是由元素的内容、内边距(padding)、边框(border)、外边距(margin)组成的，如下图所示：<br><img src="http://7xqkrz.com1.z0.glb.clouddn.com/box.jpg" alt="盒模型的基本组成"><br>]]>
    
    </summary>
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[沉重]]></title>
    <link href="http://yoursite.com/2015/11/08/%E5%BF%83%E6%83%85/"/>
    <id>http://yoursite.com/2015/11/08/心情/</id>
    <published>2015-11-08T10:48:17.000Z</published>
    <updated>2015-11-08T11:07:02.615Z</updated>
    <content type="html"><![CDATA[<p>今天心情真的很沉重，好像有块石头压在心口，让人喘不过气来。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>今天心情真的很沉重，好像有块石头压在心口，让人喘不过气来。</p>
]]>
    </summary>
    
      <category term="心情杂记" scheme="http://yoursite.com/tags/%E5%BF%83%E6%83%85%E6%9D%82%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[python 中类属性和实例属性]]></title>
    <link href="http://yoursite.com/2015/09/21/class/"/>
    <id>http://yoursite.com/2015/09/21/class/</id>
    <published>2015-09-21T11:52:56.000Z</published>
    <updated>2015-09-21T12:07:29.434Z</updated>
    <content type="html"><![CDATA[<p><em>忙开学，博客荒废了一段，现在捡起来。闲话不多说，步入正题</em></p>
<hr>
<p>最近正在学习Python，发现Python中类属性和实例属性容易混淆。于是写了下面这段demo</p>
<a id="more"></a>
<pre><code>class <span class="function"><span class="title">Stu</span><span class="params">(object)</span></span>:
    pass

def <span class="function"><span class="title">set_age</span><span class="params">(self,age)</span></span>:
    self<span class="class">.age</span> = age

s1 = <span class="function"><span class="title">Stu</span><span class="params">()</span></span>
s2 = <span class="function"><span class="title">Stu</span><span class="params">()</span></span>

from types import MethodType
Stu<span class="class">.set_age</span> = <span class="function"><span class="title">MethodType</span><span class="params">(set_age,Stu)</span></span>

s1.<span class="function"><span class="title">set_age</span><span class="params">(<span class="number">1</span>)</span></span> \\通过set_age方法，设置的类属性age的值
s2.<span class="function"><span class="title">set_age</span><span class="params">(<span class="number">2</span>)</span></span> \\也是设置类属性age的值，并把上个值覆盖掉
<span class="function"><span class="title">print</span><span class="params">(s1.age,s2.age)</span></span> \\由于s1和s2自身没有age属性,所以打印的是类属性age的值

s1<span class="class">.age</span> = <span class="number">10</span>  \\给实例s1添加一个属性age并赋值为<span class="number">10</span>
s2<span class="class">.age</span> = <span class="number">20</span>  \\给实例s2添加一个属性age并赋值为<span class="number">20</span>
<span class="function"><span class="title">print</span><span class="params">(s1.age,s2.age)</span></span> \\打印的是a和s自身的age属性值，不是类age属性值
</code></pre><p>有了这段代码，就很好分清、理解类属性和实例属性了(<em>^__^</em>) </p>
]]></content>
    <summary type="html">
    <![CDATA[<p><em>忙开学，博客荒废了一段，现在捡起来。闲话不多说，步入正题</em></p>
<hr>
<p>最近正在学习Python，发现Python中类属性和实例属性容易混淆。于是写了下面这段demo</p>]]>
    
    </summary>
    
      <category term="Python" scheme="http://yoursite.com/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[给博客绑定域名,添加评论以及RSS]]></title>
    <link href="http://yoursite.com/2015/08/15/%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D/"/>
    <id>http://yoursite.com/2015/08/15/绑定域名/</id>
    <published>2015-08-15T02:08:22.000Z</published>
    <updated>2015-08-19T07:22:16.160Z</updated>
    <content type="html"><![CDATA[<h1 id="一、绑定域名">一、绑定域名</h1><hr>
<p>1、 <strong>域名申请</strong><br>域名申请尽量使用经 ICANN 和 CNNIC 认证的顶级域名注册商。</p>
<ul>
<li>国外</li>
</ul>
<p>有英语基础的同学推荐国外狗爹(<a href="https://www.godaddy.com/" target="_blank" rel="external"> godaddy </a>),支持支付宝付款，付款前可以网上搜一些优惠码。</p>
<ul>
<li>国内</li>
</ul>
<p>自从万网被阿里收购以后，有了一定的价格优势，想方便的同学可以通过<a href="www.net.cn">万网</a>申请自己的域名，.com首年仅39元，续费55元/年。</p>
<p>2、 <strong>为pages绑定自定义域名</strong></p>
<p>GitCafe Pages 支持绑定自定义域名。申请完我们的域名后，进入项目主页，点击右上角的 项目设置 ，在新打开的页面里点击 Pages 服务 一项可以看到自定义域名相关的设置。<br><a id="more"></a><br><img src="https://gitcafe-image.b0.upaiyun.com/d56295f8c77a86306a1c7c6aad48cfd1.png" alt="绑定域名"><br>填入你要绑定的域名，点击「新增」；之后到域名管理面板中添加 CNAME 记录指向到 gitcafe.io；如果你使用的域名服务提供商不支持添加 CNAME 记录，建议你更换到其他支持该功能的域名提供商。</p>
<p>3、<strong>域名解析</strong></p>
<p>域名解析可以使用万网自己的云解析，也可以使用<a href="https://www.dnspod.cn/Event/Dnspod.Cdn/?from=BD70" target="_blank" rel="external">DNSPod</a>来解析自己的域名。</p>
<p><em>以下以DNSPod为例</em><br>3.1 在万网中点击自己的域名，进入域名控制台，点击修改dns<br>3.2 分别填写DNSPod的2个DNS短地址（对应6台服务器）</p>
<pre><code>f1g1ns1<span class="class">.dnspod</span><span class="class">.net</span>
f1g1ns2<span class="class">.dnspod</span><span class="class">.net</span>
</code></pre><p>3.3 点击保存，然后等待全球递归DNS服务器刷新（最多72小时）。<br>3.4 进入 DNSPod 管理控制台，点击添加域名，填写自己的域名,添加上您要解析的主域名后，点击【确定】</p>
<p><img src="https://statics.dnspod.cn/zhanjiang/images/about/support/15.jpg" alt=""></p>
<p>3.5 点击刚添加的域名,<br>在域名记录管理界面，点击【添加记录】，添加需要解析的记录即可</p>
<p><img src="https://statics.dnspod.cn/zhanjiang/images/about/support/17.jpg" alt=""></p>
<blockquote>
<p>注意：记录类型一定要为：CNAME，记录值为：uer_name.gitcafe.io. 将user_name替换为您的用户名即可。</p>
</blockquote>
<h1 id="二、添加评论">二、添加评论</h1><hr>
<p>Hexo默认使用的评论插件是Disqus，为了方便广大国内用户使用多说来替换Disqus。我们首先来讲下基于默认主题下添加多说评论。</p>
<p>2.1 进入<a href="http://duoshuo.com/create-site/" target="_blank" rel="external">多说</a>创建你自己的站点，创建完成后进入后台管理，点击设置，可以查看自己的域名。假设域名为****.duoshuo.com，则我们把****称为：shortname。</p>
<p>2.2 在_config.yml中添加多说的配置：</p>
<pre><code><span class="attribute">duoshuo_shortname</span>: <span class="string">你站点的short_name</span>
</code></pre><p>2.3 修改<code>themes\landscape\layout\_partial\article.ejs</code>模板，把</p>
<pre><code><span class="xml"></span>&lt;%<span class="perl"> <span class="keyword">if</span> (!<span class="keyword">index</span> &amp;&amp; post.comments &amp;&amp; config.disqus_shortname){ </span>%&gt;<span class="xml">
<span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comments"</span>&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">id</span>=<span class="value">"disqus_thread"</span>&gt;</span>
    <span class="tag">&lt;<span class="title">noscript</span>&gt;</span>Please enable JavaScript to view the <span class="tag">&lt;<span class="title">a</span> <span class="attribute">href</span>=<span class="value">"//disqus.com/?ref_noscript"</span>&gt;</span>comments powered by Disqus.<span class="tag">&lt;/<span class="title">a</span>&gt;</span><span class="tag">&lt;/<span class="title">noscript</span>&gt;</span>
  <span class="tag">&lt;/<span class="title">div</span>&gt;</span>
<span class="tag">&lt;/<span class="title">section</span>&gt;</span>
</span>&lt;%<span class="perl"> } </span>%&gt;<span class="xml"></span>
</code></pre><p>改为</p>
<pre><code><span class="tag">&lt;<span class="title">%</span> <span class="attribute">if</span> (!<span class="attribute">index</span> &amp;&amp; <span class="attribute">post.comments</span> &amp;&amp; <span class="attribute">config.duoshuo_shortname</span>){ %&gt;</span>
<span class="tag">&lt;<span class="title">section</span> <span class="attribute">id</span>=<span class="value">"comments"</span>&gt;</span>
  <span class="comment">&lt;!-- 多说评论框 start --&gt;</span>
  <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"ds-thread"</span> <span class="attribute">data-thread-key</span>=<span class="value">"&lt;%= post.layout %&gt;-&lt;%= post.slug %&gt;"</span> <span class="attribute">data-title</span>=<span class="value">"&lt;%= post.title %&gt;"</span> <span class="attribute">data-url</span>=<span class="value">"&lt;%= page.permalink %&gt;"</span>&gt;</span><span class="tag">&lt;/<span class="title">div</span>&gt;</span>
  <span class="comment">&lt;!-- 多说评论框 end --&gt;</span>
  <span class="comment">&lt;!-- 多说公共JS代码 start (一个网页只需插入一次) --&gt;</span>
  <span class="tag">&lt;<span class="title">script</span> <span class="attribute">type</span>=<span class="value">"text/javascript"</span>&gt;</span><span class="javascript">
  <span class="keyword">var</span> duoshuoQuery = {short_name:<span class="string">'&lt;%= config.duoshuo_shortname %&gt;'</span>};
    (<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{
      <span class="keyword">var</span> ds = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);
      ds.type = <span class="string">'text/javascript'</span>;ds.async = <span class="literal">true</span>;
      ds.src = (<span class="built_in">document</span>.location.protocol == <span class="string">'https:'</span> ? <span class="string">'https:'</span> : <span class="string">'http:'</span>) + <span class="string">'//static.duoshuo.com/embed.js'</span>;
      ds.charset = <span class="string">'UTF-8'</span>;
      (<span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>] 
       || <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>]).appendChild(ds);
    })();
    </span><span class="tag">&lt;/<span class="title">script</span>&gt;</span>
  <span class="comment">&lt;!-- 多说公共JS代码 end --&gt;</span>
<span class="tag">&lt;/<span class="title">section</span>&gt;</span>
<span class="tag">&lt;<span class="title">%</span> } %&gt;</span>
</code></pre><p>如果有疑问的同学，还可以参考下面的基于<a href="https://github.com/litten/hexo-theme-yilia" target="_blank" rel="external">yilia主题</a>的添加教程。</p>
<p>假设我们的多说网站二级域名为****.duoshuo.com。yilia主题下有两种解决方案。</p>
<ul>
<li>方案一：</li>
</ul>
<pre><code>打开themes<span class="regexp">/yilia/</span>layout<span class="regexp">/_partial/</span>post/duoshuo.ejs

将var duoshuoQuery = {<span class="string">short_name:</span><span class="string">"&lt;%=theme.duoshuo%&gt;"</span>};修改为var duoshuoQuery = {<span class="string">short_name:</span><span class="string">"****"</span>};
</code></pre><ul>
<li>方案二：</li>
</ul>
<pre><code>打开themes<span class="regexp">/yilia/</span>layout<span class="regexp">/_partial/</span>post/duoshuo.ejs.

将var duoshuoQuery = {<span class="string">short_name:</span><span class="string">"&lt;%=theme.duoshuo%&gt;"</span>};
修改为var duoshuoQuery = {<span class="string">short_name:</span><span class="string">"&lt;%=theme.duoshuo_shortname%&gt;"</span>};

打开themes<span class="regexp">/yilia/\_</span>config.yml，添加一行：<span class="string">duoshuo_shortname:</span> ****
</code></pre><h1 id="三、添加RSS">三、添加RSS</h1><hr>
<p>RSS添加还是比较容易的，我们打开GitBash，切换到博客根目录，输入</p>
<pre><code>$ npm <span class="keyword">install</span> hexo-generator-feed 
</code></pre><p>打开<code>themes/yilia/_config.yml</code>，将rss注释去掉即可。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="一、绑定域名">一、绑定域名</h1><hr>
<p>1、 <strong>域名申请</strong><br>域名申请尽量使用经 ICANN 和 CNNIC 认证的顶级域名注册商。</p>
<ul>
<li>国外</li>
</ul>
<p>有英语基础的同学推荐国外狗爹(<a href="https://www.godaddy.com/"> godaddy </a>),支持支付宝付款，付款前可以网上搜一些优惠码。</p>
<ul>
<li>国内</li>
</ul>
<p>自从万网被阿里收购以后，有了一定的价格优势，想方便的同学可以通过<a href="www.net.cn">万网</a>申请自己的域名，.com首年仅39元，续费55元/年。</p>
<p>2、 <strong>为pages绑定自定义域名</strong></p>
<p>GitCafe Pages 支持绑定自定义域名。申请完我们的域名后，进入项目主页，点击右上角的 项目设置 ，在新打开的页面里点击 Pages 服务 一项可以看到自定义域名相关的设置。<br>]]>
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
      <category term="网站" scheme="http://yoursite.com/tags/%E7%BD%91%E7%AB%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[利用 Hexo 3 及以上版本 + github/gitcafe 搭建博客]]></title>
    <link href="http://yoursite.com/2015/08/12/github-gitcafe/"/>
    <id>http://yoursite.com/2015/08/12/github-gitcafe/</id>
    <published>2015-08-12T01:04:40.000Z</published>
    <updated>2015-08-12T13:27:23.057Z</updated>
    <content type="html"><![CDATA[<h1 id="前言">前言</h1><hr>
<p>曾经一直有搭建博客的想法，前面由于时间原因搁置了下来，这次抽时间终于把博客搭建完成了。网上很多教程都是基于 hexo 2.x 的教程，而 hexo 3.0 做了很多变动，于是把这次搭建博客的过程记录下来，供大家参考，如有不对的地方欢迎大家指正。</p>
<h1 id="1_安装">1 安装</h1><hr>
<p><em>请选择对应的版本下载安装</em>。</p>
<p>1.1 安装  <a href="https://nodejs.org/" target="_blank" rel="external">node.js</a><br>1.2 安装  <a href="http://git-scm.com/" target="_blank" rel="external">git</a></p>
<h1 id="2_添加SSH公钥">2 添加SSH公钥</h1><hr>
<p><em>由于某些因素，gitcafe 的访问速度比 github 要快，因此以 gitcafe 为例。如果想使用 github，请参考附录。</em></p>
<blockquote>
<p>SSH （ Secure Shell）是一种安全协议，在你的电脑与 GitCafe 服务器进行通信时，我们使用 SSH 密钥（SSH Keys）认证的方式来保证通信安全。你可以在网络上搜索到关于 <strong>SSH 密钥 </strong>的更多介绍；下面我们重点讲解如何创建 SSH 密钥，并将密钥中的公钥添加到 GitCafe，以便我们通过 SSH 协议来访问 Git 仓库。<br><a id="more"></a><br><strong>2.1 进入 SSH 目录</strong></p>
</blockquote>
<p>SSH 密钥的创建需要在终端（命令行）环境下进行，我们首先进入命令行环境。在 Windows 平台中，可以使用刚才安装的 Git Bash 工具。进入命令行环境后，我们执行以下操作来创建 SSH 密钥。</p>
<pre><code><span class="built_in">cd</span>  ~/.ssh
</code></pre><p><em>如果还没有 ~/.ssh 目录，可以手工创建一个 <code>mkdir ~/.ssh</code>，之后再通过 <code>cd ~/.ssh</code> 进入 SSH 目录</em></p>
<blockquote>
<p>可以通过 <code>ls</code> 命令查看 SSH 目录下的文件，来确认你是否已经生成过 SSH 密钥；如果 SSH 目录为空，我们开始第二步，生成 SSH 密钥；如果存在 <strong>id_rsa.pub </strong>这个文件，说明你之前生成过 SSH 密钥，可以跳过第二步，直接进行密钥的获取。</p>
</blockquote>
<p><strong>2.2 生成 SSH 密钥</strong></p>
<p>我们通过下面的命令生成密钥，<strong>请将命令中的 <code>YOUR_EMAIL@YOUREMAIL.COM</code> 替换为你自己的 Email 地址。</strong></p>
<pre><code>ssh-keygen -t rsa -<span class="keyword">C</span> <span class="string">"YOUR_EMAIL@YOUREMAIL.COM"</span>
</code></pre><p>在 SSH 生成过程中会出现以下信息，按屏幕的提示操作即可；当提示 <code>Enter passphrase ( empty for no passphrase ) : </code> 时，可以直接按两次回车键输入一个空的 passphrase；也可以选择输入一个 passphrase 口令，如果此时你输入了一个 passphrase，请牢记，之后每次提交时都需要输入这个口令来确认。</p>
<pre><code>$ ssh-keygen -t rsa -C <span class="string">"YOUR_EMAIL@YOUREMAIL.COM"</span>
Generating <span class="keyword">public</span>/<span class="keyword">private</span> rsa key pair.
Enter passphrase (empty <span class="keyword">for</span> no passphrase):
Enter same passphrase <span class="string">again:</span>
Your identification has been saved <span class="keyword">in</span> <span class="regexp">/Users/</span>USERNAME<span class="regexp">/.ssh/</span>id_rsa.
Your <span class="keyword">public</span> key has been saved <span class="keyword">in</span> <span class="regexp">/Users/</span>USERNAME<span class="regexp">/.ssh/</span>id_rsa.pub.
The key fingerprint <span class="string">is:</span>
<span class="number">15</span>:<span class="number">81</span>:<span class="string">d2:</span><span class="number">7</span><span class="string">a:</span><span class="string">c6:</span><span class="number">6</span><span class="string">c:</span><span class="number">0</span><span class="string">f:</span><span class="string">ec:</span><span class="string">b0:</span><span class="string">b6:</span><span class="string">d4:</span><span class="number">18</span>:<span class="string">b8:</span><span class="string">d1:</span><span class="number">41</span>:<span class="number">48</span> YOUR_EMAIL<span class="annotation">@YOUREMAIL</span>.COM
</code></pre><p><em>一般情况下，在命令行中输入密码、口令一类的信息时是没有信息回显的。在我们这一步的操作中，输入 passphrase 口令时，命令行界面上不会随着键盘敲入密码而有什么反馈。</em></p>
<p><strong>2.3 获取 SSH 公钥信息</strong></p>
<p>SSH 秘钥生成结束后，你可以在 SSH 目录下看到私钥 id_rsa 和公钥 id_rsa.pub 这两个文件，不要把私钥文件 id_rsa 的信息透露给任何人。我们可以通过文本编辑器或 <code>cat</code>   命令来查看 id_rsa.pub 公钥信息。</p>
<ul>
<li>通过编辑器。使用你熟悉的文本编辑器，比如 记事本、Sublime Text 等软件打开 id_rsa.pub ，复制里面的所有内容以备下一步使用。</li>
<li>通过 cat命令。在命令行中敲入 cat id_rsa.pub ，回车执行后命令行界面中会显示 id_rsa.pub 文件里的内容，复制后在下一步使用。</li>
</ul>
<p><strong>2.4 添加 SSH 公钥到 GitCafe</strong></p>
<p>打开 GitCafe 网站，进入 账户设置 –&gt; SSH 公钥管理 设置项，点击 添加新公钥 按钮，在「名称」文本框中可以输入任意文字。之后将我们刚刚复制的 SSH 公钥的内容粘贴到公钥文本框中，之后输入 GitCafe 的账户密码，保存。</p>
<p><img src="https://gitcafe-image.b0.upaiyun.com/0675aeeee7c5ae6234263425c7eb6f42.png" alt="添加ssh"></p>
<p>至此，我们已完成 SSH 密钥的生成，并在 GitCafe 设置了公钥。</p>
<p><strong>2.5 测试 GitCafe SSH 连接</strong></p>
<p>完成上面的操作后，可以通过下面的命令来测试一下是否可以连接 GitCafe 服务器。</p>
<pre><code><span class="title">ssh</span> -T git<span class="variable">@gitcafe</span>.com
</code></pre><p>如果你操作的电脑是第一次与 GitCafe 建立连接，会出现以下警告，</p>
<pre><code>The authenticity <span class="keyword">of</span> host <span class="attribute">'gitcafe</span>.com (<span class="number">50.116</span>.<span class="number">2.223</span>)' can<span class="attribute">'t</span> be established.
#RSA key fingerprint <span class="keyword">is</span> <span class="number">84</span>:<span class="number">9</span>e:c9:<span class="number">8</span>e:<span class="number">7</span>f:<span class="number">36</span>:<span class="number">28</span>:<span class="number">08</span>:<span class="number">7</span>e:<span class="number">13</span>:bf:<span class="number">43</span>:<span class="number">12</span>:<span class="number">74</span>:<span class="number">11</span>:<span class="number">4</span>e.
#Are you sure you want <span class="keyword">to</span> continue connecting (yes/no)?
</code></pre><p>输入 yes 后回车。此时，如果你在生成 SSH 密钥时设置了 passphrase 口令，会提示你输入口令，输入后回车即可。</p>
<p>最后，如果你看到以下信息，说明连接成功。</p>
<pre><code>Hi USERNAME! You've successfully authenticated, <span class="keyword">but</span> GitCafe <span class="keyword">does</span> <span class="keyword">not</span> provide shell access.
</code></pre><p>测试通过后，你就可以到 GitCafe 创建项目并上传要托管的项目了。Happy Coding！Happy Git!</p>
<blockquote>
<p><em>如果你对 GitCafe 网站还不熟悉，推荐阅读<a href="https://help.gitcafe.com/manuals/help/getting-started" target="_blank" rel="external">《 GitCafe 快速上手 》</a></em></p>
</blockquote>
<h1 id="3_gitcafe_建立项目仓库">3 gitcafe 建立项目仓库</h1><hr>
<p>进入 GitCafe 个人主页，点击页面右上角的 <em>新建</em> 按钮来新建一个项目。其中，<strong>项目名称必须与拥有者一致。</strong></p>
<blockquote>
<p>例如：我的拥有者为 byvector，则项目名称也为 byvector ，选填内容根据自己情况填写。</p>
</blockquote>
<p><img src="/img/create.png" alt="建立项目仓库"></p>
<h1 id="4_Hexo_介绍及安装">4 Hexo 介绍及安装</h1><hr>
<p><strong>4.1 什么是 Hexo？</strong></p>
<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。</p>
<p><strong>4.2 Hexo 的安装</strong><br>进入 git Bash，输入：</p>
<pre><code>$ npm <span class="operator"><span class="keyword">install</span> -<span class="keyword">g</span> hexo-cli</span>
</code></pre><p>在你的电脑磁盘中新建文件夹 <em>Hexo</em>，右键文件夹，选择 <code>git bash</code> 输入：</p>
<pre><code><span class="variable">$ </span>hexo init
</code></pre><p>完成后输入：</p>
<pre><code>$ npm <span class="keyword">install</span>
</code></pre><p>安装 Hexo3.0 独立出来的模块</p>
<pre><code>npm <span class="operator"><span class="keyword">install</span> hexo-generator-<span class="keyword">index</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-<span class="keyword">archive</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-<span class="keyword">category</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-tag <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-<span class="keyword">server</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-deployer-git <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-renderer-marked@<span class="number">0.2</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-renderer-stylus@<span class="number">0.2</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-feed@<span class="number">1</span> <span class="comment">--save</span>
npm <span class="keyword">install</span> hexo-generator-sitemap@<span class="number">1</span> <span class="comment">--save</span></span>
</code></pre><p>完成后，指定文件夹的目录如下：</p>
<pre><code>.
├── _config.yml
├── package.json
├── scaffolds
├── scripts
├── source
<span class="string">|   ├── _drafts</span>
<span class="string">|   └── _posts</span>
└── themes
</code></pre><blockquote>
<p><strong>_config.yml</strong><br>网站的 配置 信息，您可以在此配置大部分的参数。<br><strong>package.json</strong><br>应用程序的信息。EJS, Stylus 和 Markdown renderer 已默认安装，您可以自由移除。<br><strong>scaffolds</strong><br>模版 文件夹。当您新建文章时，Hexo 会根据 scaffold 来建立文件。<br><strong>scripts</strong><br>脚本 文件夹。脚本是扩展 Hexo 最简易的方式，在此文件夹内的 JavaScript 文件会被自动执行。<br><strong>source</strong><br>资源文件夹是存放用户资源的地方。除 <em>posts 文件夹之外，开头命名为 </em> (下划线)的文件 / 文件夹和隐藏的文件将会被忽略。Markdown 和 HTML 文件会被解析并放到 public 文件夹，而其他文件会被拷贝过去。<br><strong>themes</strong><br>主题 文件夹。Hexo 会根据主题来生成静态页面。</p>
</blockquote>
<p>生成静态文件。</p>
<pre><code><span class="variable">$ </span>hexo generate
</code></pre><p>开启本地server调试。</p>
<pre><code>$ hexo <span class="keyword">server</span>
</code></pre><p>浏览器中打开localhost:4000则可以在本地看到生成的页面。</p>
<p><strong>4.3 Hexo 部署到gitcafe</strong></p>
<p>打开 <code>_config.yml</code> 添加如下配置</p>
<blockquote>
<p>将uer_name 替换成您自己的用户名</p>
</blockquote>
<pre><code><span class="attribute">deploy</span>:
  <span class="attribute">type</span>: git
  <span class="attribute">repo</span>: git<span class="variable">@gitcafe</span>.<span class="attribute">com</span>:usr_name/user_name.git
  <span class="attribute">branch</span>: gitcafe-pages
</code></pre><p>输入命令</p>
<pre><code><span class="variable">$ </span>hexo deploy
</code></pre><p>就可以通过<code>user_name.gitcafe.io</code>访问您自己的博客了。</p>
<blockquote>
<p>其他具体内容可以参考 <a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo 中文文档</a></p>
</blockquote>
<h1 id="4-4_更换主题">4.4 更换主题</h1><p>输入命令</p>
<pre><code>git clone https://<span class="tag">&lt;<span class="title">git</span>/<span class="attribute">repository</span>&gt;</span> themes/<span class="tag">&lt;<span class="title">themename</span>&gt;</span>
</code></pre><p>将<code>_config.yml</code>文件中的<code>theme</code>字段设置为与 <code>&lt;themename&gt;</code>一致</p>
<p><em>更新主题,更新前备份 <code>themes/&lt;themename&gt;</code>目录下的<code>_config.yml</code></em></p>
<pre><code>cd themes/<span class="tag">&lt;<span class="title">themename</span>&gt;</span>
git pull origin master
</code></pre><p><em>以下以 jacman 主题为例</em><br><em>输入命令</em></p>
<pre><code><span class="variable">$ </span>git clone <span class="symbol">https:</span>/<span class="regexp">/github.com/wuchong</span><span class="regexp">/jacman.git themes/jacman</span>
</code></pre><p><em>将<code>_config.yml</code>文件中的<code>theme</code>字段设置为 jacman</em><br><em>更新主题</em></p>
<pre><code><span class="built_in">cd</span> themes/jacman
git pull origin master
</code></pre><blockquote>
<p>执行hexo deploy时发现fatal: ‘github’ does not appear to be a git repository<br>在重新设置 Repo 的时候要把 .deploy/ 文件夹删掉，让 Hexo 再次初始化，否则 Hexo 只是执行 push 操作，所以会一直报错。</p>
</blockquote>
<p>更多有关主题详细内容可以参考 <a href="https://github.com/wuchong/jacman/blob/master/README_zh.md" target="_blank" rel="external">jacman中文说明</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<h1 id="前言">前言</h1><hr>
<p>曾经一直有搭建博客的想法，前面由于时间原因搁置了下来，这次抽时间终于把博客搭建完成了。网上很多教程都是基于 hexo 2.x 的教程，而 hexo 3.0 做了很多变动，于是把这次搭建博客的过程记录下来，供大家参考，如有不对的地方欢迎大家指正。</p>
<h1 id="1_安装">1 安装</h1><hr>
<p><em>请选择对应的版本下载安装</em>。</p>
<p>1.1 安装  <a href="https://nodejs.org/">node.js</a><br>1.2 安装  <a href="http://git-scm.com/">git</a></p>
<h1 id="2_添加SSH公钥">2 添加SSH公钥</h1><hr>
<p><em>由于某些因素，gitcafe 的访问速度比 github 要快，因此以 gitcafe 为例。如果想使用 github，请参考附录。</em></p>
<blockquote>
<p>SSH （ Secure Shell）是一种安全协议，在你的电脑与 GitCafe 服务器进行通信时，我们使用 SSH 密钥（SSH Keys）认证的方式来保证通信安全。你可以在网络上搜索到关于 <strong>SSH 密钥 </strong>的更多介绍；下面我们重点讲解如何创建 SSH 密钥，并将密钥中的公钥添加到 GitCafe，以便我们通过 SSH 协议来访问 Git 仓库。<br>]]>
    
    </summary>
    
      <category term="Hexo" scheme="http://yoursite.com/tags/Hexo/"/>
    
      <category term="Web" scheme="http://yoursite.com/tags/Web/"/>
    
      <category term="html" scheme="http://yoursite.com/tags/html/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Test]]></title>
    <link href="http://yoursite.com/2015/08/11/Test/"/>
    <id>http://yoursite.com/2015/08/11/Test/</id>
    <published>2015-08-11T01:45:39.000Z</published>
    <updated>2015-08-12T01:08:41.827Z</updated>
    <content type="html"><![CDATA[<blockquote>
<p>This is a test.</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<blockquote>
<p>This is a test.</p>
</blockquote>
]]>
    </summary>
    
      <category term="test" scheme="http://yoursite.com/tags/test/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Hello World]]></title>
    <link href="http://yoursite.com/2015/08/11/hello-world/"/>
    <id>http://yoursite.com/2015/08/11/hello-world/</id>
    <published>2015-08-11T01:04:40.000Z</published>
    <updated>2015-08-12T13:26:30.469Z</updated>
    <content type="html"><![CDATA[<p>Welcome to <a href="http://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a><br><a id="more"></a></p>
<h3 id="Run_server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate_static_files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy_to_remote_sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Welcome to <a href="http://hexo.io/">Hexo</a>! This is your very first post. Check <a href="http://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="http://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick_Start">Quick Start</h2><h3 id="Create_a_new_post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="http://hexo.io/docs/writing.html">Writing</a><br>]]>
    
    </summary>
    
      <category term="demo" scheme="http://yoursite.com/tags/demo/"/>
    
  </entry>
  
</feed>
